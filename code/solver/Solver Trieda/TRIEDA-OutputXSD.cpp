// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "TRIEDA-OutputXSD.h"

// ItemAtendimento
// 

const ItemAtendimento::id_type& ItemAtendimento::
id () const
{
  return this->id_.get ();
}

ItemAtendimento::id_type& ItemAtendimento::
id ()
{
  return this->id_.get ();
}

void ItemAtendimento::
id (const id_type& x)
{
  this->id_.set (x);
}

const ItemAtendimento::ofertaCursoCampiId_type& ItemAtendimento::
ofertaCursoCampiId () const
{
  return this->ofertaCursoCampiId_.get ();
}

ItemAtendimento::ofertaCursoCampiId_type& ItemAtendimento::
ofertaCursoCampiId ()
{
  return this->ofertaCursoCampiId_.get ();
}

void ItemAtendimento::
ofertaCursoCampiId (const ofertaCursoCampiId_type& x)
{
  this->ofertaCursoCampiId_.set (x);
}

const ItemAtendimento::disciplinaId_type& ItemAtendimento::
disciplinaId () const
{
  return this->disciplinaId_.get ();
}

ItemAtendimento::disciplinaId_type& ItemAtendimento::
disciplinaId ()
{
  return this->disciplinaId_.get ();
}

void ItemAtendimento::
disciplinaId (const disciplinaId_type& x)
{
  this->disciplinaId_.set (x);
}

const ItemAtendimento::turma_type& ItemAtendimento::
turma () const
{
  return this->turma_.get ();
}

ItemAtendimento::turma_type& ItemAtendimento::
turma ()
{
  return this->turma_.get ();
}

void ItemAtendimento::
turma (const turma_type& x)
{
  this->turma_.set (x);
}

void ItemAtendimento::
turma (::std::auto_ptr< turma_type > x)
{
  this->turma_.set (x);
}

const ItemAtendimento::quatidadeAlunos_type& ItemAtendimento::
quatidadeAlunos () const
{
  return this->quatidadeAlunos_.get ();
}

ItemAtendimento::quatidadeAlunos_type& ItemAtendimento::
quatidadeAlunos ()
{
  return this->quatidadeAlunos_.get ();
}

void ItemAtendimento::
quatidadeAlunos (const quatidadeAlunos_type& x)
{
  this->quatidadeAlunos_.set (x);
}

const ItemAtendimento::salaId_type& ItemAtendimento::
salaId () const
{
  return this->salaId_.get ();
}

ItemAtendimento::salaId_type& ItemAtendimento::
salaId ()
{
  return this->salaId_.get ();
}

void ItemAtendimento::
salaId (const salaId_type& x)
{
  this->salaId_.set (x);
}

const ItemAtendimento::diaSemana_type& ItemAtendimento::
diaSemana () const
{
  return this->diaSemana_.get ();
}

ItemAtendimento::diaSemana_type& ItemAtendimento::
diaSemana ()
{
  return this->diaSemana_.get ();
}

void ItemAtendimento::
diaSemana (const diaSemana_type& x)
{
  this->diaSemana_.set (x);
}

const ItemAtendimento::alocacaoTatico_optional& ItemAtendimento::
alocacaoTatico () const
{
  return this->alocacaoTatico_;
}

ItemAtendimento::alocacaoTatico_optional& ItemAtendimento::
alocacaoTatico ()
{
  return this->alocacaoTatico_;
}

void ItemAtendimento::
alocacaoTatico (const alocacaoTatico_type& x)
{
  this->alocacaoTatico_.set (x);
}

void ItemAtendimento::
alocacaoTatico (const alocacaoTatico_optional& x)
{
  this->alocacaoTatico_ = x;
}

void ItemAtendimento::
alocacaoTatico (::std::auto_ptr< alocacaoTatico_type > x)
{
  this->alocacaoTatico_.set (x);
}

const ItemAtendimento::alocacaoOperacional_optional& ItemAtendimento::
alocacaoOperacional () const
{
  return this->alocacaoOperacional_;
}

ItemAtendimento::alocacaoOperacional_optional& ItemAtendimento::
alocacaoOperacional ()
{
  return this->alocacaoOperacional_;
}

void ItemAtendimento::
alocacaoOperacional (const alocacaoOperacional_type& x)
{
  this->alocacaoOperacional_.set (x);
}

void ItemAtendimento::
alocacaoOperacional (const alocacaoOperacional_optional& x)
{
  this->alocacaoOperacional_ = x;
}

void ItemAtendimento::
alocacaoOperacional (::std::auto_ptr< alocacaoOperacional_type > x)
{
  this->alocacaoOperacional_.set (x);
}


// GrupoAtendimento
// 

const GrupoAtendimento::atendimento_sequence& GrupoAtendimento::
atendimento () const
{
  return this->atendimento_;
}

GrupoAtendimento::atendimento_sequence& GrupoAtendimento::
atendimento ()
{
  return this->atendimento_;
}

void GrupoAtendimento::
atendimento (const atendimento_sequence& s)
{
  this->atendimento_ = s;
}


// ItemTatico
// 

const ItemTatico::qtdeCreditosTeoricos_type& ItemTatico::
qtdeCreditosTeoricos () const
{
  return this->qtdeCreditosTeoricos_.get ();
}

ItemTatico::qtdeCreditosTeoricos_type& ItemTatico::
qtdeCreditosTeoricos ()
{
  return this->qtdeCreditosTeoricos_.get ();
}

void ItemTatico::
qtdeCreditosTeoricos (const qtdeCreditosTeoricos_type& x)
{
  this->qtdeCreditosTeoricos_.set (x);
}

const ItemTatico::qtdeCreditosPraticos_type& ItemTatico::
qtdeCreditosPraticos () const
{
  return this->qtdeCreditosPraticos_.get ();
}

ItemTatico::qtdeCreditosPraticos_type& ItemTatico::
qtdeCreditosPraticos ()
{
  return this->qtdeCreditosPraticos_.get ();
}

void ItemTatico::
qtdeCreditosPraticos (const qtdeCreditosPraticos_type& x)
{
  this->qtdeCreditosPraticos_.set (x);
}


// ItemOperacional
// 

const ItemOperacional::horarioAulaId_type& ItemOperacional::
horarioAulaId () const
{
  return this->horarioAulaId_.get ();
}

ItemOperacional::horarioAulaId_type& ItemOperacional::
horarioAulaId ()
{
  return this->horarioAulaId_.get ();
}

void ItemOperacional::
horarioAulaId (const horarioAulaId_type& x)
{
  this->horarioAulaId_.set (x);
}

const ItemOperacional::professorId_type& ItemOperacional::
professorId () const
{
  return this->professorId_.get ();
}

ItemOperacional::professorId_type& ItemOperacional::
professorId ()
{
  return this->professorId_.get ();
}

void ItemOperacional::
professorId (const professorId_type& x)
{
  this->professorId_.set (x);
}


// ItemAtendimentoCampus
// 

const ItemAtendimentoCampus::campusId_type& ItemAtendimentoCampus::
campusId () const
{
  return this->campusId_.get ();
}

ItemAtendimentoCampus::campusId_type& ItemAtendimentoCampus::
campusId ()
{
  return this->campusId_.get ();
}

void ItemAtendimentoCampus::
campusId (const campusId_type& x)
{
  this->campusId_.set (x);
}

void ItemAtendimentoCampus::
campusId (::std::auto_ptr< campusId_type > x)
{
  this->campusId_.set (x);
}

const ItemAtendimentoCampus::atendimentosUnidades_type& ItemAtendimentoCampus::
atendimentosUnidades () const
{
  return this->atendimentosUnidades_.get ();
}

ItemAtendimentoCampus::atendimentosUnidades_type& ItemAtendimentoCampus::
atendimentosUnidades ()
{
  return this->atendimentosUnidades_.get ();
}

void ItemAtendimentoCampus::
atendimentosUnidades (const atendimentosUnidades_type& x)
{
  this->atendimentosUnidades_.set (x);
}

void ItemAtendimentoCampus::
atendimentosUnidades (::std::auto_ptr< atendimentosUnidades_type > x)
{
  this->atendimentosUnidades_.set (x);
}


// ItemAtendimentoUnidade
// 

const ItemAtendimentoUnidade::unidadeId_type& ItemAtendimentoUnidade::
unidadeId () const
{
  return this->unidadeId_.get ();
}

ItemAtendimentoUnidade::unidadeId_type& ItemAtendimentoUnidade::
unidadeId ()
{
  return this->unidadeId_.get ();
}

void ItemAtendimentoUnidade::
unidadeId (const unidadeId_type& x)
{
  this->unidadeId_.set (x);
}

void ItemAtendimentoUnidade::
unidadeId (::std::auto_ptr< unidadeId_type > x)
{
  this->unidadeId_.set (x);
}

const ItemAtendimentoUnidade::atendimentosSalas_type& ItemAtendimentoUnidade::
atendimentosSalas () const
{
  return this->atendimentosSalas_.get ();
}

ItemAtendimentoUnidade::atendimentosSalas_type& ItemAtendimentoUnidade::
atendimentosSalas ()
{
  return this->atendimentosSalas_.get ();
}

void ItemAtendimentoUnidade::
atendimentosSalas (const atendimentosSalas_type& x)
{
  this->atendimentosSalas_.set (x);
}

void ItemAtendimentoUnidade::
atendimentosSalas (::std::auto_ptr< atendimentosSalas_type > x)
{
  this->atendimentosSalas_.set (x);
}


// ItemAtendimentoSala
// 

const ItemAtendimentoSala::salaId_type& ItemAtendimentoSala::
salaId () const
{
  return this->salaId_.get ();
}

ItemAtendimentoSala::salaId_type& ItemAtendimentoSala::
salaId ()
{
  return this->salaId_.get ();
}

void ItemAtendimentoSala::
salaId (const salaId_type& x)
{
  this->salaId_.set (x);
}

void ItemAtendimentoSala::
salaId (::std::auto_ptr< salaId_type > x)
{
  this->salaId_.set (x);
}

const ItemAtendimentoSala::atendimentosDiasSemana_type& ItemAtendimentoSala::
atendimentosDiasSemana () const
{
  return this->atendimentosDiasSemana_.get ();
}

ItemAtendimentoSala::atendimentosDiasSemana_type& ItemAtendimentoSala::
atendimentosDiasSemana ()
{
  return this->atendimentosDiasSemana_.get ();
}

void ItemAtendimentoSala::
atendimentosDiasSemana (const atendimentosDiasSemana_type& x)
{
  this->atendimentosDiasSemana_.set (x);
}

void ItemAtendimentoSala::
atendimentosDiasSemana (::std::auto_ptr< atendimentosDiasSemana_type > x)
{
  this->atendimentosDiasSemana_.set (x);
}


// ItemAtendimentoDiaSemana
// 

const ItemAtendimentoDiaSemana::diaSemana_type& ItemAtendimentoDiaSemana::
diaSemana () const
{
  return this->diaSemana_.get ();
}

ItemAtendimentoDiaSemana::diaSemana_type& ItemAtendimentoDiaSemana::
diaSemana ()
{
  return this->diaSemana_.get ();
}

void ItemAtendimentoDiaSemana::
diaSemana (const diaSemana_type& x)
{
  this->diaSemana_.set (x);
}

const ItemAtendimentoDiaSemana::atendimentosTatico_optional& ItemAtendimentoDiaSemana::
atendimentosTatico () const
{
  return this->atendimentosTatico_;
}

ItemAtendimentoDiaSemana::atendimentosTatico_optional& ItemAtendimentoDiaSemana::
atendimentosTatico ()
{
  return this->atendimentosTatico_;
}

void ItemAtendimentoDiaSemana::
atendimentosTatico (const atendimentosTatico_type& x)
{
  this->atendimentosTatico_.set (x);
}

void ItemAtendimentoDiaSemana::
atendimentosTatico (const atendimentosTatico_optional& x)
{
  this->atendimentosTatico_ = x;
}

void ItemAtendimentoDiaSemana::
atendimentosTatico (::std::auto_ptr< atendimentosTatico_type > x)
{
  this->atendimentosTatico_.set (x);
}

const ItemAtendimentoDiaSemana::atendimentosTurnos_optional& ItemAtendimentoDiaSemana::
atendimentosTurnos () const
{
  return this->atendimentosTurnos_;
}

ItemAtendimentoDiaSemana::atendimentosTurnos_optional& ItemAtendimentoDiaSemana::
atendimentosTurnos ()
{
  return this->atendimentosTurnos_;
}

void ItemAtendimentoDiaSemana::
atendimentosTurnos (const atendimentosTurnos_type& x)
{
  this->atendimentosTurnos_.set (x);
}

void ItemAtendimentoDiaSemana::
atendimentosTurnos (const atendimentosTurnos_optional& x)
{
  this->atendimentosTurnos_ = x;
}

void ItemAtendimentoDiaSemana::
atendimentosTurnos (::std::auto_ptr< atendimentosTurnos_type > x)
{
  this->atendimentosTurnos_.set (x);
}


// ItemAtendimentoTurno
// 

const ItemAtendimentoTurno::turnoId_type& ItemAtendimentoTurno::
turnoId () const
{
  return this->turnoId_.get ();
}

ItemAtendimentoTurno::turnoId_type& ItemAtendimentoTurno::
turnoId ()
{
  return this->turnoId_.get ();
}

void ItemAtendimentoTurno::
turnoId (const turnoId_type& x)
{
  this->turnoId_.set (x);
}

const ItemAtendimentoTurno::atendimentosHorariosAula_type& ItemAtendimentoTurno::
atendimentosHorariosAula () const
{
  return this->atendimentosHorariosAula_.get ();
}

ItemAtendimentoTurno::atendimentosHorariosAula_type& ItemAtendimentoTurno::
atendimentosHorariosAula ()
{
  return this->atendimentosHorariosAula_.get ();
}

void ItemAtendimentoTurno::
atendimentosHorariosAula (const atendimentosHorariosAula_type& x)
{
  this->atendimentosHorariosAula_.set (x);
}

void ItemAtendimentoTurno::
atendimentosHorariosAula (::std::auto_ptr< atendimentosHorariosAula_type > x)
{
  this->atendimentosHorariosAula_.set (x);
}


// ItemAtendimentoHorarioAula
// 

const ItemAtendimentoHorarioAula::horarioAulaId_type& ItemAtendimentoHorarioAula::
horarioAulaId () const
{
  return this->horarioAulaId_.get ();
}

ItemAtendimentoHorarioAula::horarioAulaId_type& ItemAtendimentoHorarioAula::
horarioAulaId ()
{
  return this->horarioAulaId_.get ();
}

void ItemAtendimentoHorarioAula::
horarioAulaId (const horarioAulaId_type& x)
{
  this->horarioAulaId_.set (x);
}

const ItemAtendimentoHorarioAula::professorId_type& ItemAtendimentoHorarioAula::
professorId () const
{
  return this->professorId_.get ();
}

ItemAtendimentoHorarioAula::professorId_type& ItemAtendimentoHorarioAula::
professorId ()
{
  return this->professorId_.get ();
}

void ItemAtendimentoHorarioAula::
professorId (const professorId_type& x)
{
  this->professorId_.set (x);
}

void ItemAtendimentoHorarioAula::
professorId (::std::auto_ptr< professorId_type > x)
{
  this->professorId_.set (x);
}

const ItemAtendimentoHorarioAula::creditoTeorico_type& ItemAtendimentoHorarioAula::
creditoTeorico () const
{
  return this->creditoTeorico_.get ();
}

ItemAtendimentoHorarioAula::creditoTeorico_type& ItemAtendimentoHorarioAula::
creditoTeorico ()
{
  return this->creditoTeorico_.get ();
}

void ItemAtendimentoHorarioAula::
creditoTeorico (const creditoTeorico_type& x)
{
  this->creditoTeorico_.set (x);
}

const ItemAtendimentoHorarioAula::atendimentosOfertas_type& ItemAtendimentoHorarioAula::
atendimentosOfertas () const
{
  return this->atendimentosOfertas_.get ();
}

ItemAtendimentoHorarioAula::atendimentosOfertas_type& ItemAtendimentoHorarioAula::
atendimentosOfertas ()
{
  return this->atendimentosOfertas_.get ();
}

void ItemAtendimentoHorarioAula::
atendimentosOfertas (const atendimentosOfertas_type& x)
{
  this->atendimentosOfertas_.set (x);
}

void ItemAtendimentoHorarioAula::
atendimentosOfertas (::std::auto_ptr< atendimentosOfertas_type > x)
{
  this->atendimentosOfertas_.set (x);
}


// ItemAtendimentoOferta
// 

const ItemAtendimentoOferta::ofertaCursoCampiId_type& ItemAtendimentoOferta::
ofertaCursoCampiId () const
{
  return this->ofertaCursoCampiId_.get ();
}

ItemAtendimentoOferta::ofertaCursoCampiId_type& ItemAtendimentoOferta::
ofertaCursoCampiId ()
{
  return this->ofertaCursoCampiId_.get ();
}

void ItemAtendimentoOferta::
ofertaCursoCampiId (const ofertaCursoCampiId_type& x)
{
  this->ofertaCursoCampiId_.set (x);
}

void ItemAtendimentoOferta::
ofertaCursoCampiId (::std::auto_ptr< ofertaCursoCampiId_type > x)
{
  this->ofertaCursoCampiId_.set (x);
}

const ItemAtendimentoOferta::disciplinaId_type& ItemAtendimentoOferta::
disciplinaId () const
{
  return this->disciplinaId_.get ();
}

ItemAtendimentoOferta::disciplinaId_type& ItemAtendimentoOferta::
disciplinaId ()
{
  return this->disciplinaId_.get ();
}

void ItemAtendimentoOferta::
disciplinaId (const disciplinaId_type& x)
{
  this->disciplinaId_.set (x);
}

void ItemAtendimentoOferta::
disciplinaId (::std::auto_ptr< disciplinaId_type > x)
{
  this->disciplinaId_.set (x);
}

const ItemAtendimentoOferta::quantidade_type& ItemAtendimentoOferta::
quantidade () const
{
  return this->quantidade_.get ();
}

ItemAtendimentoOferta::quantidade_type& ItemAtendimentoOferta::
quantidade ()
{
  return this->quantidade_.get ();
}

void ItemAtendimentoOferta::
quantidade (const quantidade_type& x)
{
  this->quantidade_.set (x);
}


// ItemAtendimentoTatico
// 

const ItemAtendimentoTatico::atendimentoOferta_type& ItemAtendimentoTatico::
atendimentoOferta () const
{
  return this->atendimentoOferta_.get ();
}

ItemAtendimentoTatico::atendimentoOferta_type& ItemAtendimentoTatico::
atendimentoOferta ()
{
  return this->atendimentoOferta_.get ();
}

void ItemAtendimentoTatico::
atendimentoOferta (const atendimentoOferta_type& x)
{
  this->atendimentoOferta_.set (x);
}

void ItemAtendimentoTatico::
atendimentoOferta (::std::auto_ptr< atendimentoOferta_type > x)
{
  this->atendimentoOferta_.set (x);
}

const ItemAtendimentoTatico::qtdeCreditosTeoricos_type& ItemAtendimentoTatico::
qtdeCreditosTeoricos () const
{
  return this->qtdeCreditosTeoricos_.get ();
}

ItemAtendimentoTatico::qtdeCreditosTeoricos_type& ItemAtendimentoTatico::
qtdeCreditosTeoricos ()
{
  return this->qtdeCreditosTeoricos_.get ();
}

void ItemAtendimentoTatico::
qtdeCreditosTeoricos (const qtdeCreditosTeoricos_type& x)
{
  this->qtdeCreditosTeoricos_.set (x);
}

const ItemAtendimentoTatico::qtdeCreditosPraticos_type& ItemAtendimentoTatico::
qtdeCreditosPraticos () const
{
  return this->qtdeCreditosPraticos_.get ();
}

ItemAtendimentoTatico::qtdeCreditosPraticos_type& ItemAtendimentoTatico::
qtdeCreditosPraticos ()
{
  return this->qtdeCreditosPraticos_.get ();
}

void ItemAtendimentoTatico::
qtdeCreditosPraticos (const qtdeCreditosPraticos_type& x)
{
  this->qtdeCreditosPraticos_.set (x);
}


// GrupoAtendimentoCampus
// 

const GrupoAtendimentoCampus::AtendimentoCampus_sequence& GrupoAtendimentoCampus::
AtendimentoCampus () const
{
  return this->AtendimentoCampus_;
}

GrupoAtendimentoCampus::AtendimentoCampus_sequence& GrupoAtendimentoCampus::
AtendimentoCampus ()
{
  return this->AtendimentoCampus_;
}

void GrupoAtendimentoCampus::
AtendimentoCampus (const AtendimentoCampus_sequence& s)
{
  this->AtendimentoCampus_ = s;
}


// GrupoAtendimentoUnidade
// 

const GrupoAtendimentoUnidade::AtendimentoUnidade_sequence& GrupoAtendimentoUnidade::
AtendimentoUnidade () const
{
  return this->AtendimentoUnidade_;
}

GrupoAtendimentoUnidade::AtendimentoUnidade_sequence& GrupoAtendimentoUnidade::
AtendimentoUnidade ()
{
  return this->AtendimentoUnidade_;
}

void GrupoAtendimentoUnidade::
AtendimentoUnidade (const AtendimentoUnidade_sequence& s)
{
  this->AtendimentoUnidade_ = s;
}


// GrupoAtendimentoSala
// 

const GrupoAtendimentoSala::AtendimentoSala_sequence& GrupoAtendimentoSala::
AtendimentoSala () const
{
  return this->AtendimentoSala_;
}

GrupoAtendimentoSala::AtendimentoSala_sequence& GrupoAtendimentoSala::
AtendimentoSala ()
{
  return this->AtendimentoSala_;
}

void GrupoAtendimentoSala::
AtendimentoSala (const AtendimentoSala_sequence& s)
{
  this->AtendimentoSala_ = s;
}


// GrupoAtendimentoDiaSemana
// 

const GrupoAtendimentoDiaSemana::AtendimentoDiaSemana_sequence& GrupoAtendimentoDiaSemana::
AtendimentoDiaSemana () const
{
  return this->AtendimentoDiaSemana_;
}

GrupoAtendimentoDiaSemana::AtendimentoDiaSemana_sequence& GrupoAtendimentoDiaSemana::
AtendimentoDiaSemana ()
{
  return this->AtendimentoDiaSemana_;
}

void GrupoAtendimentoDiaSemana::
AtendimentoDiaSemana (const AtendimentoDiaSemana_sequence& s)
{
  this->AtendimentoDiaSemana_ = s;
}


// GrupoAtendimentoTurno
// 

const GrupoAtendimentoTurno::AtendimentoTurno_sequence& GrupoAtendimentoTurno::
AtendimentoTurno () const
{
  return this->AtendimentoTurno_;
}

GrupoAtendimentoTurno::AtendimentoTurno_sequence& GrupoAtendimentoTurno::
AtendimentoTurno ()
{
  return this->AtendimentoTurno_;
}

void GrupoAtendimentoTurno::
AtendimentoTurno (const AtendimentoTurno_sequence& s)
{
  this->AtendimentoTurno_ = s;
}


// GrupoAtendimentoHorarioAula
// 

const GrupoAtendimentoHorarioAula::AtendimentoHorarioAula_sequence& GrupoAtendimentoHorarioAula::
AtendimentoHorarioAula () const
{
  return this->AtendimentoHorarioAula_;
}

GrupoAtendimentoHorarioAula::AtendimentoHorarioAula_sequence& GrupoAtendimentoHorarioAula::
AtendimentoHorarioAula ()
{
  return this->AtendimentoHorarioAula_;
}

void GrupoAtendimentoHorarioAula::
AtendimentoHorarioAula (const AtendimentoHorarioAula_sequence& s)
{
  this->AtendimentoHorarioAula_ = s;
}


// GrupoAtendimentoOferta
// 

const GrupoAtendimentoOferta::AtendimentoOferta_sequence& GrupoAtendimentoOferta::
AtendimentoOferta () const
{
  return this->AtendimentoOferta_;
}

GrupoAtendimentoOferta::AtendimentoOferta_sequence& GrupoAtendimentoOferta::
AtendimentoOferta ()
{
  return this->AtendimentoOferta_;
}

void GrupoAtendimentoOferta::
AtendimentoOferta (const AtendimentoOferta_sequence& s)
{
  this->AtendimentoOferta_ = s;
}


// GrupoAtendimentoTatico
// 

const GrupoAtendimentoTatico::AtendimentoTatico_sequence& GrupoAtendimentoTatico::
AtendimentoTatico () const
{
  return this->AtendimentoTatico_;
}

GrupoAtendimentoTatico::AtendimentoTatico_sequence& GrupoAtendimentoTatico::
AtendimentoTatico ()
{
  return this->AtendimentoTatico_;
}

void GrupoAtendimentoTatico::
AtendimentoTatico (const AtendimentoTatico_sequence& s)
{
  this->AtendimentoTatico_ = s;
}


// TriedaOutput
// 

const TriedaOutput::atendimentos1_type& TriedaOutput::
atendimentos1 () const
{
  return this->atendimentos1_.get ();
}

TriedaOutput::atendimentos1_type& TriedaOutput::
atendimentos1 ()
{
  return this->atendimentos1_.get ();
}

void TriedaOutput::
atendimentos1 (const atendimentos1_type& x)
{
  this->atendimentos1_.set (x);
}

void TriedaOutput::
atendimentos1 (::std::auto_ptr< atendimentos1_type > x)
{
  this->atendimentos1_.set (x);
}

const TriedaOutput::atendimentos2_type& TriedaOutput::
atendimentos2 () const
{
  return this->atendimentos2_.get ();
}

TriedaOutput::atendimentos2_type& TriedaOutput::
atendimentos2 ()
{
  return this->atendimentos2_.get ();
}

void TriedaOutput::
atendimentos2 (const atendimentos2_type& x)
{
  this->atendimentos2_.set (x);
}

void TriedaOutput::
atendimentos2 (::std::auto_ptr< atendimentos2_type > x)
{
  this->atendimentos2_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// ItemAtendimento
//

ItemAtendimento::
ItemAtendimento (const id_type& id,
                 const ofertaCursoCampiId_type& ofertaCursoCampiId,
                 const disciplinaId_type& disciplinaId,
                 const turma_type& turma,
                 const quatidadeAlunos_type& quatidadeAlunos,
                 const salaId_type& salaId,
                 const diaSemana_type& diaSemana)
: ::xml_schema::type (),
  id_ (id, ::xml_schema::flags (), this),
  ofertaCursoCampiId_ (ofertaCursoCampiId, ::xml_schema::flags (), this),
  disciplinaId_ (disciplinaId, ::xml_schema::flags (), this),
  turma_ (turma, ::xml_schema::flags (), this),
  quatidadeAlunos_ (quatidadeAlunos, ::xml_schema::flags (), this),
  salaId_ (salaId, ::xml_schema::flags (), this),
  diaSemana_ (diaSemana, ::xml_schema::flags (), this),
  alocacaoTatico_ (::xml_schema::flags (), this),
  alocacaoOperacional_ (::xml_schema::flags (), this)
{
}

ItemAtendimento::
ItemAtendimento (const ItemAtendimento& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  ofertaCursoCampiId_ (x.ofertaCursoCampiId_, f, this),
  disciplinaId_ (x.disciplinaId_, f, this),
  turma_ (x.turma_, f, this),
  quatidadeAlunos_ (x.quatidadeAlunos_, f, this),
  salaId_ (x.salaId_, f, this),
  diaSemana_ (x.diaSemana_, f, this),
  alocacaoTatico_ (x.alocacaoTatico_, f, this),
  alocacaoOperacional_ (x.alocacaoOperacional_, f, this)
{
}

ItemAtendimento::
ItemAtendimento (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  id_ (f, this),
  ofertaCursoCampiId_ (f, this),
  disciplinaId_ (f, this),
  turma_ (f, this),
  quatidadeAlunos_ (f, this),
  salaId_ (f, this),
  diaSemana_ (f, this),
  alocacaoTatico_ (f, this),
  alocacaoOperacional_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ItemAtendimento::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // id
    //
    if (n.name () == "id" && n.namespace_ ().empty ())
    {
      if (!id_.present ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }

    // ofertaCursoCampiId
    //
    if (n.name () == "ofertaCursoCampiId" && n.namespace_ ().empty ())
    {
      if (!ofertaCursoCampiId_.present ())
      {
        this->ofertaCursoCampiId_.set (ofertaCursoCampiId_traits::create (i, f, this));
        continue;
      }
    }

    // disciplinaId
    //
    if (n.name () == "disciplinaId" && n.namespace_ ().empty ())
    {
      if (!disciplinaId_.present ())
      {
        this->disciplinaId_.set (disciplinaId_traits::create (i, f, this));
        continue;
      }
    }

    // turma
    //
    if (n.name () == "turma" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< turma_type > r (
        turma_traits::create (i, f, this));

      if (!turma_.present ())
      {
        this->turma_.set (r);
        continue;
      }
    }

    // quatidadeAlunos
    //
    if (n.name () == "quatidadeAlunos" && n.namespace_ ().empty ())
    {
      if (!quatidadeAlunos_.present ())
      {
        this->quatidadeAlunos_.set (quatidadeAlunos_traits::create (i, f, this));
        continue;
      }
    }

    // salaId
    //
    if (n.name () == "salaId" && n.namespace_ ().empty ())
    {
      if (!salaId_.present ())
      {
        this->salaId_.set (salaId_traits::create (i, f, this));
        continue;
      }
    }

    // diaSemana
    //
    if (n.name () == "diaSemana" && n.namespace_ ().empty ())
    {
      if (!diaSemana_.present ())
      {
        this->diaSemana_.set (diaSemana_traits::create (i, f, this));
        continue;
      }
    }

    // alocacaoTatico
    //
    if (n.name () == "alocacaoTatico" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< alocacaoTatico_type > r (
        alocacaoTatico_traits::create (i, f, this));

      if (!this->alocacaoTatico_)
      {
        this->alocacaoTatico_.set (r);
        continue;
      }
    }

    // alocacaoOperacional
    //
    if (n.name () == "alocacaoOperacional" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< alocacaoOperacional_type > r (
        alocacaoOperacional_traits::create (i, f, this));

      if (!this->alocacaoOperacional_)
      {
        this->alocacaoOperacional_.set (r);
        continue;
      }
    }

    break;
  }

  if (!id_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "id",
      "");
  }

  if (!ofertaCursoCampiId_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "ofertaCursoCampiId",
      "");
  }

  if (!disciplinaId_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "disciplinaId",
      "");
  }

  if (!turma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "turma",
      "");
  }

  if (!quatidadeAlunos_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "quatidadeAlunos",
      "");
  }

  if (!salaId_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "salaId",
      "");
  }

  if (!diaSemana_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "diaSemana",
      "");
  }
}

ItemAtendimento* ItemAtendimento::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ItemAtendimento (*this, f, c);
}

ItemAtendimento::
~ItemAtendimento ()
{
}

// GrupoAtendimento
//

GrupoAtendimento::
GrupoAtendimento ()
: ::xml_schema::type (),
  atendimento_ (::xml_schema::flags (), this)
{
}

GrupoAtendimento::
GrupoAtendimento (const GrupoAtendimento& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  atendimento_ (x.atendimento_, f, this)
{
}

GrupoAtendimento::
GrupoAtendimento (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  atendimento_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void GrupoAtendimento::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // atendimento
    //
    if (n.name () == "atendimento" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< atendimento_type > r (
        atendimento_traits::create (i, f, this));

      this->atendimento_.push_back (r);
      continue;
    }

    break;
  }
}

GrupoAtendimento* GrupoAtendimento::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class GrupoAtendimento (*this, f, c);
}

GrupoAtendimento::
~GrupoAtendimento ()
{
}

// ItemTatico
//

ItemTatico::
ItemTatico (const qtdeCreditosTeoricos_type& qtdeCreditosTeoricos,
            const qtdeCreditosPraticos_type& qtdeCreditosPraticos)
: ::xml_schema::type (),
  qtdeCreditosTeoricos_ (qtdeCreditosTeoricos, ::xml_schema::flags (), this),
  qtdeCreditosPraticos_ (qtdeCreditosPraticos, ::xml_schema::flags (), this)
{
}

ItemTatico::
ItemTatico (const ItemTatico& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  qtdeCreditosTeoricos_ (x.qtdeCreditosTeoricos_, f, this),
  qtdeCreditosPraticos_ (x.qtdeCreditosPraticos_, f, this)
{
}

ItemTatico::
ItemTatico (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  qtdeCreditosTeoricos_ (f, this),
  qtdeCreditosPraticos_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ItemTatico::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // qtdeCreditosTeoricos
    //
    if (n.name () == "qtdeCreditosTeoricos" && n.namespace_ ().empty ())
    {
      if (!qtdeCreditosTeoricos_.present ())
      {
        this->qtdeCreditosTeoricos_.set (qtdeCreditosTeoricos_traits::create (i, f, this));
        continue;
      }
    }

    // qtdeCreditosPraticos
    //
    if (n.name () == "qtdeCreditosPraticos" && n.namespace_ ().empty ())
    {
      if (!qtdeCreditosPraticos_.present ())
      {
        this->qtdeCreditosPraticos_.set (qtdeCreditosPraticos_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!qtdeCreditosTeoricos_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "qtdeCreditosTeoricos",
      "");
  }

  if (!qtdeCreditosPraticos_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "qtdeCreditosPraticos",
      "");
  }
}

ItemTatico* ItemTatico::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ItemTatico (*this, f, c);
}

ItemTatico::
~ItemTatico ()
{
}

// ItemOperacional
//

ItemOperacional::
ItemOperacional (const horarioAulaId_type& horarioAulaId,
                 const professorId_type& professorId)
: ::xml_schema::type (),
  horarioAulaId_ (horarioAulaId, ::xml_schema::flags (), this),
  professorId_ (professorId, ::xml_schema::flags (), this)
{
}

ItemOperacional::
ItemOperacional (const ItemOperacional& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  horarioAulaId_ (x.horarioAulaId_, f, this),
  professorId_ (x.professorId_, f, this)
{
}

ItemOperacional::
ItemOperacional (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  horarioAulaId_ (f, this),
  professorId_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ItemOperacional::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // horarioAulaId
    //
    if (n.name () == "horarioAulaId" && n.namespace_ ().empty ())
    {
      if (!horarioAulaId_.present ())
      {
        this->horarioAulaId_.set (horarioAulaId_traits::create (i, f, this));
        continue;
      }
    }

    // professorId
    //
    if (n.name () == "professorId" && n.namespace_ ().empty ())
    {
      if (!professorId_.present ())
      {
        this->professorId_.set (professorId_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!horarioAulaId_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "horarioAulaId",
      "");
  }

  if (!professorId_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "professorId",
      "");
  }
}

ItemOperacional* ItemOperacional::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ItemOperacional (*this, f, c);
}

ItemOperacional::
~ItemOperacional ()
{
}

// ItemAtendimentoCampus
//

ItemAtendimentoCampus::
ItemAtendimentoCampus (const campusId_type& campusId,
                       const atendimentosUnidades_type& atendimentosUnidades)
: ::xml_schema::type (),
  campusId_ (campusId, ::xml_schema::flags (), this),
  atendimentosUnidades_ (atendimentosUnidades, ::xml_schema::flags (), this)
{
}

ItemAtendimentoCampus::
ItemAtendimentoCampus (const campusId_type& campusId,
                       ::std::auto_ptr< atendimentosUnidades_type >& atendimentosUnidades)
: ::xml_schema::type (),
  campusId_ (campusId, ::xml_schema::flags (), this),
  atendimentosUnidades_ (atendimentosUnidades, ::xml_schema::flags (), this)
{
}

ItemAtendimentoCampus::
ItemAtendimentoCampus (const ItemAtendimentoCampus& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  campusId_ (x.campusId_, f, this),
  atendimentosUnidades_ (x.atendimentosUnidades_, f, this)
{
}

ItemAtendimentoCampus::
ItemAtendimentoCampus (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  campusId_ (f, this),
  atendimentosUnidades_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ItemAtendimentoCampus::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // campusId
    //
    if (n.name () == "campusId" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< campusId_type > r (
        campusId_traits::create (i, f, this));

      if (!campusId_.present ())
      {
        this->campusId_.set (r);
        continue;
      }
    }

    // atendimentosUnidades
    //
    if (n.name () == "atendimentosUnidades" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< atendimentosUnidades_type > r (
        atendimentosUnidades_traits::create (i, f, this));

      if (!atendimentosUnidades_.present ())
      {
        this->atendimentosUnidades_.set (r);
        continue;
      }
    }

    break;
  }

  if (!campusId_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "campusId",
      "");
  }

  if (!atendimentosUnidades_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "atendimentosUnidades",
      "");
  }
}

ItemAtendimentoCampus* ItemAtendimentoCampus::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ItemAtendimentoCampus (*this, f, c);
}

ItemAtendimentoCampus::
~ItemAtendimentoCampus ()
{
}

// ItemAtendimentoUnidade
//

ItemAtendimentoUnidade::
ItemAtendimentoUnidade (const unidadeId_type& unidadeId,
                        const atendimentosSalas_type& atendimentosSalas)
: ::xml_schema::type (),
  unidadeId_ (unidadeId, ::xml_schema::flags (), this),
  atendimentosSalas_ (atendimentosSalas, ::xml_schema::flags (), this)
{
}

ItemAtendimentoUnidade::
ItemAtendimentoUnidade (const unidadeId_type& unidadeId,
                        ::std::auto_ptr< atendimentosSalas_type >& atendimentosSalas)
: ::xml_schema::type (),
  unidadeId_ (unidadeId, ::xml_schema::flags (), this),
  atendimentosSalas_ (atendimentosSalas, ::xml_schema::flags (), this)
{
}

ItemAtendimentoUnidade::
ItemAtendimentoUnidade (const ItemAtendimentoUnidade& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  unidadeId_ (x.unidadeId_, f, this),
  atendimentosSalas_ (x.atendimentosSalas_, f, this)
{
}

ItemAtendimentoUnidade::
ItemAtendimentoUnidade (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  unidadeId_ (f, this),
  atendimentosSalas_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ItemAtendimentoUnidade::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // unidadeId
    //
    if (n.name () == "unidadeId" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< unidadeId_type > r (
        unidadeId_traits::create (i, f, this));

      if (!unidadeId_.present ())
      {
        this->unidadeId_.set (r);
        continue;
      }
    }

    // atendimentosSalas
    //
    if (n.name () == "atendimentosSalas" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< atendimentosSalas_type > r (
        atendimentosSalas_traits::create (i, f, this));

      if (!atendimentosSalas_.present ())
      {
        this->atendimentosSalas_.set (r);
        continue;
      }
    }

    break;
  }

  if (!unidadeId_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "unidadeId",
      "");
  }

  if (!atendimentosSalas_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "atendimentosSalas",
      "");
  }
}

ItemAtendimentoUnidade* ItemAtendimentoUnidade::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ItemAtendimentoUnidade (*this, f, c);
}

ItemAtendimentoUnidade::
~ItemAtendimentoUnidade ()
{
}

// ItemAtendimentoSala
//

ItemAtendimentoSala::
ItemAtendimentoSala (const salaId_type& salaId,
                     const atendimentosDiasSemana_type& atendimentosDiasSemana)
: ::xml_schema::type (),
  salaId_ (salaId, ::xml_schema::flags (), this),
  atendimentosDiasSemana_ (atendimentosDiasSemana, ::xml_schema::flags (), this)
{
}

ItemAtendimentoSala::
ItemAtendimentoSala (const salaId_type& salaId,
                     ::std::auto_ptr< atendimentosDiasSemana_type >& atendimentosDiasSemana)
: ::xml_schema::type (),
  salaId_ (salaId, ::xml_schema::flags (), this),
  atendimentosDiasSemana_ (atendimentosDiasSemana, ::xml_schema::flags (), this)
{
}

ItemAtendimentoSala::
ItemAtendimentoSala (const ItemAtendimentoSala& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  salaId_ (x.salaId_, f, this),
  atendimentosDiasSemana_ (x.atendimentosDiasSemana_, f, this)
{
}

ItemAtendimentoSala::
ItemAtendimentoSala (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  salaId_ (f, this),
  atendimentosDiasSemana_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ItemAtendimentoSala::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // salaId
    //
    if (n.name () == "salaId" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< salaId_type > r (
        salaId_traits::create (i, f, this));

      if (!salaId_.present ())
      {
        this->salaId_.set (r);
        continue;
      }
    }

    // atendimentosDiasSemana
    //
    if (n.name () == "atendimentosDiasSemana" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< atendimentosDiasSemana_type > r (
        atendimentosDiasSemana_traits::create (i, f, this));

      if (!atendimentosDiasSemana_.present ())
      {
        this->atendimentosDiasSemana_.set (r);
        continue;
      }
    }

    break;
  }

  if (!salaId_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "salaId",
      "");
  }

  if (!atendimentosDiasSemana_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "atendimentosDiasSemana",
      "");
  }
}

ItemAtendimentoSala* ItemAtendimentoSala::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ItemAtendimentoSala (*this, f, c);
}

ItemAtendimentoSala::
~ItemAtendimentoSala ()
{
}

// ItemAtendimentoDiaSemana
//

ItemAtendimentoDiaSemana::
ItemAtendimentoDiaSemana (const diaSemana_type& diaSemana)
: ::xml_schema::type (),
  diaSemana_ (diaSemana, ::xml_schema::flags (), this),
  atendimentosTatico_ (::xml_schema::flags (), this),
  atendimentosTurnos_ (::xml_schema::flags (), this)
{
}

ItemAtendimentoDiaSemana::
ItemAtendimentoDiaSemana (const ItemAtendimentoDiaSemana& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  diaSemana_ (x.diaSemana_, f, this),
  atendimentosTatico_ (x.atendimentosTatico_, f, this),
  atendimentosTurnos_ (x.atendimentosTurnos_, f, this)
{
}

ItemAtendimentoDiaSemana::
ItemAtendimentoDiaSemana (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  diaSemana_ (f, this),
  atendimentosTatico_ (f, this),
  atendimentosTurnos_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ItemAtendimentoDiaSemana::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // diaSemana
    //
    if (n.name () == "diaSemana" && n.namespace_ ().empty ())
    {
      if (!diaSemana_.present ())
      {
        this->diaSemana_.set (diaSemana_traits::create (i, f, this));
        continue;
      }
    }

    // atendimentosTatico
    //
    if (n.name () == "atendimentosTatico" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< atendimentosTatico_type > r (
        atendimentosTatico_traits::create (i, f, this));

      if (!this->atendimentosTatico_)
      {
        this->atendimentosTatico_.set (r);
        continue;
      }
    }

    // atendimentosTurnos
    //
    if (n.name () == "atendimentosTurnos" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< atendimentosTurnos_type > r (
        atendimentosTurnos_traits::create (i, f, this));

      if (!this->atendimentosTurnos_)
      {
        this->atendimentosTurnos_.set (r);
        continue;
      }
    }

    break;
  }

  if (!diaSemana_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "diaSemana",
      "");
  }
}

ItemAtendimentoDiaSemana* ItemAtendimentoDiaSemana::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ItemAtendimentoDiaSemana (*this, f, c);
}

ItemAtendimentoDiaSemana::
~ItemAtendimentoDiaSemana ()
{
}

// ItemAtendimentoTurno
//

ItemAtendimentoTurno::
ItemAtendimentoTurno (const turnoId_type& turnoId,
                      const atendimentosHorariosAula_type& atendimentosHorariosAula)
: ::xml_schema::type (),
  turnoId_ (turnoId, ::xml_schema::flags (), this),
  atendimentosHorariosAula_ (atendimentosHorariosAula, ::xml_schema::flags (), this)
{
}

ItemAtendimentoTurno::
ItemAtendimentoTurno (const turnoId_type& turnoId,
                      ::std::auto_ptr< atendimentosHorariosAula_type >& atendimentosHorariosAula)
: ::xml_schema::type (),
  turnoId_ (turnoId, ::xml_schema::flags (), this),
  atendimentosHorariosAula_ (atendimentosHorariosAula, ::xml_schema::flags (), this)
{
}

ItemAtendimentoTurno::
ItemAtendimentoTurno (const ItemAtendimentoTurno& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  turnoId_ (x.turnoId_, f, this),
  atendimentosHorariosAula_ (x.atendimentosHorariosAula_, f, this)
{
}

ItemAtendimentoTurno::
ItemAtendimentoTurno (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  turnoId_ (f, this),
  atendimentosHorariosAula_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ItemAtendimentoTurno::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // turnoId
    //
    if (n.name () == "turnoId" && n.namespace_ ().empty ())
    {
      if (!turnoId_.present ())
      {
        this->turnoId_.set (turnoId_traits::create (i, f, this));
        continue;
      }
    }

    // atendimentosHorariosAula
    //
    if (n.name () == "atendimentosHorariosAula" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< atendimentosHorariosAula_type > r (
        atendimentosHorariosAula_traits::create (i, f, this));

      if (!atendimentosHorariosAula_.present ())
      {
        this->atendimentosHorariosAula_.set (r);
        continue;
      }
    }

    break;
  }

  if (!turnoId_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "turnoId",
      "");
  }

  if (!atendimentosHorariosAula_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "atendimentosHorariosAula",
      "");
  }
}

ItemAtendimentoTurno* ItemAtendimentoTurno::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ItemAtendimentoTurno (*this, f, c);
}

ItemAtendimentoTurno::
~ItemAtendimentoTurno ()
{
}

// ItemAtendimentoHorarioAula
//

ItemAtendimentoHorarioAula::
ItemAtendimentoHorarioAula (const horarioAulaId_type& horarioAulaId,
                            const professorId_type& professorId,
                            const creditoTeorico_type& creditoTeorico,
                            const atendimentosOfertas_type& atendimentosOfertas)
: ::xml_schema::type (),
  horarioAulaId_ (horarioAulaId, ::xml_schema::flags (), this),
  professorId_ (professorId, ::xml_schema::flags (), this),
  creditoTeorico_ (creditoTeorico, ::xml_schema::flags (), this),
  atendimentosOfertas_ (atendimentosOfertas, ::xml_schema::flags (), this)
{
}

ItemAtendimentoHorarioAula::
ItemAtendimentoHorarioAula (const horarioAulaId_type& horarioAulaId,
                            const professorId_type& professorId,
                            const creditoTeorico_type& creditoTeorico,
                            ::std::auto_ptr< atendimentosOfertas_type >& atendimentosOfertas)
: ::xml_schema::type (),
  horarioAulaId_ (horarioAulaId, ::xml_schema::flags (), this),
  professorId_ (professorId, ::xml_schema::flags (), this),
  creditoTeorico_ (creditoTeorico, ::xml_schema::flags (), this),
  atendimentosOfertas_ (atendimentosOfertas, ::xml_schema::flags (), this)
{
}

ItemAtendimentoHorarioAula::
ItemAtendimentoHorarioAula (const ItemAtendimentoHorarioAula& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  horarioAulaId_ (x.horarioAulaId_, f, this),
  professorId_ (x.professorId_, f, this),
  creditoTeorico_ (x.creditoTeorico_, f, this),
  atendimentosOfertas_ (x.atendimentosOfertas_, f, this)
{
}

ItemAtendimentoHorarioAula::
ItemAtendimentoHorarioAula (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  horarioAulaId_ (f, this),
  professorId_ (f, this),
  creditoTeorico_ (f, this),
  atendimentosOfertas_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ItemAtendimentoHorarioAula::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // horarioAulaId
    //
    if (n.name () == "horarioAulaId" && n.namespace_ ().empty ())
    {
      if (!horarioAulaId_.present ())
      {
        this->horarioAulaId_.set (horarioAulaId_traits::create (i, f, this));
        continue;
      }
    }

    // professorId
    //
    if (n.name () == "professorId" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< professorId_type > r (
        professorId_traits::create (i, f, this));

      if (!professorId_.present ())
      {
        this->professorId_.set (r);
        continue;
      }
    }

    // creditoTeorico
    //
    if (n.name () == "creditoTeorico" && n.namespace_ ().empty ())
    {
      if (!creditoTeorico_.present ())
      {
        this->creditoTeorico_.set (creditoTeorico_traits::create (i, f, this));
        continue;
      }
    }

    // atendimentosOfertas
    //
    if (n.name () == "atendimentosOfertas" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< atendimentosOfertas_type > r (
        atendimentosOfertas_traits::create (i, f, this));

      if (!atendimentosOfertas_.present ())
      {
        this->atendimentosOfertas_.set (r);
        continue;
      }
    }

    break;
  }

  if (!horarioAulaId_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "horarioAulaId",
      "");
  }

  if (!professorId_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "professorId",
      "");
  }

  if (!creditoTeorico_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "creditoTeorico",
      "");
  }

  if (!atendimentosOfertas_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "atendimentosOfertas",
      "");
  }
}

ItemAtendimentoHorarioAula* ItemAtendimentoHorarioAula::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ItemAtendimentoHorarioAula (*this, f, c);
}

ItemAtendimentoHorarioAula::
~ItemAtendimentoHorarioAula ()
{
}

// ItemAtendimentoOferta
//

ItemAtendimentoOferta::
ItemAtendimentoOferta (const ofertaCursoCampiId_type& ofertaCursoCampiId,
                       const disciplinaId_type& disciplinaId,
                       const quantidade_type& quantidade)
: ::xml_schema::type (),
  ofertaCursoCampiId_ (ofertaCursoCampiId, ::xml_schema::flags (), this),
  disciplinaId_ (disciplinaId, ::xml_schema::flags (), this),
  quantidade_ (quantidade, ::xml_schema::flags (), this)
{
}

ItemAtendimentoOferta::
ItemAtendimentoOferta (const ItemAtendimentoOferta& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  ofertaCursoCampiId_ (x.ofertaCursoCampiId_, f, this),
  disciplinaId_ (x.disciplinaId_, f, this),
  quantidade_ (x.quantidade_, f, this)
{
}

ItemAtendimentoOferta::
ItemAtendimentoOferta (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  ofertaCursoCampiId_ (f, this),
  disciplinaId_ (f, this),
  quantidade_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ItemAtendimentoOferta::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // ofertaCursoCampiId
    //
    if (n.name () == "ofertaCursoCampiId" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< ofertaCursoCampiId_type > r (
        ofertaCursoCampiId_traits::create (i, f, this));

      if (!ofertaCursoCampiId_.present ())
      {
        this->ofertaCursoCampiId_.set (r);
        continue;
      }
    }

    // disciplinaId
    //
    if (n.name () == "disciplinaId" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< disciplinaId_type > r (
        disciplinaId_traits::create (i, f, this));

      if (!disciplinaId_.present ())
      {
        this->disciplinaId_.set (r);
        continue;
      }
    }

    // quantidade
    //
    if (n.name () == "quantidade" && n.namespace_ ().empty ())
    {
      if (!quantidade_.present ())
      {
        this->quantidade_.set (quantidade_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!ofertaCursoCampiId_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "ofertaCursoCampiId",
      "");
  }

  if (!disciplinaId_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "disciplinaId",
      "");
  }

  if (!quantidade_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "quantidade",
      "");
  }
}

ItemAtendimentoOferta* ItemAtendimentoOferta::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ItemAtendimentoOferta (*this, f, c);
}

ItemAtendimentoOferta::
~ItemAtendimentoOferta ()
{
}

// ItemAtendimentoTatico
//

ItemAtendimentoTatico::
ItemAtendimentoTatico (const atendimentoOferta_type& atendimentoOferta,
                       const qtdeCreditosTeoricos_type& qtdeCreditosTeoricos,
                       const qtdeCreditosPraticos_type& qtdeCreditosPraticos)
: ::xml_schema::type (),
  atendimentoOferta_ (atendimentoOferta, ::xml_schema::flags (), this),
  qtdeCreditosTeoricos_ (qtdeCreditosTeoricos, ::xml_schema::flags (), this),
  qtdeCreditosPraticos_ (qtdeCreditosPraticos, ::xml_schema::flags (), this)
{
}

ItemAtendimentoTatico::
ItemAtendimentoTatico (::std::auto_ptr< atendimentoOferta_type >& atendimentoOferta,
                       const qtdeCreditosTeoricos_type& qtdeCreditosTeoricos,
                       const qtdeCreditosPraticos_type& qtdeCreditosPraticos)
: ::xml_schema::type (),
  atendimentoOferta_ (atendimentoOferta, ::xml_schema::flags (), this),
  qtdeCreditosTeoricos_ (qtdeCreditosTeoricos, ::xml_schema::flags (), this),
  qtdeCreditosPraticos_ (qtdeCreditosPraticos, ::xml_schema::flags (), this)
{
}

ItemAtendimentoTatico::
ItemAtendimentoTatico (const ItemAtendimentoTatico& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  atendimentoOferta_ (x.atendimentoOferta_, f, this),
  qtdeCreditosTeoricos_ (x.qtdeCreditosTeoricos_, f, this),
  qtdeCreditosPraticos_ (x.qtdeCreditosPraticos_, f, this)
{
}

ItemAtendimentoTatico::
ItemAtendimentoTatico (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  atendimentoOferta_ (f, this),
  qtdeCreditosTeoricos_ (f, this),
  qtdeCreditosPraticos_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ItemAtendimentoTatico::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // atendimentoOferta
    //
    if (n.name () == "atendimentoOferta" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< atendimentoOferta_type > r (
        atendimentoOferta_traits::create (i, f, this));

      if (!atendimentoOferta_.present ())
      {
        this->atendimentoOferta_.set (r);
        continue;
      }
    }

    // qtdeCreditosTeoricos
    //
    if (n.name () == "qtdeCreditosTeoricos" && n.namespace_ ().empty ())
    {
      if (!qtdeCreditosTeoricos_.present ())
      {
        this->qtdeCreditosTeoricos_.set (qtdeCreditosTeoricos_traits::create (i, f, this));
        continue;
      }
    }

    // qtdeCreditosPraticos
    //
    if (n.name () == "qtdeCreditosPraticos" && n.namespace_ ().empty ())
    {
      if (!qtdeCreditosPraticos_.present ())
      {
        this->qtdeCreditosPraticos_.set (qtdeCreditosPraticos_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!atendimentoOferta_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "atendimentoOferta",
      "");
  }

  if (!qtdeCreditosTeoricos_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "qtdeCreditosTeoricos",
      "");
  }

  if (!qtdeCreditosPraticos_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "qtdeCreditosPraticos",
      "");
  }
}

ItemAtendimentoTatico* ItemAtendimentoTatico::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ItemAtendimentoTatico (*this, f, c);
}

ItemAtendimentoTatico::
~ItemAtendimentoTatico ()
{
}

// GrupoAtendimentoCampus
//

GrupoAtendimentoCampus::
GrupoAtendimentoCampus ()
: ::xml_schema::type (),
  AtendimentoCampus_ (::xml_schema::flags (), this)
{
}

GrupoAtendimentoCampus::
GrupoAtendimentoCampus (const GrupoAtendimentoCampus& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  AtendimentoCampus_ (x.AtendimentoCampus_, f, this)
{
}

GrupoAtendimentoCampus::
GrupoAtendimentoCampus (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  AtendimentoCampus_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void GrupoAtendimentoCampus::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // AtendimentoCampus
    //
    if (n.name () == "AtendimentoCampus" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< AtendimentoCampus_type > r (
        AtendimentoCampus_traits::create (i, f, this));

      this->AtendimentoCampus_.push_back (r);
      continue;
    }

    break;
  }
}

GrupoAtendimentoCampus* GrupoAtendimentoCampus::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class GrupoAtendimentoCampus (*this, f, c);
}

GrupoAtendimentoCampus::
~GrupoAtendimentoCampus ()
{
}

// GrupoAtendimentoUnidade
//

GrupoAtendimentoUnidade::
GrupoAtendimentoUnidade ()
: ::xml_schema::type (),
  AtendimentoUnidade_ (::xml_schema::flags (), this)
{
}

GrupoAtendimentoUnidade::
GrupoAtendimentoUnidade (const GrupoAtendimentoUnidade& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  AtendimentoUnidade_ (x.AtendimentoUnidade_, f, this)
{
}

GrupoAtendimentoUnidade::
GrupoAtendimentoUnidade (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  AtendimentoUnidade_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void GrupoAtendimentoUnidade::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // AtendimentoUnidade
    //
    if (n.name () == "AtendimentoUnidade" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< AtendimentoUnidade_type > r (
        AtendimentoUnidade_traits::create (i, f, this));

      this->AtendimentoUnidade_.push_back (r);
      continue;
    }

    break;
  }
}

GrupoAtendimentoUnidade* GrupoAtendimentoUnidade::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class GrupoAtendimentoUnidade (*this, f, c);
}

GrupoAtendimentoUnidade::
~GrupoAtendimentoUnidade ()
{
}

// GrupoAtendimentoSala
//

GrupoAtendimentoSala::
GrupoAtendimentoSala ()
: ::xml_schema::type (),
  AtendimentoSala_ (::xml_schema::flags (), this)
{
}

GrupoAtendimentoSala::
GrupoAtendimentoSala (const GrupoAtendimentoSala& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  AtendimentoSala_ (x.AtendimentoSala_, f, this)
{
}

GrupoAtendimentoSala::
GrupoAtendimentoSala (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  AtendimentoSala_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void GrupoAtendimentoSala::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // AtendimentoSala
    //
    if (n.name () == "AtendimentoSala" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< AtendimentoSala_type > r (
        AtendimentoSala_traits::create (i, f, this));

      this->AtendimentoSala_.push_back (r);
      continue;
    }

    break;
  }
}

GrupoAtendimentoSala* GrupoAtendimentoSala::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class GrupoAtendimentoSala (*this, f, c);
}

GrupoAtendimentoSala::
~GrupoAtendimentoSala ()
{
}

// GrupoAtendimentoDiaSemana
//

GrupoAtendimentoDiaSemana::
GrupoAtendimentoDiaSemana ()
: ::xml_schema::type (),
  AtendimentoDiaSemana_ (::xml_schema::flags (), this)
{
}

GrupoAtendimentoDiaSemana::
GrupoAtendimentoDiaSemana (const GrupoAtendimentoDiaSemana& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  AtendimentoDiaSemana_ (x.AtendimentoDiaSemana_, f, this)
{
}

GrupoAtendimentoDiaSemana::
GrupoAtendimentoDiaSemana (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  AtendimentoDiaSemana_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void GrupoAtendimentoDiaSemana::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // AtendimentoDiaSemana
    //
    if (n.name () == "AtendimentoDiaSemana" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< AtendimentoDiaSemana_type > r (
        AtendimentoDiaSemana_traits::create (i, f, this));

      this->AtendimentoDiaSemana_.push_back (r);
      continue;
    }

    break;
  }
}

GrupoAtendimentoDiaSemana* GrupoAtendimentoDiaSemana::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class GrupoAtendimentoDiaSemana (*this, f, c);
}

GrupoAtendimentoDiaSemana::
~GrupoAtendimentoDiaSemana ()
{
}

// GrupoAtendimentoTurno
//

GrupoAtendimentoTurno::
GrupoAtendimentoTurno ()
: ::xml_schema::type (),
  AtendimentoTurno_ (::xml_schema::flags (), this)
{
}

GrupoAtendimentoTurno::
GrupoAtendimentoTurno (const GrupoAtendimentoTurno& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  AtendimentoTurno_ (x.AtendimentoTurno_, f, this)
{
}

GrupoAtendimentoTurno::
GrupoAtendimentoTurno (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  AtendimentoTurno_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void GrupoAtendimentoTurno::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // AtendimentoTurno
    //
    if (n.name () == "AtendimentoTurno" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< AtendimentoTurno_type > r (
        AtendimentoTurno_traits::create (i, f, this));

      this->AtendimentoTurno_.push_back (r);
      continue;
    }

    break;
  }
}

GrupoAtendimentoTurno* GrupoAtendimentoTurno::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class GrupoAtendimentoTurno (*this, f, c);
}

GrupoAtendimentoTurno::
~GrupoAtendimentoTurno ()
{
}

// GrupoAtendimentoHorarioAula
//

GrupoAtendimentoHorarioAula::
GrupoAtendimentoHorarioAula ()
: ::xml_schema::type (),
  AtendimentoHorarioAula_ (::xml_schema::flags (), this)
{
}

GrupoAtendimentoHorarioAula::
GrupoAtendimentoHorarioAula (const GrupoAtendimentoHorarioAula& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  AtendimentoHorarioAula_ (x.AtendimentoHorarioAula_, f, this)
{
}

GrupoAtendimentoHorarioAula::
GrupoAtendimentoHorarioAula (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  AtendimentoHorarioAula_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void GrupoAtendimentoHorarioAula::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // AtendimentoHorarioAula
    //
    if (n.name () == "AtendimentoHorarioAula" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< AtendimentoHorarioAula_type > r (
        AtendimentoHorarioAula_traits::create (i, f, this));

      this->AtendimentoHorarioAula_.push_back (r);
      continue;
    }

    break;
  }
}

GrupoAtendimentoHorarioAula* GrupoAtendimentoHorarioAula::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class GrupoAtendimentoHorarioAula (*this, f, c);
}

GrupoAtendimentoHorarioAula::
~GrupoAtendimentoHorarioAula ()
{
}

// GrupoAtendimentoOferta
//

GrupoAtendimentoOferta::
GrupoAtendimentoOferta ()
: ::xml_schema::type (),
  AtendimentoOferta_ (::xml_schema::flags (), this)
{
}

GrupoAtendimentoOferta::
GrupoAtendimentoOferta (const GrupoAtendimentoOferta& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  AtendimentoOferta_ (x.AtendimentoOferta_, f, this)
{
}

GrupoAtendimentoOferta::
GrupoAtendimentoOferta (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  AtendimentoOferta_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void GrupoAtendimentoOferta::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // AtendimentoOferta
    //
    if (n.name () == "AtendimentoOferta" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< AtendimentoOferta_type > r (
        AtendimentoOferta_traits::create (i, f, this));

      this->AtendimentoOferta_.push_back (r);
      continue;
    }

    break;
  }
}

GrupoAtendimentoOferta* GrupoAtendimentoOferta::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class GrupoAtendimentoOferta (*this, f, c);
}

GrupoAtendimentoOferta::
~GrupoAtendimentoOferta ()
{
}

// GrupoAtendimentoTatico
//

GrupoAtendimentoTatico::
GrupoAtendimentoTatico ()
: ::xml_schema::type (),
  AtendimentoTatico_ (::xml_schema::flags (), this)
{
}

GrupoAtendimentoTatico::
GrupoAtendimentoTatico (const GrupoAtendimentoTatico& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  AtendimentoTatico_ (x.AtendimentoTatico_, f, this)
{
}

GrupoAtendimentoTatico::
GrupoAtendimentoTatico (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  AtendimentoTatico_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void GrupoAtendimentoTatico::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // AtendimentoTatico
    //
    if (n.name () == "AtendimentoTatico" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< AtendimentoTatico_type > r (
        AtendimentoTatico_traits::create (i, f, this));

      this->AtendimentoTatico_.push_back (r);
      continue;
    }

    break;
  }
}

GrupoAtendimentoTatico* GrupoAtendimentoTatico::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class GrupoAtendimentoTatico (*this, f, c);
}

GrupoAtendimentoTatico::
~GrupoAtendimentoTatico ()
{
}

// TriedaOutput
//

TriedaOutput::
TriedaOutput (const atendimentos1_type& atendimentos1,
              const atendimentos2_type& atendimentos2)
: ::xml_schema::type (),
  atendimentos1_ (atendimentos1, ::xml_schema::flags (), this),
  atendimentos2_ (atendimentos2, ::xml_schema::flags (), this)
{
}

TriedaOutput::
TriedaOutput (::std::auto_ptr< atendimentos1_type >& atendimentos1,
              ::std::auto_ptr< atendimentos2_type >& atendimentos2)
: ::xml_schema::type (),
  atendimentos1_ (atendimentos1, ::xml_schema::flags (), this),
  atendimentos2_ (atendimentos2, ::xml_schema::flags (), this)
{
}

TriedaOutput::
TriedaOutput (const TriedaOutput& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  atendimentos1_ (x.atendimentos1_, f, this),
  atendimentos2_ (x.atendimentos2_, f, this)
{
}

TriedaOutput::
TriedaOutput (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  atendimentos1_ (f, this),
  atendimentos2_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void TriedaOutput::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // atendimentos1
    //
    if (n.name () == "atendimentos1" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< atendimentos1_type > r (
        atendimentos1_traits::create (i, f, this));

      if (!atendimentos1_.present ())
      {
        this->atendimentos1_.set (r);
        continue;
      }
    }

    // atendimentos2
    //
    if (n.name () == "atendimentos2" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< atendimentos2_type > r (
        atendimentos2_traits::create (i, f, this));

      if (!atendimentos2_.present ())
      {
        this->atendimentos2_.set (r);
        continue;
      }
    }

    break;
  }

  if (!atendimentos1_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "atendimentos1",
      "");
  }

  if (!atendimentos2_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "atendimentos2",
      "");
  }
}

TriedaOutput* TriedaOutput::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class TriedaOutput (*this, f, c);
}

TriedaOutput::
~TriedaOutput ()
{
}

#include <ostream>

::std::ostream&
operator<< (::std::ostream& o, const ItemAtendimento& i)
{
  o << ::std::endl << "id: " << i.id ();
  o << ::std::endl << "ofertaCursoCampiId: " << i.ofertaCursoCampiId ();
  o << ::std::endl << "disciplinaId: " << i.disciplinaId ();
  o << ::std::endl << "turma: " << i.turma ();
  o << ::std::endl << "quatidadeAlunos: " << i.quatidadeAlunos ();
  o << ::std::endl << "salaId: " << i.salaId ();
  o << ::std::endl << "diaSemana: " << i.diaSemana ();
  if (i.alocacaoTatico ())
  {
    o << ::std::endl << "alocacaoTatico: " << *i.alocacaoTatico ();
  }

  if (i.alocacaoOperacional ())
  {
    o << ::std::endl << "alocacaoOperacional: " << *i.alocacaoOperacional ();
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const GrupoAtendimento& i)
{
  for (GrupoAtendimento::atendimento_const_iterator
       b (i.atendimento ().begin ()), e (i.atendimento ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "atendimento: " << *b;
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const ItemTatico& i)
{
  o << ::std::endl << "qtdeCreditosTeoricos: " << i.qtdeCreditosTeoricos ();
  o << ::std::endl << "qtdeCreditosPraticos: " << i.qtdeCreditosPraticos ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const ItemOperacional& i)
{
  o << ::std::endl << "horarioAulaId: " << i.horarioAulaId ();
  o << ::std::endl << "professorId: " << i.professorId ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const ItemAtendimentoCampus& i)
{
  o << ::std::endl << "campusId: " << i.campusId ();
  o << ::std::endl << "atendimentosUnidades: " << i.atendimentosUnidades ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const ItemAtendimentoUnidade& i)
{
  o << ::std::endl << "unidadeId: " << i.unidadeId ();
  o << ::std::endl << "atendimentosSalas: " << i.atendimentosSalas ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const ItemAtendimentoSala& i)
{
  o << ::std::endl << "salaId: " << i.salaId ();
  o << ::std::endl << "atendimentosDiasSemana: " << i.atendimentosDiasSemana ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const ItemAtendimentoDiaSemana& i)
{
  o << ::std::endl << "diaSemana: " << i.diaSemana ();
  if (i.atendimentosTatico ())
  {
    o << ::std::endl << "atendimentosTatico: " << *i.atendimentosTatico ();
  }

  if (i.atendimentosTurnos ())
  {
    o << ::std::endl << "atendimentosTurnos: " << *i.atendimentosTurnos ();
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const ItemAtendimentoTurno& i)
{
  o << ::std::endl << "turnoId: " << i.turnoId ();
  o << ::std::endl << "atendimentosHorariosAula: " << i.atendimentosHorariosAula ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const ItemAtendimentoHorarioAula& i)
{
  o << ::std::endl << "horarioAulaId: " << i.horarioAulaId ();
  o << ::std::endl << "professorId: " << i.professorId ();
  o << ::std::endl << "creditoTeorico: " << i.creditoTeorico ();
  o << ::std::endl << "atendimentosOfertas: " << i.atendimentosOfertas ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const ItemAtendimentoOferta& i)
{
  o << ::std::endl << "ofertaCursoCampiId: " << i.ofertaCursoCampiId ();
  o << ::std::endl << "disciplinaId: " << i.disciplinaId ();
  o << ::std::endl << "quantidade: " << i.quantidade ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const ItemAtendimentoTatico& i)
{
  o << ::std::endl << "atendimentoOferta: " << i.atendimentoOferta ();
  o << ::std::endl << "qtdeCreditosTeoricos: " << i.qtdeCreditosTeoricos ();
  o << ::std::endl << "qtdeCreditosPraticos: " << i.qtdeCreditosPraticos ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const GrupoAtendimentoCampus& i)
{
  for (GrupoAtendimentoCampus::AtendimentoCampus_const_iterator
       b (i.AtendimentoCampus ().begin ()), e (i.AtendimentoCampus ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "AtendimentoCampus: " << *b;
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const GrupoAtendimentoUnidade& i)
{
  for (GrupoAtendimentoUnidade::AtendimentoUnidade_const_iterator
       b (i.AtendimentoUnidade ().begin ()), e (i.AtendimentoUnidade ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "AtendimentoUnidade: " << *b;
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const GrupoAtendimentoSala& i)
{
  for (GrupoAtendimentoSala::AtendimentoSala_const_iterator
       b (i.AtendimentoSala ().begin ()), e (i.AtendimentoSala ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "AtendimentoSala: " << *b;
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const GrupoAtendimentoDiaSemana& i)
{
  for (GrupoAtendimentoDiaSemana::AtendimentoDiaSemana_const_iterator
       b (i.AtendimentoDiaSemana ().begin ()), e (i.AtendimentoDiaSemana ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "AtendimentoDiaSemana: " << *b;
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const GrupoAtendimentoTurno& i)
{
  for (GrupoAtendimentoTurno::AtendimentoTurno_const_iterator
       b (i.AtendimentoTurno ().begin ()), e (i.AtendimentoTurno ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "AtendimentoTurno: " << *b;
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const GrupoAtendimentoHorarioAula& i)
{
  for (GrupoAtendimentoHorarioAula::AtendimentoHorarioAula_const_iterator
       b (i.AtendimentoHorarioAula ().begin ()), e (i.AtendimentoHorarioAula ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "AtendimentoHorarioAula: " << *b;
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const GrupoAtendimentoOferta& i)
{
  for (GrupoAtendimentoOferta::AtendimentoOferta_const_iterator
       b (i.AtendimentoOferta ().begin ()), e (i.AtendimentoOferta ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "AtendimentoOferta: " << *b;
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const GrupoAtendimentoTatico& i)
{
  for (GrupoAtendimentoTatico::AtendimentoTatico_const_iterator
       b (i.AtendimentoTatico ().begin ()), e (i.AtendimentoTatico ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "AtendimentoTatico: " << *b;
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const TriedaOutput& i)
{
  o << ::std::endl << "atendimentos1: " << i.atendimentos1 ();
  o << ::std::endl << "atendimentos2: " << i.atendimentos2 ();
  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const ItemAtendimento& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "id",
        e));

    s << i.id ();
  }

  // ofertaCursoCampiId
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "ofertaCursoCampiId",
        e));

    s << i.ofertaCursoCampiId ();
  }

  // disciplinaId
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "disciplinaId",
        e));

    s << i.disciplinaId ();
  }

  // turma
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "turma",
        e));

    s << i.turma ();
  }

  // quatidadeAlunos
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "quatidadeAlunos",
        e));

    s << i.quatidadeAlunos ();
  }

  // salaId
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "salaId",
        e));

    s << i.salaId ();
  }

  // diaSemana
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "diaSemana",
        e));

    s << i.diaSemana ();
  }

  // alocacaoTatico
  //
  if (i.alocacaoTatico ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "alocacaoTatico",
        e));

    s << *i.alocacaoTatico ();
  }

  // alocacaoOperacional
  //
  if (i.alocacaoOperacional ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "alocacaoOperacional",
        e));

    s << *i.alocacaoOperacional ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const GrupoAtendimento& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // atendimento
  //
  for (GrupoAtendimento::atendimento_const_iterator
       b (i.atendimento ().begin ()), n (i.atendimento ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "atendimento",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const ItemTatico& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // qtdeCreditosTeoricos
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "qtdeCreditosTeoricos",
        e));

    s << i.qtdeCreditosTeoricos ();
  }

  // qtdeCreditosPraticos
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "qtdeCreditosPraticos",
        e));

    s << i.qtdeCreditosPraticos ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ItemOperacional& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // horarioAulaId
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "horarioAulaId",
        e));

    s << i.horarioAulaId ();
  }

  // professorId
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "professorId",
        e));

    s << i.professorId ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ItemAtendimentoCampus& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // campusId
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "campusId",
        e));

    s << i.campusId ();
  }

  // atendimentosUnidades
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "atendimentosUnidades",
        e));

    s << i.atendimentosUnidades ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ItemAtendimentoUnidade& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // unidadeId
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "unidadeId",
        e));

    s << i.unidadeId ();
  }

  // atendimentosSalas
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "atendimentosSalas",
        e));

    s << i.atendimentosSalas ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ItemAtendimentoSala& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // salaId
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "salaId",
        e));

    s << i.salaId ();
  }

  // atendimentosDiasSemana
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "atendimentosDiasSemana",
        e));

    s << i.atendimentosDiasSemana ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ItemAtendimentoDiaSemana& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // diaSemana
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "diaSemana",
        e));

    s << i.diaSemana ();
  }

  // atendimentosTatico
  //
  if (i.atendimentosTatico ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "atendimentosTatico",
        e));

    s << *i.atendimentosTatico ();
  }

  // atendimentosTurnos
  //
  if (i.atendimentosTurnos ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "atendimentosTurnos",
        e));

    s << *i.atendimentosTurnos ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ItemAtendimentoTurno& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // turnoId
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "turnoId",
        e));

    s << i.turnoId ();
  }

  // atendimentosHorariosAula
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "atendimentosHorariosAula",
        e));

    s << i.atendimentosHorariosAula ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ItemAtendimentoHorarioAula& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // horarioAulaId
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "horarioAulaId",
        e));

    s << i.horarioAulaId ();
  }

  // professorId
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "professorId",
        e));

    s << i.professorId ();
  }

  // creditoTeorico
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "creditoTeorico",
        e));

    s << i.creditoTeorico ();
  }

  // atendimentosOfertas
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "atendimentosOfertas",
        e));

    s << i.atendimentosOfertas ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ItemAtendimentoOferta& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // ofertaCursoCampiId
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "ofertaCursoCampiId",
        e));

    s << i.ofertaCursoCampiId ();
  }

  // disciplinaId
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "disciplinaId",
        e));

    s << i.disciplinaId ();
  }

  // quantidade
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "quantidade",
        e));

    s << i.quantidade ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ItemAtendimentoTatico& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // atendimentoOferta
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "atendimentoOferta",
        e));

    s << i.atendimentoOferta ();
  }

  // qtdeCreditosTeoricos
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "qtdeCreditosTeoricos",
        e));

    s << i.qtdeCreditosTeoricos ();
  }

  // qtdeCreditosPraticos
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "qtdeCreditosPraticos",
        e));

    s << i.qtdeCreditosPraticos ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const GrupoAtendimentoCampus& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // AtendimentoCampus
  //
  for (GrupoAtendimentoCampus::AtendimentoCampus_const_iterator
       b (i.AtendimentoCampus ().begin ()), n (i.AtendimentoCampus ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "AtendimentoCampus",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const GrupoAtendimentoUnidade& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // AtendimentoUnidade
  //
  for (GrupoAtendimentoUnidade::AtendimentoUnidade_const_iterator
       b (i.AtendimentoUnidade ().begin ()), n (i.AtendimentoUnidade ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "AtendimentoUnidade",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const GrupoAtendimentoSala& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // AtendimentoSala
  //
  for (GrupoAtendimentoSala::AtendimentoSala_const_iterator
       b (i.AtendimentoSala ().begin ()), n (i.AtendimentoSala ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "AtendimentoSala",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const GrupoAtendimentoDiaSemana& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // AtendimentoDiaSemana
  //
  for (GrupoAtendimentoDiaSemana::AtendimentoDiaSemana_const_iterator
       b (i.AtendimentoDiaSemana ().begin ()), n (i.AtendimentoDiaSemana ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "AtendimentoDiaSemana",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const GrupoAtendimentoTurno& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // AtendimentoTurno
  //
  for (GrupoAtendimentoTurno::AtendimentoTurno_const_iterator
       b (i.AtendimentoTurno ().begin ()), n (i.AtendimentoTurno ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "AtendimentoTurno",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const GrupoAtendimentoHorarioAula& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // AtendimentoHorarioAula
  //
  for (GrupoAtendimentoHorarioAula::AtendimentoHorarioAula_const_iterator
       b (i.AtendimentoHorarioAula ().begin ()), n (i.AtendimentoHorarioAula ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "AtendimentoHorarioAula",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const GrupoAtendimentoOferta& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // AtendimentoOferta
  //
  for (GrupoAtendimentoOferta::AtendimentoOferta_const_iterator
       b (i.AtendimentoOferta ().begin ()), n (i.AtendimentoOferta ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "AtendimentoOferta",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const GrupoAtendimentoTatico& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // AtendimentoTatico
  //
  for (GrupoAtendimentoTatico::AtendimentoTatico_const_iterator
       b (i.AtendimentoTatico ().begin ()), n (i.AtendimentoTatico ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "AtendimentoTatico",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const TriedaOutput& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // atendimentos1
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "atendimentos1",
        e));

    s << i.atendimentos1 ();
  }

  // atendimentos2
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "atendimentos2",
        e));

    s << i.atendimentos2 ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

