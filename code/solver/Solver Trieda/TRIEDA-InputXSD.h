// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef TRIEDA_INPUT_XSD_H
#define TRIEDA_INPUT_XSD_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class ItemCalendario;
class ItemAlunoDemanda;
class ItemTurno;
class ItemHorarioAula;
class ItemTipoSala;
class ItemTipoContrato;
class ItemTipoTitulacao;
class ItemAreaTitulacao;
class ItemTipoDisciplina;
class ItemNivelDificuldade;
class ItemTipoCurso;
class ItemDivisaoCreditos;
class ItemCampus;
class ItemUnidade;
class ItemHorario;
class ItemSala;
class ItemCreditoDisponivel;
class ItemProfessor;
class ItemProfessorDisciplina;
class ItemDeslocamento;
class ItemDisciplina;
class ItemCurso;
class ItemPercentualMinimo;
class ItemCurriculo;
class ItemDisciplinaPeriodo;
class ItemOfertaCurso;
class ItemDemanda;
class ItemFixacao;
class ItemParametrosPlanejamento;
class ItemNivelDificuldadeHorario;
class GrupoCalendario;
class GrupoAlunoDemanda;
class GrupoTurno;
class GrupoHorarioAula;
class GrupoDiaSemana;
class GrupoTipoSala;
class GrupoTipoContrato;
class GrupoTipoTitulacao;
class GrupoAreaTitulacao;
class GrupoTipoDisciplina;
class GrupoNivelDificuldade;
class GrupoTipoCurso;
class GrupoDivisaoCreditos;
class GrupoCampus;
class GrupoUnidade;
class GrupoHorario;
class GrupoSala;
class GrupoCreditoDisponivel;
class GrupoProfessor;
class GrupoProfessorDisciplina;
class GrupoDeslocamento;
class GrupoDisciplina;
class GrupoCurso;
class GrupoCurriculo;
class GrupoDisciplinaPeriodo;
class GrupoOfertaCurso;
class GrupoDemanda;
class GrupoFixacao;
class GrupoNivelDificuldadeHorario;
class GrupoIdentificador;
class GrupoGrupo;
class ItemAtendimentoCampusSolucao;
class ItemAtendimentoUnidadeSolucao;
class ItemAtendimentoSalaSolucao;
class ItemAtendimentoDiaSemanaSolucao;
class ItemAtendimentoOfertaSolucao;
class ItemAtendimentoTaticoSolucao;
class GrupoAtendimentoCampusSolucao;
class GrupoAtendimentoUnidadeSolucao;
class GrupoAtendimentoSalaSolucao;
class GrupoAtendimentoDiaSemanaSolucao;
class GrupoAtendimentoTaticoSolucao;
class TriedaInput;
class cargaHorariaSemanalAluno;
class cargaHorariaSemanalProfessor;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class ItemCalendario: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // codigo
  // 
  typedef ::xml_schema::string codigo_type;
  typedef ::xsd::cxx::tree::traits< codigo_type, char > codigo_traits;

  const codigo_type&
  codigo () const;

  codigo_type&
  codigo ();

  void
  codigo (const codigo_type& x);

  void
  codigo (::std::auto_ptr< codigo_type > p);

  // tempoAula
  // 
  typedef ::xml_schema::int_ tempoAula_type;
  typedef ::xsd::cxx::tree::traits< tempoAula_type, char > tempoAula_traits;

  const tempoAula_type&
  tempoAula () const;

  tempoAula_type&
  tempoAula ();

  void
  tempoAula (const tempoAula_type& x);

  // turnos
  // 
  typedef ::GrupoTurno turnos_type;
  typedef ::xsd::cxx::tree::traits< turnos_type, char > turnos_traits;

  const turnos_type&
  turnos () const;

  turnos_type&
  turnos ();

  void
  turnos (const turnos_type& x);

  void
  turnos (::std::auto_ptr< turnos_type > p);

  // Constructors.
  //
  ItemCalendario (const id_type&,
                  const codigo_type&,
                  const tempoAula_type&,
                  const turnos_type&);

  ItemCalendario (const id_type&,
                  const codigo_type&,
                  const tempoAula_type&,
                  ::std::auto_ptr< turnos_type >&);

  ItemCalendario (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  ItemCalendario (const ItemCalendario& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual ItemCalendario*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemCalendario ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< codigo_type > codigo_;
  ::xsd::cxx::tree::one< tempoAula_type > tempoAula_;
  ::xsd::cxx::tree::one< turnos_type > turnos_;
};

class ItemAlunoDemanda: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // alunoId
  // 
  typedef ::xml_schema::int_ alunoId_type;
  typedef ::xsd::cxx::tree::traits< alunoId_type, char > alunoId_traits;

  const alunoId_type&
  alunoId () const;

  alunoId_type&
  alunoId ();

  void
  alunoId (const alunoId_type& x);

  // nomeAluno
  // 
  typedef ::xml_schema::string nomeAluno_type;
  typedef ::xsd::cxx::tree::traits< nomeAluno_type, char > nomeAluno_traits;

  const nomeAluno_type&
  nomeAluno () const;

  nomeAluno_type&
  nomeAluno ();

  void
  nomeAluno (const nomeAluno_type& x);

  void
  nomeAluno (::std::auto_ptr< nomeAluno_type > p);

  // demandaId
  // 
  typedef ::xml_schema::int_ demandaId_type;
  typedef ::xsd::cxx::tree::traits< demandaId_type, char > demandaId_traits;

  const demandaId_type&
  demandaId () const;

  demandaId_type&
  demandaId ();

  void
  demandaId (const demandaId_type& x);

  // Constructors.
  //
  ItemAlunoDemanda (const id_type&,
                    const alunoId_type&,
                    const nomeAluno_type&,
                    const demandaId_type&);

  ItemAlunoDemanda (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  ItemAlunoDemanda (const ItemAlunoDemanda& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual ItemAlunoDemanda*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemAlunoDemanda ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< alunoId_type > alunoId_;
  ::xsd::cxx::tree::one< nomeAluno_type > nomeAluno_;
  ::xsd::cxx::tree::one< demandaId_type > demandaId_;
};

class ItemTurno: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // nome
  // 
  typedef ::xml_schema::string nome_type;
  typedef ::xsd::cxx::tree::traits< nome_type, char > nome_traits;

  const nome_type&
  nome () const;

  nome_type&
  nome ();

  void
  nome (const nome_type& x);

  void
  nome (::std::auto_ptr< nome_type > p);

  // HorariosAula
  // 
  typedef ::GrupoHorarioAula HorariosAula_type;
  typedef ::xsd::cxx::tree::traits< HorariosAula_type, char > HorariosAula_traits;

  const HorariosAula_type&
  HorariosAula () const;

  HorariosAula_type&
  HorariosAula ();

  void
  HorariosAula (const HorariosAula_type& x);

  void
  HorariosAula (::std::auto_ptr< HorariosAula_type > p);

  // Constructors.
  //
  ItemTurno (const id_type&,
             const nome_type&,
             const HorariosAula_type&);

  ItemTurno (const id_type&,
             const nome_type&,
             ::std::auto_ptr< HorariosAula_type >&);

  ItemTurno (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  ItemTurno (const ItemTurno& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual ItemTurno*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemTurno ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< nome_type > nome_;
  ::xsd::cxx::tree::one< HorariosAula_type > HorariosAula_;
};

class ItemHorarioAula: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // inicio
  // 
  typedef ::xml_schema::time inicio_type;
  typedef ::xsd::cxx::tree::traits< inicio_type, char > inicio_traits;

  const inicio_type&
  inicio () const;

  inicio_type&
  inicio ();

  void
  inicio (const inicio_type& x);

  void
  inicio (::std::auto_ptr< inicio_type > p);

  // diasSemana
  // 
  typedef ::GrupoDiaSemana diasSemana_type;
  typedef ::xsd::cxx::tree::traits< diasSemana_type, char > diasSemana_traits;

  const diasSemana_type&
  diasSemana () const;

  diasSemana_type&
  diasSemana ();

  void
  diasSemana (const diasSemana_type& x);

  void
  diasSemana (::std::auto_ptr< diasSemana_type > p);

  // Constructors.
  //
  ItemHorarioAula (const id_type&,
                   const inicio_type&,
                   const diasSemana_type&);

  ItemHorarioAula (const id_type&,
                   const inicio_type&,
                   ::std::auto_ptr< diasSemana_type >&);

  ItemHorarioAula (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  ItemHorarioAula (const ItemHorarioAula& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual ItemHorarioAula*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemHorarioAula ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< inicio_type > inicio_;
  ::xsd::cxx::tree::one< diasSemana_type > diasSemana_;
};

class ItemTipoSala: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // nome
  // 
  typedef ::xml_schema::string nome_type;
  typedef ::xsd::cxx::tree::traits< nome_type, char > nome_traits;

  const nome_type&
  nome () const;

  nome_type&
  nome ();

  void
  nome (const nome_type& x);

  void
  nome (::std::auto_ptr< nome_type > p);

  // Constructors.
  //
  ItemTipoSala (const id_type&,
                const nome_type&);

  ItemTipoSala (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  ItemTipoSala (const ItemTipoSala& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual ItemTipoSala*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemTipoSala ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< nome_type > nome_;
};

class ItemTipoContrato: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // nome
  // 
  typedef ::xml_schema::string nome_type;
  typedef ::xsd::cxx::tree::traits< nome_type, char > nome_traits;

  const nome_type&
  nome () const;

  nome_type&
  nome ();

  void
  nome (const nome_type& x);

  void
  nome (::std::auto_ptr< nome_type > p);

  // Constructors.
  //
  ItemTipoContrato (const id_type&,
                    const nome_type&);

  ItemTipoContrato (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  ItemTipoContrato (const ItemTipoContrato& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual ItemTipoContrato*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemTipoContrato ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< nome_type > nome_;
};

class ItemTipoTitulacao: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // nome
  // 
  typedef ::xml_schema::string nome_type;
  typedef ::xsd::cxx::tree::traits< nome_type, char > nome_traits;

  const nome_type&
  nome () const;

  nome_type&
  nome ();

  void
  nome (const nome_type& x);

  void
  nome (::std::auto_ptr< nome_type > p);

  // Constructors.
  //
  ItemTipoTitulacao (const id_type&,
                     const nome_type&);

  ItemTipoTitulacao (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  ItemTipoTitulacao (const ItemTipoTitulacao& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual ItemTipoTitulacao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemTipoTitulacao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< nome_type > nome_;
};

class ItemAreaTitulacao: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // nome
  // 
  typedef ::xml_schema::string nome_type;
  typedef ::xsd::cxx::tree::traits< nome_type, char > nome_traits;

  const nome_type&
  nome () const;

  nome_type&
  nome ();

  void
  nome (const nome_type& x);

  void
  nome (::std::auto_ptr< nome_type > p);

  // Constructors.
  //
  ItemAreaTitulacao (const id_type&,
                     const nome_type&);

  ItemAreaTitulacao (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  ItemAreaTitulacao (const ItemAreaTitulacao& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual ItemAreaTitulacao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemAreaTitulacao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< nome_type > nome_;
};

class ItemTipoDisciplina: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // nome
  // 
  typedef ::xml_schema::string nome_type;
  typedef ::xsd::cxx::tree::traits< nome_type, char > nome_traits;

  const nome_type&
  nome () const;

  nome_type&
  nome ();

  void
  nome (const nome_type& x);

  void
  nome (::std::auto_ptr< nome_type > p);

  // Constructors.
  //
  ItemTipoDisciplina (const id_type&,
                      const nome_type&);

  ItemTipoDisciplina (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  ItemTipoDisciplina (const ItemTipoDisciplina& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual ItemTipoDisciplina*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemTipoDisciplina ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< nome_type > nome_;
};

class ItemNivelDificuldade: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // nome
  // 
  typedef ::xml_schema::string nome_type;
  typedef ::xsd::cxx::tree::traits< nome_type, char > nome_traits;

  const nome_type&
  nome () const;

  nome_type&
  nome ();

  void
  nome (const nome_type& x);

  void
  nome (::std::auto_ptr< nome_type > p);

  // Constructors.
  //
  ItemNivelDificuldade (const id_type&,
                        const nome_type&);

  ItemNivelDificuldade (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  ItemNivelDificuldade (const ItemNivelDificuldade& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual ItemNivelDificuldade*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemNivelDificuldade ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< nome_type > nome_;
};

class ItemTipoCurso: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // nome
  // 
  typedef ::xml_schema::string nome_type;
  typedef ::xsd::cxx::tree::traits< nome_type, char > nome_traits;

  const nome_type&
  nome () const;

  nome_type&
  nome ();

  void
  nome (const nome_type& x);

  void
  nome (::std::auto_ptr< nome_type > p);

  // Constructors.
  //
  ItemTipoCurso (const id_type&,
                 const nome_type&);

  ItemTipoCurso (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ItemTipoCurso (const ItemTipoCurso& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual ItemTipoCurso*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemTipoCurso ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< nome_type > nome_;
};

class ItemDivisaoCreditos: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // creditos
  // 
  typedef ::xml_schema::int_ creditos_type;
  typedef ::xsd::cxx::tree::traits< creditos_type, char > creditos_traits;

  const creditos_type&
  creditos () const;

  creditos_type&
  creditos ();

  void
  creditos (const creditos_type& x);

  // dia1
  // 
  typedef ::xml_schema::int_ dia1_type;
  typedef ::xsd::cxx::tree::traits< dia1_type, char > dia1_traits;

  const dia1_type&
  dia1 () const;

  dia1_type&
  dia1 ();

  void
  dia1 (const dia1_type& x);

  // dia2
  // 
  typedef ::xml_schema::int_ dia2_type;
  typedef ::xsd::cxx::tree::traits< dia2_type, char > dia2_traits;

  const dia2_type&
  dia2 () const;

  dia2_type&
  dia2 ();

  void
  dia2 (const dia2_type& x);

  // dia3
  // 
  typedef ::xml_schema::int_ dia3_type;
  typedef ::xsd::cxx::tree::traits< dia3_type, char > dia3_traits;

  const dia3_type&
  dia3 () const;

  dia3_type&
  dia3 ();

  void
  dia3 (const dia3_type& x);

  // dia4
  // 
  typedef ::xml_schema::int_ dia4_type;
  typedef ::xsd::cxx::tree::traits< dia4_type, char > dia4_traits;

  const dia4_type&
  dia4 () const;

  dia4_type&
  dia4 ();

  void
  dia4 (const dia4_type& x);

  // dia5
  // 
  typedef ::xml_schema::int_ dia5_type;
  typedef ::xsd::cxx::tree::traits< dia5_type, char > dia5_traits;

  const dia5_type&
  dia5 () const;

  dia5_type&
  dia5 ();

  void
  dia5 (const dia5_type& x);

  // dia6
  // 
  typedef ::xml_schema::int_ dia6_type;
  typedef ::xsd::cxx::tree::traits< dia6_type, char > dia6_traits;

  const dia6_type&
  dia6 () const;

  dia6_type&
  dia6 ();

  void
  dia6 (const dia6_type& x);

  // dia7
  // 
  typedef ::xml_schema::int_ dia7_type;
  typedef ::xsd::cxx::tree::traits< dia7_type, char > dia7_traits;

  const dia7_type&
  dia7 () const;

  dia7_type&
  dia7 ();

  void
  dia7 (const dia7_type& x);

  // Constructors.
  //
  ItemDivisaoCreditos (const id_type&,
                       const creditos_type&,
                       const dia1_type&,
                       const dia2_type&,
                       const dia3_type&,
                       const dia4_type&,
                       const dia5_type&,
                       const dia6_type&,
                       const dia7_type&);

  ItemDivisaoCreditos (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  ItemDivisaoCreditos (const ItemDivisaoCreditos& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual ItemDivisaoCreditos*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemDivisaoCreditos ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< creditos_type > creditos_;
  ::xsd::cxx::tree::one< dia1_type > dia1_;
  ::xsd::cxx::tree::one< dia2_type > dia2_;
  ::xsd::cxx::tree::one< dia3_type > dia3_;
  ::xsd::cxx::tree::one< dia4_type > dia4_;
  ::xsd::cxx::tree::one< dia5_type > dia5_;
  ::xsd::cxx::tree::one< dia6_type > dia6_;
  ::xsd::cxx::tree::one< dia7_type > dia7_;
};

class ItemCampus: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // codigo
  // 
  typedef ::xml_schema::string codigo_type;
  typedef ::xsd::cxx::tree::traits< codigo_type, char > codigo_traits;

  const codigo_type&
  codigo () const;

  codigo_type&
  codigo ();

  void
  codigo (const codigo_type& x);

  void
  codigo (::std::auto_ptr< codigo_type > p);

  // nome
  // 
  typedef ::xml_schema::string nome_type;
  typedef ::xsd::cxx::tree::traits< nome_type, char > nome_traits;

  const nome_type&
  nome () const;

  nome_type&
  nome ();

  void
  nome (const nome_type& x);

  void
  nome (::std::auto_ptr< nome_type > p);

  // unidades
  // 
  typedef ::GrupoUnidade unidades_type;
  typedef ::xsd::cxx::tree::traits< unidades_type, char > unidades_traits;

  const unidades_type&
  unidades () const;

  unidades_type&
  unidades ();

  void
  unidades (const unidades_type& x);

  void
  unidades (::std::auto_ptr< unidades_type > p);

  // professores
  // 
  typedef ::GrupoProfessor professores_type;
  typedef ::xsd::cxx::tree::traits< professores_type, char > professores_traits;

  const professores_type&
  professores () const;

  professores_type&
  professores ();

  void
  professores (const professores_type& x);

  void
  professores (::std::auto_ptr< professores_type > p);

  // horariosDisponiveis
  // 
  typedef ::GrupoHorario horariosDisponiveis_type;
  typedef ::xsd::cxx::tree::traits< horariosDisponiveis_type, char > horariosDisponiveis_traits;

  const horariosDisponiveis_type&
  horariosDisponiveis () const;

  horariosDisponiveis_type&
  horariosDisponiveis ();

  void
  horariosDisponiveis (const horariosDisponiveis_type& x);

  void
  horariosDisponiveis (::std::auto_ptr< horariosDisponiveis_type > p);

  // custo
  // 
  typedef ::xml_schema::double_ custo_type;
  typedef ::xsd::cxx::tree::traits< custo_type, char, ::xsd::cxx::tree::schema_type::double_ > custo_traits;

  const custo_type&
  custo () const;

  custo_type&
  custo ();

  void
  custo (const custo_type& x);

  // Constructors.
  //
  ItemCampus (const id_type&,
              const codigo_type&,
              const nome_type&,
              const unidades_type&,
              const professores_type&,
              const horariosDisponiveis_type&,
              const custo_type&);

  ItemCampus (const id_type&,
              const codigo_type&,
              const nome_type&,
              ::std::auto_ptr< unidades_type >&,
              ::std::auto_ptr< professores_type >&,
              ::std::auto_ptr< horariosDisponiveis_type >&,
              const custo_type&);

  ItemCampus (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  ItemCampus (const ItemCampus& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual ItemCampus*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemCampus ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< codigo_type > codigo_;
  ::xsd::cxx::tree::one< nome_type > nome_;
  ::xsd::cxx::tree::one< unidades_type > unidades_;
  ::xsd::cxx::tree::one< professores_type > professores_;
  ::xsd::cxx::tree::one< horariosDisponiveis_type > horariosDisponiveis_;
  ::xsd::cxx::tree::one< custo_type > custo_;
};

class ItemUnidade: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // codigo
  // 
  typedef ::xml_schema::string codigo_type;
  typedef ::xsd::cxx::tree::traits< codigo_type, char > codigo_traits;

  const codigo_type&
  codigo () const;

  codigo_type&
  codigo ();

  void
  codigo (const codigo_type& x);

  void
  codigo (::std::auto_ptr< codigo_type > p);

  // nome
  // 
  typedef ::xml_schema::string nome_type;
  typedef ::xsd::cxx::tree::traits< nome_type, char > nome_traits;

  const nome_type&
  nome () const;

  nome_type&
  nome ();

  void
  nome (const nome_type& x);

  void
  nome (::std::auto_ptr< nome_type > p);

  // horariosDisponiveis
  // 
  typedef ::GrupoHorario horariosDisponiveis_type;
  typedef ::xsd::cxx::tree::traits< horariosDisponiveis_type, char > horariosDisponiveis_traits;

  const horariosDisponiveis_type&
  horariosDisponiveis () const;

  horariosDisponiveis_type&
  horariosDisponiveis ();

  void
  horariosDisponiveis (const horariosDisponiveis_type& x);

  void
  horariosDisponiveis (::std::auto_ptr< horariosDisponiveis_type > p);

  // salas
  // 
  typedef ::GrupoSala salas_type;
  typedef ::xsd::cxx::tree::traits< salas_type, char > salas_traits;

  const salas_type&
  salas () const;

  salas_type&
  salas ();

  void
  salas (const salas_type& x);

  void
  salas (::std::auto_ptr< salas_type > p);

  // Constructors.
  //
  ItemUnidade (const id_type&,
               const codigo_type&,
               const nome_type&,
               const horariosDisponiveis_type&,
               const salas_type&);

  ItemUnidade (const id_type&,
               const codigo_type&,
               const nome_type&,
               ::std::auto_ptr< horariosDisponiveis_type >&,
               ::std::auto_ptr< salas_type >&);

  ItemUnidade (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  ItemUnidade (const ItemUnidade& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual ItemUnidade*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemUnidade ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< codigo_type > codigo_;
  ::xsd::cxx::tree::one< nome_type > nome_;
  ::xsd::cxx::tree::one< horariosDisponiveis_type > horariosDisponiveis_;
  ::xsd::cxx::tree::one< salas_type > salas_;
};

class ItemHorario: public ::xml_schema::type
{
  public:
  // turnoId
  // 
  typedef ::xml_schema::int_ turnoId_type;
  typedef ::xsd::cxx::tree::traits< turnoId_type, char > turnoId_traits;

  const turnoId_type&
  turnoId () const;

  turnoId_type&
  turnoId ();

  void
  turnoId (const turnoId_type& x);

  // horarioAulaId
  // 
  typedef ::xml_schema::int_ horarioAulaId_type;
  typedef ::xsd::cxx::tree::traits< horarioAulaId_type, char > horarioAulaId_traits;

  const horarioAulaId_type&
  horarioAulaId () const;

  horarioAulaId_type&
  horarioAulaId ();

  void
  horarioAulaId (const horarioAulaId_type& x);

  // diasSemana
  // 
  typedef ::GrupoDiaSemana diasSemana_type;
  typedef ::xsd::cxx::tree::traits< diasSemana_type, char > diasSemana_traits;

  const diasSemana_type&
  diasSemana () const;

  diasSemana_type&
  diasSemana ();

  void
  diasSemana (const diasSemana_type& x);

  void
  diasSemana (::std::auto_ptr< diasSemana_type > p);

  // Constructors.
  //
  ItemHorario (const turnoId_type&,
               const horarioAulaId_type&,
               const diasSemana_type&);

  ItemHorario (const turnoId_type&,
               const horarioAulaId_type&,
               ::std::auto_ptr< diasSemana_type >&);

  ItemHorario (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  ItemHorario (const ItemHorario& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual ItemHorario*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemHorario ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< turnoId_type > turnoId_;
  ::xsd::cxx::tree::one< horarioAulaId_type > horarioAulaId_;
  ::xsd::cxx::tree::one< diasSemana_type > diasSemana_;
};

class ItemSala: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // codigo
  // 
  typedef ::xml_schema::string codigo_type;
  typedef ::xsd::cxx::tree::traits< codigo_type, char > codigo_traits;

  const codigo_type&
  codigo () const;

  codigo_type&
  codigo ();

  void
  codigo (const codigo_type& x);

  void
  codigo (::std::auto_ptr< codigo_type > p);

  // andar
  // 
  typedef ::xml_schema::string andar_type;
  typedef ::xsd::cxx::tree::traits< andar_type, char > andar_traits;

  const andar_type&
  andar () const;

  andar_type&
  andar ();

  void
  andar (const andar_type& x);

  void
  andar (::std::auto_ptr< andar_type > p);

  // numero
  // 
  typedef ::xml_schema::string numero_type;
  typedef ::xsd::cxx::tree::traits< numero_type, char > numero_traits;

  const numero_type&
  numero () const;

  numero_type&
  numero ();

  void
  numero (const numero_type& x);

  void
  numero (::std::auto_ptr< numero_type > p);

  // tipoSalaId
  // 
  typedef ::xml_schema::int_ tipoSalaId_type;
  typedef ::xsd::cxx::tree::traits< tipoSalaId_type, char > tipoSalaId_traits;

  const tipoSalaId_type&
  tipoSalaId () const;

  tipoSalaId_type&
  tipoSalaId ();

  void
  tipoSalaId (const tipoSalaId_type& x);

  // capacidade
  // 
  typedef ::xml_schema::int_ capacidade_type;
  typedef ::xsd::cxx::tree::traits< capacidade_type, char > capacidade_traits;

  const capacidade_type&
  capacidade () const;

  capacidade_type&
  capacidade ();

  void
  capacidade (const capacidade_type& x);

  // horariosDisponiveis
  // 
  typedef ::GrupoHorario horariosDisponiveis_type;
  typedef ::xsd::cxx::tree::optional< horariosDisponiveis_type > horariosDisponiveis_optional;
  typedef ::xsd::cxx::tree::traits< horariosDisponiveis_type, char > horariosDisponiveis_traits;

  const horariosDisponiveis_optional&
  horariosDisponiveis () const;

  horariosDisponiveis_optional&
  horariosDisponiveis ();

  void
  horariosDisponiveis (const horariosDisponiveis_type& x);

  void
  horariosDisponiveis (const horariosDisponiveis_optional& x);

  void
  horariosDisponiveis (::std::auto_ptr< horariosDisponiveis_type > p);

  // creditosDisponiveis
  // 
  typedef ::GrupoCreditoDisponivel creditosDisponiveis_type;
  typedef ::xsd::cxx::tree::optional< creditosDisponiveis_type > creditosDisponiveis_optional;
  typedef ::xsd::cxx::tree::traits< creditosDisponiveis_type, char > creditosDisponiveis_traits;

  const creditosDisponiveis_optional&
  creditosDisponiveis () const;

  creditosDisponiveis_optional&
  creditosDisponiveis ();

  void
  creditosDisponiveis (const creditosDisponiveis_type& x);

  void
  creditosDisponiveis (const creditosDisponiveis_optional& x);

  void
  creditosDisponiveis (::std::auto_ptr< creditosDisponiveis_type > p);

  // disciplinasAssociadas
  // 
  typedef ::GrupoIdentificador disciplinasAssociadas_type;
  typedef ::xsd::cxx::tree::traits< disciplinasAssociadas_type, char > disciplinasAssociadas_traits;

  const disciplinasAssociadas_type&
  disciplinasAssociadas () const;

  disciplinasAssociadas_type&
  disciplinasAssociadas ();

  void
  disciplinasAssociadas (const disciplinasAssociadas_type& x);

  void
  disciplinasAssociadas (::std::auto_ptr< disciplinasAssociadas_type > p);

  // Constructors.
  //
  ItemSala (const id_type&,
            const codigo_type&,
            const andar_type&,
            const numero_type&,
            const tipoSalaId_type&,
            const capacidade_type&,
            const disciplinasAssociadas_type&);

  ItemSala (const id_type&,
            const codigo_type&,
            const andar_type&,
            const numero_type&,
            const tipoSalaId_type&,
            const capacidade_type&,
            ::std::auto_ptr< disciplinasAssociadas_type >&);

  ItemSala (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  ItemSala (const ItemSala& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual ItemSala*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemSala ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< codigo_type > codigo_;
  ::xsd::cxx::tree::one< andar_type > andar_;
  ::xsd::cxx::tree::one< numero_type > numero_;
  ::xsd::cxx::tree::one< tipoSalaId_type > tipoSalaId_;
  ::xsd::cxx::tree::one< capacidade_type > capacidade_;
  horariosDisponiveis_optional horariosDisponiveis_;
  creditosDisponiveis_optional creditosDisponiveis_;
  ::xsd::cxx::tree::one< disciplinasAssociadas_type > disciplinasAssociadas_;
};

class ItemCreditoDisponivel: public ::xml_schema::type
{
  public:
  // turnoId
  // 
  typedef ::xml_schema::int_ turnoId_type;
  typedef ::xsd::cxx::tree::traits< turnoId_type, char > turnoId_traits;

  const turnoId_type&
  turnoId () const;

  turnoId_type&
  turnoId ();

  void
  turnoId (const turnoId_type& x);

  // diaSemana
  // 
  typedef ::xml_schema::int_ diaSemana_type;
  typedef ::xsd::cxx::tree::traits< diaSemana_type, char > diaSemana_traits;

  const diaSemana_type&
  diaSemana () const;

  diaSemana_type&
  diaSemana ();

  void
  diaSemana (const diaSemana_type& x);

  // maxCreditos
  // 
  typedef ::xml_schema::int_ maxCreditos_type;
  typedef ::xsd::cxx::tree::traits< maxCreditos_type, char > maxCreditos_traits;

  const maxCreditos_type&
  maxCreditos () const;

  maxCreditos_type&
  maxCreditos ();

  void
  maxCreditos (const maxCreditos_type& x);

  // Constructors.
  //
  ItemCreditoDisponivel (const turnoId_type&,
                         const diaSemana_type&,
                         const maxCreditos_type&);

  ItemCreditoDisponivel (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  ItemCreditoDisponivel (const ItemCreditoDisponivel& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual ItemCreditoDisponivel*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemCreditoDisponivel ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< turnoId_type > turnoId_;
  ::xsd::cxx::tree::one< diaSemana_type > diaSemana_;
  ::xsd::cxx::tree::one< maxCreditos_type > maxCreditos_;
};

class ItemProfessor: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // cpf
  // 
  typedef ::xml_schema::string cpf_type;
  typedef ::xsd::cxx::tree::traits< cpf_type, char > cpf_traits;

  const cpf_type&
  cpf () const;

  cpf_type&
  cpf ();

  void
  cpf (const cpf_type& x);

  void
  cpf (::std::auto_ptr< cpf_type > p);

  // nome
  // 
  typedef ::xml_schema::string nome_type;
  typedef ::xsd::cxx::tree::traits< nome_type, char > nome_traits;

  const nome_type&
  nome () const;

  nome_type&
  nome ();

  void
  nome (const nome_type& x);

  void
  nome (::std::auto_ptr< nome_type > p);

  // tipoContratoId
  // 
  typedef ::xml_schema::int_ tipoContratoId_type;
  typedef ::xsd::cxx::tree::traits< tipoContratoId_type, char > tipoContratoId_traits;

  const tipoContratoId_type&
  tipoContratoId () const;

  tipoContratoId_type&
  tipoContratoId ();

  void
  tipoContratoId (const tipoContratoId_type& x);

  // chMin
  // 
  typedef ::xml_schema::int_ chMin_type;
  typedef ::xsd::cxx::tree::traits< chMin_type, char > chMin_traits;

  const chMin_type&
  chMin () const;

  chMin_type&
  chMin ();

  void
  chMin (const chMin_type& x);

  // chMax
  // 
  typedef ::xml_schema::int_ chMax_type;
  typedef ::xsd::cxx::tree::traits< chMax_type, char > chMax_traits;

  const chMax_type&
  chMax () const;

  chMax_type&
  chMax ();

  void
  chMax (const chMax_type& x);

  // titulacaoId
  // 
  typedef ::xml_schema::int_ titulacaoId_type;
  typedef ::xsd::cxx::tree::traits< titulacaoId_type, char > titulacaoId_traits;

  const titulacaoId_type&
  titulacaoId () const;

  titulacaoId_type&
  titulacaoId ();

  void
  titulacaoId (const titulacaoId_type& x);

  // areaTitulacaoId
  // 
  typedef ::xml_schema::int_ areaTitulacaoId_type;
  typedef ::xsd::cxx::tree::optional< areaTitulacaoId_type > areaTitulacaoId_optional;
  typedef ::xsd::cxx::tree::traits< areaTitulacaoId_type, char > areaTitulacaoId_traits;

  const areaTitulacaoId_optional&
  areaTitulacaoId () const;

  areaTitulacaoId_optional&
  areaTitulacaoId ();

  void
  areaTitulacaoId (const areaTitulacaoId_type& x);

  void
  areaTitulacaoId (const areaTitulacaoId_optional& x);

  // credAnterior
  // 
  typedef ::xml_schema::int_ credAnterior_type;
  typedef ::xsd::cxx::tree::traits< credAnterior_type, char > credAnterior_traits;

  const credAnterior_type&
  credAnterior () const;

  credAnterior_type&
  credAnterior ();

  void
  credAnterior (const credAnterior_type& x);

  // valorCred
  // 
  typedef ::xml_schema::double_ valorCred_type;
  typedef ::xsd::cxx::tree::traits< valorCred_type, char, ::xsd::cxx::tree::schema_type::double_ > valorCred_traits;

  const valorCred_type&
  valorCred () const;

  valorCred_type&
  valorCred ();

  void
  valorCred (const valorCred_type& x);

  // horariosDisponiveis
  // 
  typedef ::GrupoHorario horariosDisponiveis_type;
  typedef ::xsd::cxx::tree::traits< horariosDisponiveis_type, char > horariosDisponiveis_traits;

  const horariosDisponiveis_type&
  horariosDisponiveis () const;

  horariosDisponiveis_type&
  horariosDisponiveis ();

  void
  horariosDisponiveis (const horariosDisponiveis_type& x);

  void
  horariosDisponiveis (::std::auto_ptr< horariosDisponiveis_type > p);

  // disciplinas
  // 
  typedef ::GrupoProfessorDisciplina disciplinas_type;
  typedef ::xsd::cxx::tree::traits< disciplinas_type, char > disciplinas_traits;

  const disciplinas_type&
  disciplinas () const;

  disciplinas_type&
  disciplinas ();

  void
  disciplinas (const disciplinas_type& x);

  void
  disciplinas (::std::auto_ptr< disciplinas_type > p);

  // Constructors.
  //
  ItemProfessor (const id_type&,
                 const cpf_type&,
                 const nome_type&,
                 const tipoContratoId_type&,
                 const chMin_type&,
                 const chMax_type&,
                 const titulacaoId_type&,
                 const credAnterior_type&,
                 const valorCred_type&,
                 const horariosDisponiveis_type&,
                 const disciplinas_type&);

  ItemProfessor (const id_type&,
                 const cpf_type&,
                 const nome_type&,
                 const tipoContratoId_type&,
                 const chMin_type&,
                 const chMax_type&,
                 const titulacaoId_type&,
                 const credAnterior_type&,
                 const valorCred_type&,
                 ::std::auto_ptr< horariosDisponiveis_type >&,
                 ::std::auto_ptr< disciplinas_type >&);

  ItemProfessor (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ItemProfessor (const ItemProfessor& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual ItemProfessor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemProfessor ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< cpf_type > cpf_;
  ::xsd::cxx::tree::one< nome_type > nome_;
  ::xsd::cxx::tree::one< tipoContratoId_type > tipoContratoId_;
  ::xsd::cxx::tree::one< chMin_type > chMin_;
  ::xsd::cxx::tree::one< chMax_type > chMax_;
  ::xsd::cxx::tree::one< titulacaoId_type > titulacaoId_;
  areaTitulacaoId_optional areaTitulacaoId_;
  ::xsd::cxx::tree::one< credAnterior_type > credAnterior_;
  ::xsd::cxx::tree::one< valorCred_type > valorCred_;
  ::xsd::cxx::tree::one< horariosDisponiveis_type > horariosDisponiveis_;
  ::xsd::cxx::tree::one< disciplinas_type > disciplinas_;
};

class ItemProfessorDisciplina: public ::xml_schema::type
{
  public:
  // nota
  // 
  typedef ::xml_schema::int_ nota_type;
  typedef ::xsd::cxx::tree::traits< nota_type, char > nota_traits;

  const nota_type&
  nota () const;

  nota_type&
  nota ();

  void
  nota (const nota_type& x);

  // preferencia
  // 
  typedef ::xml_schema::int_ preferencia_type;
  typedef ::xsd::cxx::tree::traits< preferencia_type, char > preferencia_traits;

  const preferencia_type&
  preferencia () const;

  preferencia_type&
  preferencia ();

  void
  preferencia (const preferencia_type& x);

  // disciplinaId
  // 
  typedef ::xml_schema::int_ disciplinaId_type;
  typedef ::xsd::cxx::tree::traits< disciplinaId_type, char > disciplinaId_traits;

  const disciplinaId_type&
  disciplinaId () const;

  disciplinaId_type&
  disciplinaId ();

  void
  disciplinaId (const disciplinaId_type& x);

  // Constructors.
  //
  ItemProfessorDisciplina (const nota_type&,
                           const preferencia_type&,
                           const disciplinaId_type&);

  ItemProfessorDisciplina (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  ItemProfessorDisciplina (const ItemProfessorDisciplina& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual ItemProfessorDisciplina*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemProfessorDisciplina ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< nota_type > nota_;
  ::xsd::cxx::tree::one< preferencia_type > preferencia_;
  ::xsd::cxx::tree::one< disciplinaId_type > disciplinaId_;
};

class ItemDeslocamento: public ::xml_schema::type
{
  public:
  // origemId
  // 
  typedef ::xml_schema::int_ origemId_type;
  typedef ::xsd::cxx::tree::traits< origemId_type, char > origemId_traits;

  const origemId_type&
  origemId () const;

  origemId_type&
  origemId ();

  void
  origemId (const origemId_type& x);

  // destinoId
  // 
  typedef ::xml_schema::int_ destinoId_type;
  typedef ::xsd::cxx::tree::traits< destinoId_type, char > destinoId_traits;

  const destinoId_type&
  destinoId () const;

  destinoId_type&
  destinoId ();

  void
  destinoId (const destinoId_type& x);

  // tempo
  // 
  typedef ::xml_schema::int_ tempo_type;
  typedef ::xsd::cxx::tree::traits< tempo_type, char > tempo_traits;

  const tempo_type&
  tempo () const;

  tempo_type&
  tempo ();

  void
  tempo (const tempo_type& x);

  // custo
  // 
  typedef ::xml_schema::double_ custo_type;
  typedef ::xsd::cxx::tree::traits< custo_type, char, ::xsd::cxx::tree::schema_type::double_ > custo_traits;

  const custo_type&
  custo () const;

  custo_type&
  custo ();

  void
  custo (const custo_type& x);

  // Constructors.
  //
  ItemDeslocamento (const origemId_type&,
                    const destinoId_type&,
                    const tempo_type&,
                    const custo_type&);

  ItemDeslocamento (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  ItemDeslocamento (const ItemDeslocamento& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual ItemDeslocamento*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemDeslocamento ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< origemId_type > origemId_;
  ::xsd::cxx::tree::one< destinoId_type > destinoId_;
  ::xsd::cxx::tree::one< tempo_type > tempo_;
  ::xsd::cxx::tree::one< custo_type > custo_;
};

class ItemDisciplina: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // codigo
  // 
  typedef ::xml_schema::string codigo_type;
  typedef ::xsd::cxx::tree::traits< codigo_type, char > codigo_traits;

  const codigo_type&
  codigo () const;

  codigo_type&
  codigo ();

  void
  codigo (const codigo_type& x);

  void
  codigo (::std::auto_ptr< codigo_type > p);

  // nome
  // 
  typedef ::xml_schema::string nome_type;
  typedef ::xsd::cxx::tree::traits< nome_type, char > nome_traits;

  const nome_type&
  nome () const;

  nome_type&
  nome ();

  void
  nome (const nome_type& x);

  void
  nome (::std::auto_ptr< nome_type > p);

  // credTeoricos
  // 
  typedef ::xml_schema::int_ credTeoricos_type;
  typedef ::xsd::cxx::tree::traits< credTeoricos_type, char > credTeoricos_traits;

  const credTeoricos_type&
  credTeoricos () const;

  credTeoricos_type&
  credTeoricos ();

  void
  credTeoricos (const credTeoricos_type& x);

  // credPraticos
  // 
  typedef ::xml_schema::int_ credPraticos_type;
  typedef ::xsd::cxx::tree::traits< credPraticos_type, char > credPraticos_traits;

  const credPraticos_type&
  credPraticos () const;

  credPraticos_type&
  credPraticos ();

  void
  credPraticos (const credPraticos_type& x);

  // laboratorio
  // 
  typedef ::xml_schema::boolean laboratorio_type;
  typedef ::xsd::cxx::tree::traits< laboratorio_type, char > laboratorio_traits;

  const laboratorio_type&
  laboratorio () const;

  laboratorio_type&
  laboratorio ();

  void
  laboratorio (const laboratorio_type& x);

  // maxAlunosTeorico
  // 
  typedef ::xml_schema::int_ maxAlunosTeorico_type;
  typedef ::xsd::cxx::tree::optional< maxAlunosTeorico_type > maxAlunosTeorico_optional;
  typedef ::xsd::cxx::tree::traits< maxAlunosTeorico_type, char > maxAlunosTeorico_traits;

  const maxAlunosTeorico_optional&
  maxAlunosTeorico () const;

  maxAlunosTeorico_optional&
  maxAlunosTeorico ();

  void
  maxAlunosTeorico (const maxAlunosTeorico_type& x);

  void
  maxAlunosTeorico (const maxAlunosTeorico_optional& x);

  // maxAlunosPratico
  // 
  typedef ::xml_schema::int_ maxAlunosPratico_type;
  typedef ::xsd::cxx::tree::optional< maxAlunosPratico_type > maxAlunosPratico_optional;
  typedef ::xsd::cxx::tree::traits< maxAlunosPratico_type, char > maxAlunosPratico_traits;

  const maxAlunosPratico_optional&
  maxAlunosPratico () const;

  maxAlunosPratico_optional&
  maxAlunosPratico ();

  void
  maxAlunosPratico (const maxAlunosPratico_type& x);

  void
  maxAlunosPratico (const maxAlunosPratico_optional& x);

  // tipoDisciplinaId
  // 
  typedef ::xml_schema::int_ tipoDisciplinaId_type;
  typedef ::xsd::cxx::tree::traits< tipoDisciplinaId_type, char > tipoDisciplinaId_traits;

  const tipoDisciplinaId_type&
  tipoDisciplinaId () const;

  tipoDisciplinaId_type&
  tipoDisciplinaId ();

  void
  tipoDisciplinaId (const tipoDisciplinaId_type& x);

  // nivelDificuldadeId
  // 
  typedef ::xml_schema::int_ nivelDificuldadeId_type;
  typedef ::xsd::cxx::tree::traits< nivelDificuldadeId_type, char > nivelDificuldadeId_traits;

  const nivelDificuldadeId_type&
  nivelDificuldadeId () const;

  nivelDificuldadeId_type&
  nivelDificuldadeId ();

  void
  nivelDificuldadeId (const nivelDificuldadeId_type& x);

  // divisaoDeCreditos
  // 
  typedef ::ItemDivisaoCreditos divisaoDeCreditos_type;
  typedef ::xsd::cxx::tree::optional< divisaoDeCreditos_type > divisaoDeCreditos_optional;
  typedef ::xsd::cxx::tree::traits< divisaoDeCreditos_type, char > divisaoDeCreditos_traits;

  const divisaoDeCreditos_optional&
  divisaoDeCreditos () const;

  divisaoDeCreditos_optional&
  divisaoDeCreditos ();

  void
  divisaoDeCreditos (const divisaoDeCreditos_type& x);

  void
  divisaoDeCreditos (const divisaoDeCreditos_optional& x);

  void
  divisaoDeCreditos (::std::auto_ptr< divisaoDeCreditos_type > p);

  // horariosDisponiveis
  // 
  typedef ::GrupoHorario horariosDisponiveis_type;
  typedef ::xsd::cxx::tree::traits< horariosDisponiveis_type, char > horariosDisponiveis_traits;

  const horariosDisponiveis_type&
  horariosDisponiveis () const;

  horariosDisponiveis_type&
  horariosDisponiveis ();

  void
  horariosDisponiveis (const horariosDisponiveis_type& x);

  void
  horariosDisponiveis (::std::auto_ptr< horariosDisponiveis_type > p);

  // disciplinasEquivalentes
  // 
  typedef ::GrupoIdentificador disciplinasEquivalentes_type;
  typedef ::xsd::cxx::tree::traits< disciplinasEquivalentes_type, char > disciplinasEquivalentes_traits;

  const disciplinasEquivalentes_type&
  disciplinasEquivalentes () const;

  disciplinasEquivalentes_type&
  disciplinasEquivalentes ();

  void
  disciplinasEquivalentes (const disciplinasEquivalentes_type& x);

  void
  disciplinasEquivalentes (::std::auto_ptr< disciplinasEquivalentes_type > p);

  // disciplinasIncompativeis
  // 
  typedef ::GrupoIdentificador disciplinasIncompativeis_type;
  typedef ::xsd::cxx::tree::traits< disciplinasIncompativeis_type, char > disciplinasIncompativeis_traits;

  const disciplinasIncompativeis_type&
  disciplinasIncompativeis () const;

  disciplinasIncompativeis_type&
  disciplinasIncompativeis ();

  void
  disciplinasIncompativeis (const disciplinasIncompativeis_type& x);

  void
  disciplinasIncompativeis (::std::auto_ptr< disciplinasIncompativeis_type > p);

  // Constructors.
  //
  ItemDisciplina (const id_type&,
                  const codigo_type&,
                  const nome_type&,
                  const credTeoricos_type&,
                  const credPraticos_type&,
                  const laboratorio_type&,
                  const tipoDisciplinaId_type&,
                  const nivelDificuldadeId_type&,
                  const horariosDisponiveis_type&,
                  const disciplinasEquivalentes_type&,
                  const disciplinasIncompativeis_type&);

  ItemDisciplina (const id_type&,
                  const codigo_type&,
                  const nome_type&,
                  const credTeoricos_type&,
                  const credPraticos_type&,
                  const laboratorio_type&,
                  const tipoDisciplinaId_type&,
                  const nivelDificuldadeId_type&,
                  ::std::auto_ptr< horariosDisponiveis_type >&,
                  ::std::auto_ptr< disciplinasEquivalentes_type >&,
                  ::std::auto_ptr< disciplinasIncompativeis_type >&);

  ItemDisciplina (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  ItemDisciplina (const ItemDisciplina& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual ItemDisciplina*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemDisciplina ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< codigo_type > codigo_;
  ::xsd::cxx::tree::one< nome_type > nome_;
  ::xsd::cxx::tree::one< credTeoricos_type > credTeoricos_;
  ::xsd::cxx::tree::one< credPraticos_type > credPraticos_;
  ::xsd::cxx::tree::one< laboratorio_type > laboratorio_;
  maxAlunosTeorico_optional maxAlunosTeorico_;
  maxAlunosPratico_optional maxAlunosPratico_;
  ::xsd::cxx::tree::one< tipoDisciplinaId_type > tipoDisciplinaId_;
  ::xsd::cxx::tree::one< nivelDificuldadeId_type > nivelDificuldadeId_;
  divisaoDeCreditos_optional divisaoDeCreditos_;
  ::xsd::cxx::tree::one< horariosDisponiveis_type > horariosDisponiveis_;
  ::xsd::cxx::tree::one< disciplinasEquivalentes_type > disciplinasEquivalentes_;
  ::xsd::cxx::tree::one< disciplinasIncompativeis_type > disciplinasIncompativeis_;
};

class ItemCurso: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // codigo
  // 
  typedef ::xml_schema::string codigo_type;
  typedef ::xsd::cxx::tree::traits< codigo_type, char > codigo_traits;

  const codigo_type&
  codigo () const;

  codigo_type&
  codigo ();

  void
  codigo (const codigo_type& x);

  void
  codigo (::std::auto_ptr< codigo_type > p);

  // tipoId
  // 
  typedef ::xml_schema::int_ tipoId_type;
  typedef ::xsd::cxx::tree::traits< tipoId_type, char > tipoId_traits;

  const tipoId_type&
  tipoId () const;

  tipoId_type&
  tipoId ();

  void
  tipoId (const tipoId_type& x);

  // regraPercMinMestres
  // 
  typedef ::ItemPercentualMinimo regraPercMinMestres_type;
  typedef ::xsd::cxx::tree::traits< regraPercMinMestres_type, char > regraPercMinMestres_traits;

  const regraPercMinMestres_type&
  regraPercMinMestres () const;

  regraPercMinMestres_type&
  regraPercMinMestres ();

  void
  regraPercMinMestres (const regraPercMinMestres_type& x);

  void
  regraPercMinMestres (::std::auto_ptr< regraPercMinMestres_type > p);

  // regraPercMinDoutores
  // 
  typedef ::ItemPercentualMinimo regraPercMinDoutores_type;
  typedef ::xsd::cxx::tree::traits< regraPercMinDoutores_type, char > regraPercMinDoutores_traits;

  const regraPercMinDoutores_type&
  regraPercMinDoutores () const;

  regraPercMinDoutores_type&
  regraPercMinDoutores ();

  void
  regraPercMinDoutores (const regraPercMinDoutores_type& x);

  void
  regraPercMinDoutores (::std::auto_ptr< regraPercMinDoutores_type > p);

  // qtdMaxProfDisc
  // 
  typedef ::xml_schema::int_ qtdMaxProfDisc_type;
  typedef ::xsd::cxx::tree::traits< qtdMaxProfDisc_type, char > qtdMaxProfDisc_traits;

  const qtdMaxProfDisc_type&
  qtdMaxProfDisc () const;

  qtdMaxProfDisc_type&
  qtdMaxProfDisc ();

  void
  qtdMaxProfDisc (const qtdMaxProfDisc_type& x);

  // maisDeUmaDiscPeriodo
  // 
  typedef ::xml_schema::boolean maisDeUmaDiscPeriodo_type;
  typedef ::xsd::cxx::tree::traits< maisDeUmaDiscPeriodo_type, char > maisDeUmaDiscPeriodo_traits;

  const maisDeUmaDiscPeriodo_type&
  maisDeUmaDiscPeriodo () const;

  maisDeUmaDiscPeriodo_type&
  maisDeUmaDiscPeriodo ();

  void
  maisDeUmaDiscPeriodo (const maisDeUmaDiscPeriodo_type& x);

  // areasTitulacao
  // 
  typedef ::GrupoIdentificador areasTitulacao_type;
  typedef ::xsd::cxx::tree::traits< areasTitulacao_type, char > areasTitulacao_traits;

  const areasTitulacao_type&
  areasTitulacao () const;

  areasTitulacao_type&
  areasTitulacao ();

  void
  areasTitulacao (const areasTitulacao_type& x);

  void
  areasTitulacao (::std::auto_ptr< areasTitulacao_type > p);

  // curriculos
  // 
  typedef ::GrupoCurriculo curriculos_type;
  typedef ::xsd::cxx::tree::traits< curriculos_type, char > curriculos_traits;

  const curriculos_type&
  curriculos () const;

  curriculos_type&
  curriculos ();

  void
  curriculos (const curriculos_type& x);

  void
  curriculos (::std::auto_ptr< curriculos_type > p);

  // minTempoIntegral
  // 
  typedef ::xml_schema::double_ minTempoIntegral_type;
  typedef ::xsd::cxx::tree::traits< minTempoIntegral_type, char, ::xsd::cxx::tree::schema_type::double_ > minTempoIntegral_traits;

  const minTempoIntegral_type&
  minTempoIntegral () const;

  minTempoIntegral_type&
  minTempoIntegral ();

  void
  minTempoIntegral (const minTempoIntegral_type& x);

  // minTempoIntegralParcial
  // 
  typedef ::xml_schema::double_ minTempoIntegralParcial_type;
  typedef ::xsd::cxx::tree::traits< minTempoIntegralParcial_type, char, ::xsd::cxx::tree::schema_type::double_ > minTempoIntegralParcial_traits;

  const minTempoIntegralParcial_type&
  minTempoIntegralParcial () const;

  minTempoIntegralParcial_type&
  minTempoIntegralParcial ();

  void
  minTempoIntegralParcial (const minTempoIntegralParcial_type& x);

  // Constructors.
  //
  ItemCurso (const id_type&,
             const codigo_type&,
             const tipoId_type&,
             const regraPercMinMestres_type&,
             const regraPercMinDoutores_type&,
             const qtdMaxProfDisc_type&,
             const maisDeUmaDiscPeriodo_type&,
             const areasTitulacao_type&,
             const curriculos_type&,
             const minTempoIntegral_type&,
             const minTempoIntegralParcial_type&);

  ItemCurso (const id_type&,
             const codigo_type&,
             const tipoId_type&,
             ::std::auto_ptr< regraPercMinMestres_type >&,
             ::std::auto_ptr< regraPercMinDoutores_type >&,
             const qtdMaxProfDisc_type&,
             const maisDeUmaDiscPeriodo_type&,
             ::std::auto_ptr< areasTitulacao_type >&,
             ::std::auto_ptr< curriculos_type >&,
             const minTempoIntegral_type&,
             const minTempoIntegralParcial_type&);

  ItemCurso (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  ItemCurso (const ItemCurso& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual ItemCurso*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemCurso ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< codigo_type > codigo_;
  ::xsd::cxx::tree::one< tipoId_type > tipoId_;
  ::xsd::cxx::tree::one< regraPercMinMestres_type > regraPercMinMestres_;
  ::xsd::cxx::tree::one< regraPercMinDoutores_type > regraPercMinDoutores_;
  ::xsd::cxx::tree::one< qtdMaxProfDisc_type > qtdMaxProfDisc_;
  ::xsd::cxx::tree::one< maisDeUmaDiscPeriodo_type > maisDeUmaDiscPeriodo_;
  ::xsd::cxx::tree::one< areasTitulacao_type > areasTitulacao_;
  ::xsd::cxx::tree::one< curriculos_type > curriculos_;
  ::xsd::cxx::tree::one< minTempoIntegral_type > minTempoIntegral_;
  ::xsd::cxx::tree::one< minTempoIntegralParcial_type > minTempoIntegralParcial_;
};

class ItemPercentualMinimo: public ::xml_schema::type
{
  public:
  // percMinimo
  // 
  typedef ::xml_schema::double_ percMinimo_type;
  typedef ::xsd::cxx::tree::traits< percMinimo_type, char, ::xsd::cxx::tree::schema_type::double_ > percMinimo_traits;

  const percMinimo_type&
  percMinimo () const;

  percMinimo_type&
  percMinimo ();

  void
  percMinimo (const percMinimo_type& x);

  // tipoTitulacaoId
  // 
  typedef ::xml_schema::int_ tipoTitulacaoId_type;
  typedef ::xsd::cxx::tree::traits< tipoTitulacaoId_type, char > tipoTitulacaoId_traits;

  const tipoTitulacaoId_type&
  tipoTitulacaoId () const;

  tipoTitulacaoId_type&
  tipoTitulacaoId ();

  void
  tipoTitulacaoId (const tipoTitulacaoId_type& x);

  // Constructors.
  //
  ItemPercentualMinimo (const percMinimo_type&,
                        const tipoTitulacaoId_type&);

  ItemPercentualMinimo (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  ItemPercentualMinimo (const ItemPercentualMinimo& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual ItemPercentualMinimo*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemPercentualMinimo ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< percMinimo_type > percMinimo_;
  ::xsd::cxx::tree::one< tipoTitulacaoId_type > tipoTitulacaoId_;
};

class ItemCurriculo: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // codigo
  // 
  typedef ::xml_schema::string codigo_type;
  typedef ::xsd::cxx::tree::traits< codigo_type, char > codigo_traits;

  const codigo_type&
  codigo () const;

  codigo_type&
  codigo ();

  void
  codigo (const codigo_type& x);

  void
  codigo (::std::auto_ptr< codigo_type > p);

  // disciplinasPeriodo
  // 
  typedef ::GrupoDisciplinaPeriodo disciplinasPeriodo_type;
  typedef ::xsd::cxx::tree::traits< disciplinasPeriodo_type, char > disciplinasPeriodo_traits;

  const disciplinasPeriodo_type&
  disciplinasPeriodo () const;

  disciplinasPeriodo_type&
  disciplinasPeriodo ();

  void
  disciplinasPeriodo (const disciplinasPeriodo_type& x);

  void
  disciplinasPeriodo (::std::auto_ptr< disciplinasPeriodo_type > p);

  // semanaLetivaId
  // 
  typedef ::xml_schema::int_ semanaLetivaId_type;
  typedef ::xsd::cxx::tree::traits< semanaLetivaId_type, char > semanaLetivaId_traits;

  const semanaLetivaId_type&
  semanaLetivaId () const;

  semanaLetivaId_type&
  semanaLetivaId ();

  void
  semanaLetivaId (const semanaLetivaId_type& x);

  // Constructors.
  //
  ItemCurriculo (const id_type&,
                 const codigo_type&,
                 const disciplinasPeriodo_type&,
                 const semanaLetivaId_type&);

  ItemCurriculo (const id_type&,
                 const codigo_type&,
                 ::std::auto_ptr< disciplinasPeriodo_type >&,
                 const semanaLetivaId_type&);

  ItemCurriculo (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ItemCurriculo (const ItemCurriculo& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual ItemCurriculo*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemCurriculo ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< codigo_type > codigo_;
  ::xsd::cxx::tree::one< disciplinasPeriodo_type > disciplinasPeriodo_;
  ::xsd::cxx::tree::one< semanaLetivaId_type > semanaLetivaId_;
};

class ItemDisciplinaPeriodo: public ::xml_schema::type
{
  public:
  // periodo
  // 
  typedef ::xml_schema::int_ periodo_type;
  typedef ::xsd::cxx::tree::traits< periodo_type, char > periodo_traits;

  const periodo_type&
  periodo () const;

  periodo_type&
  periodo ();

  void
  periodo (const periodo_type& x);

  // disciplinaId
  // 
  typedef ::xml_schema::int_ disciplinaId_type;
  typedef ::xsd::cxx::tree::traits< disciplinaId_type, char > disciplinaId_traits;

  const disciplinaId_type&
  disciplinaId () const;

  disciplinaId_type&
  disciplinaId ();

  void
  disciplinaId (const disciplinaId_type& x);

  // Constructors.
  //
  ItemDisciplinaPeriodo (const periodo_type&,
                         const disciplinaId_type&);

  ItemDisciplinaPeriodo (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  ItemDisciplinaPeriodo (const ItemDisciplinaPeriodo& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual ItemDisciplinaPeriodo*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemDisciplinaPeriodo ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< periodo_type > periodo_;
  ::xsd::cxx::tree::one< disciplinaId_type > disciplinaId_;
};

class ItemOfertaCurso: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // curriculoId
  // 
  typedef ::xml_schema::int_ curriculoId_type;
  typedef ::xsd::cxx::tree::traits< curriculoId_type, char > curriculoId_traits;

  const curriculoId_type&
  curriculoId () const;

  curriculoId_type&
  curriculoId ();

  void
  curriculoId (const curriculoId_type& x);

  // cursoId
  // 
  typedef ::xml_schema::int_ cursoId_type;
  typedef ::xsd::cxx::tree::traits< cursoId_type, char > cursoId_traits;

  const cursoId_type&
  cursoId () const;

  cursoId_type&
  cursoId ();

  void
  cursoId (const cursoId_type& x);

  // turnoId
  // 
  typedef ::xml_schema::int_ turnoId_type;
  typedef ::xsd::cxx::tree::traits< turnoId_type, char > turnoId_traits;

  const turnoId_type&
  turnoId () const;

  turnoId_type&
  turnoId ();

  void
  turnoId (const turnoId_type& x);

  // campusId
  // 
  typedef ::xml_schema::int_ campusId_type;
  typedef ::xsd::cxx::tree::traits< campusId_type, char > campusId_traits;

  const campusId_type&
  campusId () const;

  campusId_type&
  campusId ();

  void
  campusId (const campusId_type& x);

  // receita
  // 
  typedef ::xml_schema::double_ receita_type;
  typedef ::xsd::cxx::tree::traits< receita_type, char, ::xsd::cxx::tree::schema_type::double_ > receita_traits;

  const receita_type&
  receita () const;

  receita_type&
  receita ();

  void
  receita (const receita_type& x);

  // Constructors.
  //
  ItemOfertaCurso (const id_type&,
                   const curriculoId_type&,
                   const cursoId_type&,
                   const turnoId_type&,
                   const campusId_type&,
                   const receita_type&);

  ItemOfertaCurso (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  ItemOfertaCurso (const ItemOfertaCurso& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual ItemOfertaCurso*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemOfertaCurso ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< curriculoId_type > curriculoId_;
  ::xsd::cxx::tree::one< cursoId_type > cursoId_;
  ::xsd::cxx::tree::one< turnoId_type > turnoId_;
  ::xsd::cxx::tree::one< campusId_type > campusId_;
  ::xsd::cxx::tree::one< receita_type > receita_;
};

class ItemDemanda: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // ofertaCursoCampiId
  // 
  typedef ::xml_schema::int_ ofertaCursoCampiId_type;
  typedef ::xsd::cxx::tree::traits< ofertaCursoCampiId_type, char > ofertaCursoCampiId_traits;

  const ofertaCursoCampiId_type&
  ofertaCursoCampiId () const;

  ofertaCursoCampiId_type&
  ofertaCursoCampiId ();

  void
  ofertaCursoCampiId (const ofertaCursoCampiId_type& x);

  // disciplinaId
  // 
  typedef ::xml_schema::int_ disciplinaId_type;
  typedef ::xsd::cxx::tree::traits< disciplinaId_type, char > disciplinaId_traits;

  const disciplinaId_type&
  disciplinaId () const;

  disciplinaId_type&
  disciplinaId ();

  void
  disciplinaId (const disciplinaId_type& x);

  // quantidade
  // 
  typedef ::xml_schema::int_ quantidade_type;
  typedef ::xsd::cxx::tree::traits< quantidade_type, char > quantidade_traits;

  const quantidade_type&
  quantidade () const;

  quantidade_type&
  quantidade ();

  void
  quantidade (const quantidade_type& x);

  // Constructors.
  //
  ItemDemanda (const id_type&,
               const ofertaCursoCampiId_type&,
               const disciplinaId_type&,
               const quantidade_type&);

  ItemDemanda (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  ItemDemanda (const ItemDemanda& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual ItemDemanda*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemDemanda ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< ofertaCursoCampiId_type > ofertaCursoCampiId_;
  ::xsd::cxx::tree::one< disciplinaId_type > disciplinaId_;
  ::xsd::cxx::tree::one< quantidade_type > quantidade_;
};

class ItemFixacao: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // professorId
  // 
  typedef ::xml_schema::int_ professorId_type;
  typedef ::xsd::cxx::tree::optional< professorId_type > professorId_optional;
  typedef ::xsd::cxx::tree::traits< professorId_type, char > professorId_traits;

  const professorId_optional&
  professorId () const;

  professorId_optional&
  professorId ();

  void
  professorId (const professorId_type& x);

  void
  professorId (const professorId_optional& x);

  // disciplinaId
  // 
  typedef ::xml_schema::int_ disciplinaId_type;
  typedef ::xsd::cxx::tree::optional< disciplinaId_type > disciplinaId_optional;
  typedef ::xsd::cxx::tree::traits< disciplinaId_type, char > disciplinaId_traits;

  const disciplinaId_optional&
  disciplinaId () const;

  disciplinaId_optional&
  disciplinaId ();

  void
  disciplinaId (const disciplinaId_type& x);

  void
  disciplinaId (const disciplinaId_optional& x);

  // salaId
  // 
  typedef ::xml_schema::int_ salaId_type;
  typedef ::xsd::cxx::tree::optional< salaId_type > salaId_optional;
  typedef ::xsd::cxx::tree::traits< salaId_type, char > salaId_traits;

  const salaId_optional&
  salaId () const;

  salaId_optional&
  salaId ();

  void
  salaId (const salaId_type& x);

  void
  salaId (const salaId_optional& x);

  // diaSemana
  // 
  typedef ::xml_schema::int_ diaSemana_type;
  typedef ::xsd::cxx::tree::optional< diaSemana_type > diaSemana_optional;
  typedef ::xsd::cxx::tree::traits< diaSemana_type, char > diaSemana_traits;

  const diaSemana_optional&
  diaSemana () const;

  diaSemana_optional&
  diaSemana ();

  void
  diaSemana (const diaSemana_type& x);

  void
  diaSemana (const diaSemana_optional& x);

  // turnoId
  // 
  typedef ::xml_schema::int_ turnoId_type;
  typedef ::xsd::cxx::tree::optional< turnoId_type > turnoId_optional;
  typedef ::xsd::cxx::tree::traits< turnoId_type, char > turnoId_traits;

  const turnoId_optional&
  turnoId () const;

  turnoId_optional&
  turnoId ();

  void
  turnoId (const turnoId_type& x);

  void
  turnoId (const turnoId_optional& x);

  // horarioAulaId
  // 
  typedef ::xml_schema::int_ horarioAulaId_type;
  typedef ::xsd::cxx::tree::optional< horarioAulaId_type > horarioAulaId_optional;
  typedef ::xsd::cxx::tree::traits< horarioAulaId_type, char > horarioAulaId_traits;

  const horarioAulaId_optional&
  horarioAulaId () const;

  horarioAulaId_optional&
  horarioAulaId ();

  void
  horarioAulaId (const horarioAulaId_type& x);

  void
  horarioAulaId (const horarioAulaId_optional& x);

  // Constructors.
  //
  ItemFixacao (const id_type&);

  ItemFixacao (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  ItemFixacao (const ItemFixacao& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual ItemFixacao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemFixacao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< id_type > id_;
  professorId_optional professorId_;
  disciplinaId_optional disciplinaId_;
  salaId_optional salaId_;
  diaSemana_optional diaSemana_;
  turnoId_optional turnoId_;
  horarioAulaId_optional horarioAulaId_;
};

class ItemParametrosPlanejamento: public ::xml_schema::type
{
  public:
  // modoOtimizacao
  // 
  typedef ::xml_schema::string modoOtimizacao_type;
  typedef ::xsd::cxx::tree::traits< modoOtimizacao_type, char > modoOtimizacao_traits;

  const modoOtimizacao_type&
  modoOtimizacao () const;

  modoOtimizacao_type&
  modoOtimizacao ();

  void
  modoOtimizacao (const modoOtimizacao_type& x);

  void
  modoOtimizacao (::std::auto_ptr< modoOtimizacao_type > p);

  // cargaHorariaSemanalAluno
  // 
  typedef ::cargaHorariaSemanalAluno cargaHorariaSemanalAluno_type;
  typedef ::xsd::cxx::tree::traits< cargaHorariaSemanalAluno_type, char > cargaHorariaSemanalAluno_traits;

  const cargaHorariaSemanalAluno_type&
  cargaHorariaSemanalAluno () const;

  cargaHorariaSemanalAluno_type&
  cargaHorariaSemanalAluno ();

  void
  cargaHorariaSemanalAluno (const cargaHorariaSemanalAluno_type& x);

  void
  cargaHorariaSemanalAluno (::std::auto_ptr< cargaHorariaSemanalAluno_type > p);

  // alunosMesmoPeriodoNaMesmaSala
  // 
  typedef ::xml_schema::boolean alunosMesmoPeriodoNaMesmaSala_type;
  typedef ::xsd::cxx::tree::traits< alunosMesmoPeriodoNaMesmaSala_type, char > alunosMesmoPeriodoNaMesmaSala_traits;

  const alunosMesmoPeriodoNaMesmaSala_type&
  alunosMesmoPeriodoNaMesmaSala () const;

  alunosMesmoPeriodoNaMesmaSala_type&
  alunosMesmoPeriodoNaMesmaSala ();

  void
  alunosMesmoPeriodoNaMesmaSala (const alunosMesmoPeriodoNaMesmaSala_type& x);

  // permitirAlunosEmVariosCampi
  // 
  typedef ::xml_schema::boolean permitirAlunosEmVariosCampi_type;
  typedef ::xsd::cxx::tree::traits< permitirAlunosEmVariosCampi_type, char > permitirAlunosEmVariosCampi_traits;

  const permitirAlunosEmVariosCampi_type&
  permitirAlunosEmVariosCampi () const;

  permitirAlunosEmVariosCampi_type&
  permitirAlunosEmVariosCampi ();

  void
  permitirAlunosEmVariosCampi (const permitirAlunosEmVariosCampi_type& x);

  // minimizarDeslocAluno
  // 
  typedef ::xml_schema::boolean minimizarDeslocAluno_type;
  typedef ::xsd::cxx::tree::traits< minimizarDeslocAluno_type, char > minimizarDeslocAluno_traits;

  const minimizarDeslocAluno_type&
  minimizarDeslocAluno () const;

  minimizarDeslocAluno_type&
  minimizarDeslocAluno ();

  void
  minimizarDeslocAluno (const minimizarDeslocAluno_type& x);

  // cargaHorariaSemanalProfessor
  // 
  typedef ::cargaHorariaSemanalProfessor cargaHorariaSemanalProfessor_type;
  typedef ::xsd::cxx::tree::traits< cargaHorariaSemanalProfessor_type, char > cargaHorariaSemanalProfessor_traits;

  const cargaHorariaSemanalProfessor_type&
  cargaHorariaSemanalProfessor () const;

  cargaHorariaSemanalProfessor_type&
  cargaHorariaSemanalProfessor ();

  void
  cargaHorariaSemanalProfessor (const cargaHorariaSemanalProfessor_type& x);

  void
  cargaHorariaSemanalProfessor (::std::auto_ptr< cargaHorariaSemanalProfessor_type > p);

  // permitirProfessorEmVariosCampi
  // 
  typedef ::xml_schema::boolean permitirProfessorEmVariosCampi_type;
  typedef ::xsd::cxx::tree::traits< permitirProfessorEmVariosCampi_type, char > permitirProfessorEmVariosCampi_traits;

  const permitirProfessorEmVariosCampi_type&
  permitirProfessorEmVariosCampi () const;

  permitirProfessorEmVariosCampi_type&
  permitirProfessorEmVariosCampi ();

  void
  permitirProfessorEmVariosCampi (const permitirProfessorEmVariosCampi_type& x);

  // minimizarDeslocProfessor
  // 
  typedef ::xml_schema::boolean minimizarDeslocProfessor_type;
  typedef ::xsd::cxx::tree::traits< minimizarDeslocProfessor_type, char > minimizarDeslocProfessor_traits;

  const minimizarDeslocProfessor_type&
  minimizarDeslocProfessor () const;

  minimizarDeslocProfessor_type&
  minimizarDeslocProfessor ();

  void
  minimizarDeslocProfessor (const minimizarDeslocProfessor_type& x);

  // maxDeslocProfessor
  // 
  typedef ::xml_schema::int_ maxDeslocProfessor_type;
  typedef ::xsd::cxx::tree::optional< maxDeslocProfessor_type > maxDeslocProfessor_optional;
  typedef ::xsd::cxx::tree::traits< maxDeslocProfessor_type, char > maxDeslocProfessor_traits;

  const maxDeslocProfessor_optional&
  maxDeslocProfessor () const;

  maxDeslocProfessor_optional&
  maxDeslocProfessor ();

  void
  maxDeslocProfessor (const maxDeslocProfessor_type& x);

  void
  maxDeslocProfessor (const maxDeslocProfessor_optional& x);

  // minimizarHorariosVaziosProfessor
  // 
  typedef ::xml_schema::boolean minimizarHorariosVaziosProfessor_type;
  typedef ::xsd::cxx::tree::traits< minimizarHorariosVaziosProfessor_type, char > minimizarHorariosVaziosProfessor_traits;

  const minimizarHorariosVaziosProfessor_type&
  minimizarHorariosVaziosProfessor () const;

  minimizarHorariosVaziosProfessor_type&
  minimizarHorariosVaziosProfessor ();

  void
  minimizarHorariosVaziosProfessor (const minimizarHorariosVaziosProfessor_type& x);

  // evitarReducaoCargaHorariaProf
  // 
  typedef ::xml_schema::boolean evitarReducaoCargaHorariaProf_type;
  typedef ::xsd::cxx::tree::traits< evitarReducaoCargaHorariaProf_type, char > evitarReducaoCargaHorariaProf_traits;

  const evitarReducaoCargaHorariaProf_type&
  evitarReducaoCargaHorariaProf () const;

  evitarReducaoCargaHorariaProf_type&
  evitarReducaoCargaHorariaProf ();

  void
  evitarReducaoCargaHorariaProf (const evitarReducaoCargaHorariaProf_type& x);

  // evitarReducaoCargaHorariaProfValor
  // 
  typedef ::xml_schema::int_ evitarReducaoCargaHorariaProfValor_type;
  typedef ::xsd::cxx::tree::optional< evitarReducaoCargaHorariaProfValor_type > evitarReducaoCargaHorariaProfValor_optional;
  typedef ::xsd::cxx::tree::traits< evitarReducaoCargaHorariaProfValor_type, char > evitarReducaoCargaHorariaProfValor_traits;

  const evitarReducaoCargaHorariaProfValor_optional&
  evitarReducaoCargaHorariaProfValor () const;

  evitarReducaoCargaHorariaProfValor_optional&
  evitarReducaoCargaHorariaProfValor ();

  void
  evitarReducaoCargaHorariaProfValor (const evitarReducaoCargaHorariaProfValor_type& x);

  void
  evitarReducaoCargaHorariaProfValor (const evitarReducaoCargaHorariaProfValor_optional& x);

  // evitarProfUltimoPrimeiroHor
  // 
  typedef ::xml_schema::boolean evitarProfUltimoPrimeiroHor_type;
  typedef ::xsd::cxx::tree::traits< evitarProfUltimoPrimeiroHor_type, char > evitarProfUltimoPrimeiroHor_traits;

  const evitarProfUltimoPrimeiroHor_type&
  evitarProfUltimoPrimeiroHor () const;

  evitarProfUltimoPrimeiroHor_type&
  evitarProfUltimoPrimeiroHor ();

  void
  evitarProfUltimoPrimeiroHor (const evitarProfUltimoPrimeiroHor_type& x);

  // preferenciaProfessorDisciplina
  // 
  typedef ::xml_schema::boolean preferenciaProfessorDisciplina_type;
  typedef ::xsd::cxx::tree::traits< preferenciaProfessorDisciplina_type, char > preferenciaProfessorDisciplina_traits;

  const preferenciaProfessorDisciplina_type&
  preferenciaProfessorDisciplina () const;

  preferenciaProfessorDisciplina_type&
  preferenciaProfessorDisciplina ();

  void
  preferenciaProfessorDisciplina (const preferenciaProfessorDisciplina_type& x);

  // desempenhoProfDisponibilidade
  // 
  typedef ::xml_schema::boolean desempenhoProfDisponibilidade_type;
  typedef ::xsd::cxx::tree::traits< desempenhoProfDisponibilidade_type, char > desempenhoProfDisponibilidade_traits;

  const desempenhoProfDisponibilidade_type&
  desempenhoProfDisponibilidade () const;

  desempenhoProfDisponibilidade_type&
  desempenhoProfDisponibilidade ();

  void
  desempenhoProfDisponibilidade (const desempenhoProfDisponibilidade_type& x);

  // funcaoObjetivo
  // 
  typedef ::xml_schema::int_ funcaoObjetivo_type;
  typedef ::xsd::cxx::tree::traits< funcaoObjetivo_type, char > funcaoObjetivo_traits;

  const funcaoObjetivo_type&
  funcaoObjetivo () const;

  funcaoObjetivo_type&
  funcaoObjetivo ();

  void
  funcaoObjetivo (const funcaoObjetivo_type& x);

  // considerarEquivalencia
  // 
  typedef ::xml_schema::boolean considerarEquivalencia_type;
  typedef ::xsd::cxx::tree::traits< considerarEquivalencia_type, char > considerarEquivalencia_traits;

  const considerarEquivalencia_type&
  considerarEquivalencia () const;

  considerarEquivalencia_type&
  considerarEquivalencia ();

  void
  considerarEquivalencia (const considerarEquivalencia_type& x);

  // minAlunosAberturaTurmas
  // 
  typedef ::xml_schema::boolean minAlunosAberturaTurmas_type;
  typedef ::xsd::cxx::tree::traits< minAlunosAberturaTurmas_type, char > minAlunosAberturaTurmas_traits;

  const minAlunosAberturaTurmas_type&
  minAlunosAberturaTurmas () const;

  minAlunosAberturaTurmas_type&
  minAlunosAberturaTurmas ();

  void
  minAlunosAberturaTurmas (const minAlunosAberturaTurmas_type& x);

  // minAlunosAberturaTurmasValor
  // 
  typedef ::xml_schema::int_ minAlunosAberturaTurmasValor_type;
  typedef ::xsd::cxx::tree::optional< minAlunosAberturaTurmasValor_type > minAlunosAberturaTurmasValor_optional;
  typedef ::xsd::cxx::tree::traits< minAlunosAberturaTurmasValor_type, char > minAlunosAberturaTurmasValor_traits;

  const minAlunosAberturaTurmasValor_optional&
  minAlunosAberturaTurmasValor () const;

  minAlunosAberturaTurmasValor_optional&
  minAlunosAberturaTurmasValor ();

  void
  minAlunosAberturaTurmasValor (const minAlunosAberturaTurmasValor_type& x);

  void
  minAlunosAberturaTurmasValor (const minAlunosAberturaTurmasValor_optional& x);

  // niveisDificuldadeHorario
  // 
  typedef ::GrupoNivelDificuldadeHorario niveisDificuldadeHorario_type;
  typedef ::xsd::cxx::tree::traits< niveisDificuldadeHorario_type, char > niveisDificuldadeHorario_traits;

  const niveisDificuldadeHorario_type&
  niveisDificuldadeHorario () const;

  niveisDificuldadeHorario_type&
  niveisDificuldadeHorario ();

  void
  niveisDificuldadeHorario (const niveisDificuldadeHorario_type& x);

  void
  niveisDificuldadeHorario (::std::auto_ptr< niveisDificuldadeHorario_type > p);

  // equilibrarDiversidadeDiscDia
  // 
  typedef ::xml_schema::boolean equilibrarDiversidadeDiscDia_type;
  typedef ::xsd::cxx::tree::traits< equilibrarDiversidadeDiscDia_type, char > equilibrarDiversidadeDiscDia_traits;

  const equilibrarDiversidadeDiscDia_type&
  equilibrarDiversidadeDiscDia () const;

  equilibrarDiversidadeDiscDia_type&
  equilibrarDiversidadeDiscDia ();

  void
  equilibrarDiversidadeDiscDia (const equilibrarDiversidadeDiscDia_type& x);

  // regrasGenericasDivisaoCredito
  // 
  typedef ::xml_schema::boolean regrasGenericasDivisaoCredito_type;
  typedef ::xsd::cxx::tree::traits< regrasGenericasDivisaoCredito_type, char > regrasGenericasDivisaoCredito_traits;

  const regrasGenericasDivisaoCredito_type&
  regrasGenericasDivisaoCredito () const;

  regrasGenericasDivisaoCredito_type&
  regrasGenericasDivisaoCredito ();

  void
  regrasGenericasDivisaoCredito (const regrasGenericasDivisaoCredito_type& x);

  // regrasEspecificasDivisaoCredito
  // 
  typedef ::xml_schema::boolean regrasEspecificasDivisaoCredito_type;
  typedef ::xsd::cxx::tree::traits< regrasEspecificasDivisaoCredito_type, char > regrasEspecificasDivisaoCredito_traits;

  const regrasEspecificasDivisaoCredito_type&
  regrasEspecificasDivisaoCredito () const;

  regrasEspecificasDivisaoCredito_type&
  regrasEspecificasDivisaoCredito ();

  void
  regrasEspecificasDivisaoCredito (const regrasEspecificasDivisaoCredito_type& x);

  // maximizarAvaliacaoCursosSel
  // 
  typedef ::xml_schema::boolean maximizarAvaliacaoCursosSel_type;
  typedef ::xsd::cxx::tree::traits< maximizarAvaliacaoCursosSel_type, char > maximizarAvaliacaoCursosSel_traits;

  const maximizarAvaliacaoCursosSel_type&
  maximizarAvaliacaoCursosSel () const;

  maximizarAvaliacaoCursosSel_type&
  maximizarAvaliacaoCursosSel ();

  void
  maximizarAvaliacaoCursosSel (const maximizarAvaliacaoCursosSel_type& x);

  // maximizarAvaliacaoCursos
  // 
  typedef ::GrupoIdentificador maximizarAvaliacaoCursos_type;
  typedef ::xsd::cxx::tree::optional< maximizarAvaliacaoCursos_type > maximizarAvaliacaoCursos_optional;
  typedef ::xsd::cxx::tree::traits< maximizarAvaliacaoCursos_type, char > maximizarAvaliacaoCursos_traits;

  const maximizarAvaliacaoCursos_optional&
  maximizarAvaliacaoCursos () const;

  maximizarAvaliacaoCursos_optional&
  maximizarAvaliacaoCursos ();

  void
  maximizarAvaliacaoCursos (const maximizarAvaliacaoCursos_type& x);

  void
  maximizarAvaliacaoCursos (const maximizarAvaliacaoCursos_optional& x);

  void
  maximizarAvaliacaoCursos (::std::auto_ptr< maximizarAvaliacaoCursos_type > p);

  // minimizarCustoDocenteCursosSel
  // 
  typedef ::xml_schema::boolean minimizarCustoDocenteCursosSel_type;
  typedef ::xsd::cxx::tree::traits< minimizarCustoDocenteCursosSel_type, char > minimizarCustoDocenteCursosSel_traits;

  const minimizarCustoDocenteCursosSel_type&
  minimizarCustoDocenteCursosSel () const;

  minimizarCustoDocenteCursosSel_type&
  minimizarCustoDocenteCursosSel ();

  void
  minimizarCustoDocenteCursosSel (const minimizarCustoDocenteCursosSel_type& x);

  // minimizarCustoDocenteCursos
  // 
  typedef ::GrupoIdentificador minimizarCustoDocenteCursos_type;
  typedef ::xsd::cxx::tree::optional< minimizarCustoDocenteCursos_type > minimizarCustoDocenteCursos_optional;
  typedef ::xsd::cxx::tree::traits< minimizarCustoDocenteCursos_type, char > minimizarCustoDocenteCursos_traits;

  const minimizarCustoDocenteCursos_optional&
  minimizarCustoDocenteCursos () const;

  minimizarCustoDocenteCursos_optional&
  minimizarCustoDocenteCursos ();

  void
  minimizarCustoDocenteCursos (const minimizarCustoDocenteCursos_type& x);

  void
  minimizarCustoDocenteCursos (const minimizarCustoDocenteCursos_optional& x);

  void
  minimizarCustoDocenteCursos (::std::auto_ptr< minimizarCustoDocenteCursos_type > p);

  // permiteCompartilhamentoTurmaSel
  // 
  typedef ::xml_schema::boolean permiteCompartilhamentoTurmaSel_type;
  typedef ::xsd::cxx::tree::traits< permiteCompartilhamentoTurmaSel_type, char > permiteCompartilhamentoTurmaSel_traits;

  const permiteCompartilhamentoTurmaSel_type&
  permiteCompartilhamentoTurmaSel () const;

  permiteCompartilhamentoTurmaSel_type&
  permiteCompartilhamentoTurmaSel ();

  void
  permiteCompartilhamentoTurmaSel (const permiteCompartilhamentoTurmaSel_type& x);

  // permiteCompartilhamentoTurma
  // 
  typedef ::GrupoGrupo permiteCompartilhamentoTurma_type;
  typedef ::xsd::cxx::tree::optional< permiteCompartilhamentoTurma_type > permiteCompartilhamentoTurma_optional;
  typedef ::xsd::cxx::tree::traits< permiteCompartilhamentoTurma_type, char > permiteCompartilhamentoTurma_traits;

  const permiteCompartilhamentoTurma_optional&
  permiteCompartilhamentoTurma () const;

  permiteCompartilhamentoTurma_optional&
  permiteCompartilhamentoTurma ();

  void
  permiteCompartilhamentoTurma (const permiteCompartilhamentoTurma_type& x);

  void
  permiteCompartilhamentoTurma (const permiteCompartilhamentoTurma_optional& x);

  void
  permiteCompartilhamentoTurma (::std::auto_ptr< permiteCompartilhamentoTurma_type > p);

  // percentuaisMinimoMestres
  // 
  typedef ::xml_schema::boolean percentuaisMinimoMestres_type;
  typedef ::xsd::cxx::tree::traits< percentuaisMinimoMestres_type, char > percentuaisMinimoMestres_traits;

  const percentuaisMinimoMestres_type&
  percentuaisMinimoMestres () const;

  percentuaisMinimoMestres_type&
  percentuaisMinimoMestres ();

  void
  percentuaisMinimoMestres (const percentuaisMinimoMestres_type& x);

  // percentuaisMinimoDoutores
  // 
  typedef ::xml_schema::boolean percentuaisMinimoDoutores_type;
  typedef ::xsd::cxx::tree::traits< percentuaisMinimoDoutores_type, char > percentuaisMinimoDoutores_traits;

  const percentuaisMinimoDoutores_type&
  percentuaisMinimoDoutores () const;

  percentuaisMinimoDoutores_type&
  percentuaisMinimoDoutores ();

  void
  percentuaisMinimoDoutores (const percentuaisMinimoDoutores_type& x);

  // areaTitulacaoProfessorCurso
  // 
  typedef ::xml_schema::boolean areaTitulacaoProfessorCurso_type;
  typedef ::xsd::cxx::tree::traits< areaTitulacaoProfessorCurso_type, char > areaTitulacaoProfessorCurso_traits;

  const areaTitulacaoProfessorCurso_type&
  areaTitulacaoProfessorCurso () const;

  areaTitulacaoProfessorCurso_type&
  areaTitulacaoProfessorCurso ();

  void
  areaTitulacaoProfessorCurso (const areaTitulacaoProfessorCurso_type& x);

  // maximoDisciplinasDeUmProfessorPorCurso
  // 
  typedef ::xml_schema::boolean maximoDisciplinasDeUmProfessorPorCurso_type;
  typedef ::xsd::cxx::tree::traits< maximoDisciplinasDeUmProfessorPorCurso_type, char > maximoDisciplinasDeUmProfessorPorCurso_traits;

  const maximoDisciplinasDeUmProfessorPorCurso_type&
  maximoDisciplinasDeUmProfessorPorCurso () const;

  maximoDisciplinasDeUmProfessorPorCurso_type&
  maximoDisciplinasDeUmProfessorPorCurso ();

  void
  maximoDisciplinasDeUmProfessorPorCurso (const maximoDisciplinasDeUmProfessorPorCurso_type& x);

  // custoProfDisponibilidade
  // 
  typedef ::xml_schema::boolean custoProfDisponibilidade_type;
  typedef ::xsd::cxx::tree::traits< custoProfDisponibilidade_type, char > custoProfDisponibilidade_traits;

  const custoProfDisponibilidade_type&
  custoProfDisponibilidade () const;

  custoProfDisponibilidade_type&
  custoProfDisponibilidade ();

  void
  custoProfDisponibilidade (const custoProfDisponibilidade_type& x);

  // Constructors.
  //
  ItemParametrosPlanejamento (const modoOtimizacao_type&,
                              const cargaHorariaSemanalAluno_type&,
                              const alunosMesmoPeriodoNaMesmaSala_type&,
                              const permitirAlunosEmVariosCampi_type&,
                              const minimizarDeslocAluno_type&,
                              const cargaHorariaSemanalProfessor_type&,
                              const permitirProfessorEmVariosCampi_type&,
                              const minimizarDeslocProfessor_type&,
                              const minimizarHorariosVaziosProfessor_type&,
                              const evitarReducaoCargaHorariaProf_type&,
                              const evitarProfUltimoPrimeiroHor_type&,
                              const preferenciaProfessorDisciplina_type&,
                              const desempenhoProfDisponibilidade_type&,
                              const funcaoObjetivo_type&,
                              const considerarEquivalencia_type&,
                              const minAlunosAberturaTurmas_type&,
                              const niveisDificuldadeHorario_type&,
                              const equilibrarDiversidadeDiscDia_type&,
                              const regrasGenericasDivisaoCredito_type&,
                              const regrasEspecificasDivisaoCredito_type&,
                              const maximizarAvaliacaoCursosSel_type&,
                              const minimizarCustoDocenteCursosSel_type&,
                              const permiteCompartilhamentoTurmaSel_type&,
                              const percentuaisMinimoMestres_type&,
                              const percentuaisMinimoDoutores_type&,
                              const areaTitulacaoProfessorCurso_type&,
                              const maximoDisciplinasDeUmProfessorPorCurso_type&,
                              const custoProfDisponibilidade_type&);

  ItemParametrosPlanejamento (const modoOtimizacao_type&,
                              ::std::auto_ptr< cargaHorariaSemanalAluno_type >&,
                              const alunosMesmoPeriodoNaMesmaSala_type&,
                              const permitirAlunosEmVariosCampi_type&,
                              const minimizarDeslocAluno_type&,
                              ::std::auto_ptr< cargaHorariaSemanalProfessor_type >&,
                              const permitirProfessorEmVariosCampi_type&,
                              const minimizarDeslocProfessor_type&,
                              const minimizarHorariosVaziosProfessor_type&,
                              const evitarReducaoCargaHorariaProf_type&,
                              const evitarProfUltimoPrimeiroHor_type&,
                              const preferenciaProfessorDisciplina_type&,
                              const desempenhoProfDisponibilidade_type&,
                              const funcaoObjetivo_type&,
                              const considerarEquivalencia_type&,
                              const minAlunosAberturaTurmas_type&,
                              ::std::auto_ptr< niveisDificuldadeHorario_type >&,
                              const equilibrarDiversidadeDiscDia_type&,
                              const regrasGenericasDivisaoCredito_type&,
                              const regrasEspecificasDivisaoCredito_type&,
                              const maximizarAvaliacaoCursosSel_type&,
                              const minimizarCustoDocenteCursosSel_type&,
                              const permiteCompartilhamentoTurmaSel_type&,
                              const percentuaisMinimoMestres_type&,
                              const percentuaisMinimoDoutores_type&,
                              const areaTitulacaoProfessorCurso_type&,
                              const maximoDisciplinasDeUmProfessorPorCurso_type&,
                              const custoProfDisponibilidade_type&);

  ItemParametrosPlanejamento (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  ItemParametrosPlanejamento (const ItemParametrosPlanejamento& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  virtual ItemParametrosPlanejamento*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemParametrosPlanejamento ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< modoOtimizacao_type > modoOtimizacao_;
  ::xsd::cxx::tree::one< cargaHorariaSemanalAluno_type > cargaHorariaSemanalAluno_;
  ::xsd::cxx::tree::one< alunosMesmoPeriodoNaMesmaSala_type > alunosMesmoPeriodoNaMesmaSala_;
  ::xsd::cxx::tree::one< permitirAlunosEmVariosCampi_type > permitirAlunosEmVariosCampi_;
  ::xsd::cxx::tree::one< minimizarDeslocAluno_type > minimizarDeslocAluno_;
  ::xsd::cxx::tree::one< cargaHorariaSemanalProfessor_type > cargaHorariaSemanalProfessor_;
  ::xsd::cxx::tree::one< permitirProfessorEmVariosCampi_type > permitirProfessorEmVariosCampi_;
  ::xsd::cxx::tree::one< minimizarDeslocProfessor_type > minimizarDeslocProfessor_;
  maxDeslocProfessor_optional maxDeslocProfessor_;
  ::xsd::cxx::tree::one< minimizarHorariosVaziosProfessor_type > minimizarHorariosVaziosProfessor_;
  ::xsd::cxx::tree::one< evitarReducaoCargaHorariaProf_type > evitarReducaoCargaHorariaProf_;
  evitarReducaoCargaHorariaProfValor_optional evitarReducaoCargaHorariaProfValor_;
  ::xsd::cxx::tree::one< evitarProfUltimoPrimeiroHor_type > evitarProfUltimoPrimeiroHor_;
  ::xsd::cxx::tree::one< preferenciaProfessorDisciplina_type > preferenciaProfessorDisciplina_;
  ::xsd::cxx::tree::one< desempenhoProfDisponibilidade_type > desempenhoProfDisponibilidade_;
  ::xsd::cxx::tree::one< funcaoObjetivo_type > funcaoObjetivo_;
  ::xsd::cxx::tree::one< considerarEquivalencia_type > considerarEquivalencia_;
  ::xsd::cxx::tree::one< minAlunosAberturaTurmas_type > minAlunosAberturaTurmas_;
  minAlunosAberturaTurmasValor_optional minAlunosAberturaTurmasValor_;
  ::xsd::cxx::tree::one< niveisDificuldadeHorario_type > niveisDificuldadeHorario_;
  ::xsd::cxx::tree::one< equilibrarDiversidadeDiscDia_type > equilibrarDiversidadeDiscDia_;
  ::xsd::cxx::tree::one< regrasGenericasDivisaoCredito_type > regrasGenericasDivisaoCredito_;
  ::xsd::cxx::tree::one< regrasEspecificasDivisaoCredito_type > regrasEspecificasDivisaoCredito_;
  ::xsd::cxx::tree::one< maximizarAvaliacaoCursosSel_type > maximizarAvaliacaoCursosSel_;
  maximizarAvaliacaoCursos_optional maximizarAvaliacaoCursos_;
  ::xsd::cxx::tree::one< minimizarCustoDocenteCursosSel_type > minimizarCustoDocenteCursosSel_;
  minimizarCustoDocenteCursos_optional minimizarCustoDocenteCursos_;
  ::xsd::cxx::tree::one< permiteCompartilhamentoTurmaSel_type > permiteCompartilhamentoTurmaSel_;
  permiteCompartilhamentoTurma_optional permiteCompartilhamentoTurma_;
  ::xsd::cxx::tree::one< percentuaisMinimoMestres_type > percentuaisMinimoMestres_;
  ::xsd::cxx::tree::one< percentuaisMinimoDoutores_type > percentuaisMinimoDoutores_;
  ::xsd::cxx::tree::one< areaTitulacaoProfessorCurso_type > areaTitulacaoProfessorCurso_;
  ::xsd::cxx::tree::one< maximoDisciplinasDeUmProfessorPorCurso_type > maximoDisciplinasDeUmProfessorPorCurso_;
  ::xsd::cxx::tree::one< custoProfDisponibilidade_type > custoProfDisponibilidade_;
};

class ItemNivelDificuldadeHorario: public ::xml_schema::type
{
  public:
  // nivelDificuldadeId
  // 
  typedef ::xml_schema::int_ nivelDificuldadeId_type;
  typedef ::xsd::cxx::tree::traits< nivelDificuldadeId_type, char > nivelDificuldadeId_traits;

  const nivelDificuldadeId_type&
  nivelDificuldadeId () const;

  nivelDificuldadeId_type&
  nivelDificuldadeId ();

  void
  nivelDificuldadeId (const nivelDificuldadeId_type& x);

  // horariosAula
  // 
  typedef ::GrupoIdentificador horariosAula_type;
  typedef ::xsd::cxx::tree::traits< horariosAula_type, char > horariosAula_traits;

  const horariosAula_type&
  horariosAula () const;

  horariosAula_type&
  horariosAula ();

  void
  horariosAula (const horariosAula_type& x);

  void
  horariosAula (::std::auto_ptr< horariosAula_type > p);

  // Constructors.
  //
  ItemNivelDificuldadeHorario (const nivelDificuldadeId_type&,
                               const horariosAula_type&);

  ItemNivelDificuldadeHorario (const nivelDificuldadeId_type&,
                               ::std::auto_ptr< horariosAula_type >&);

  ItemNivelDificuldadeHorario (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  ItemNivelDificuldadeHorario (const ItemNivelDificuldadeHorario& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  virtual ItemNivelDificuldadeHorario*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemNivelDificuldadeHorario ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< nivelDificuldadeId_type > nivelDificuldadeId_;
  ::xsd::cxx::tree::one< horariosAula_type > horariosAula_;
};

class GrupoCalendario: public ::xml_schema::type
{
  public:
  // Calendario
  // 
  typedef ::ItemCalendario Calendario_type;
  typedef ::xsd::cxx::tree::sequence< Calendario_type > Calendario_sequence;
  typedef Calendario_sequence::iterator Calendario_iterator;
  typedef Calendario_sequence::const_iterator Calendario_const_iterator;
  typedef ::xsd::cxx::tree::traits< Calendario_type, char > Calendario_traits;

  const Calendario_sequence&
  Calendario () const;

  Calendario_sequence&
  Calendario ();

  void
  Calendario (const Calendario_sequence& s);

  // Constructors.
  //
  GrupoCalendario ();

  GrupoCalendario (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  GrupoCalendario (const GrupoCalendario& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual GrupoCalendario*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoCalendario ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Calendario_sequence Calendario_;
};

class GrupoAlunoDemanda: public ::xml_schema::type
{
  public:
  // AlunoDemanda
  // 
  typedef ::ItemAlunoDemanda AlunoDemanda_type;
  typedef ::xsd::cxx::tree::sequence< AlunoDemanda_type > AlunoDemanda_sequence;
  typedef AlunoDemanda_sequence::iterator AlunoDemanda_iterator;
  typedef AlunoDemanda_sequence::const_iterator AlunoDemanda_const_iterator;
  typedef ::xsd::cxx::tree::traits< AlunoDemanda_type, char > AlunoDemanda_traits;

  const AlunoDemanda_sequence&
  AlunoDemanda () const;

  AlunoDemanda_sequence&
  AlunoDemanda ();

  void
  AlunoDemanda (const AlunoDemanda_sequence& s);

  // Constructors.
  //
  GrupoAlunoDemanda ();

  GrupoAlunoDemanda (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  GrupoAlunoDemanda (const GrupoAlunoDemanda& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual GrupoAlunoDemanda*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoAlunoDemanda ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  AlunoDemanda_sequence AlunoDemanda_;
};

class GrupoTurno: public ::xml_schema::type
{
  public:
  // Turno
  // 
  typedef ::ItemTurno Turno_type;
  typedef ::xsd::cxx::tree::sequence< Turno_type > Turno_sequence;
  typedef Turno_sequence::iterator Turno_iterator;
  typedef Turno_sequence::const_iterator Turno_const_iterator;
  typedef ::xsd::cxx::tree::traits< Turno_type, char > Turno_traits;

  const Turno_sequence&
  Turno () const;

  Turno_sequence&
  Turno ();

  void
  Turno (const Turno_sequence& s);

  // Constructors.
  //
  GrupoTurno ();

  GrupoTurno (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  GrupoTurno (const GrupoTurno& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual GrupoTurno*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoTurno ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Turno_sequence Turno_;
};

class GrupoHorarioAula: public ::xml_schema::type
{
  public:
  // HorarioAula
  // 
  typedef ::ItemHorarioAula HorarioAula_type;
  typedef ::xsd::cxx::tree::sequence< HorarioAula_type > HorarioAula_sequence;
  typedef HorarioAula_sequence::iterator HorarioAula_iterator;
  typedef HorarioAula_sequence::const_iterator HorarioAula_const_iterator;
  typedef ::xsd::cxx::tree::traits< HorarioAula_type, char > HorarioAula_traits;

  const HorarioAula_sequence&
  HorarioAula () const;

  HorarioAula_sequence&
  HorarioAula ();

  void
  HorarioAula (const HorarioAula_sequence& s);

  // Constructors.
  //
  GrupoHorarioAula ();

  GrupoHorarioAula (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  GrupoHorarioAula (const GrupoHorarioAula& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual GrupoHorarioAula*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoHorarioAula ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  HorarioAula_sequence HorarioAula_;
};

class GrupoDiaSemana: public ::xml_schema::type
{
  public:
  // diaSemana
  // 
  typedef ::xml_schema::int_ diaSemana_type;
  typedef ::xsd::cxx::tree::sequence< diaSemana_type > diaSemana_sequence;
  typedef diaSemana_sequence::iterator diaSemana_iterator;
  typedef diaSemana_sequence::const_iterator diaSemana_const_iterator;
  typedef ::xsd::cxx::tree::traits< diaSemana_type, char > diaSemana_traits;

  const diaSemana_sequence&
  diaSemana () const;

  diaSemana_sequence&
  diaSemana ();

  void
  diaSemana (const diaSemana_sequence& s);

  // Constructors.
  //
  GrupoDiaSemana ();

  GrupoDiaSemana (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  GrupoDiaSemana (const GrupoDiaSemana& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual GrupoDiaSemana*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoDiaSemana ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  diaSemana_sequence diaSemana_;
};

class GrupoTipoSala: public ::xml_schema::type
{
  public:
  // TipoSala
  // 
  typedef ::ItemTipoSala TipoSala_type;
  typedef ::xsd::cxx::tree::sequence< TipoSala_type > TipoSala_sequence;
  typedef TipoSala_sequence::iterator TipoSala_iterator;
  typedef TipoSala_sequence::const_iterator TipoSala_const_iterator;
  typedef ::xsd::cxx::tree::traits< TipoSala_type, char > TipoSala_traits;

  const TipoSala_sequence&
  TipoSala () const;

  TipoSala_sequence&
  TipoSala ();

  void
  TipoSala (const TipoSala_sequence& s);

  // Constructors.
  //
  GrupoTipoSala ();

  GrupoTipoSala (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  GrupoTipoSala (const GrupoTipoSala& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual GrupoTipoSala*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoTipoSala ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  TipoSala_sequence TipoSala_;
};

class GrupoTipoContrato: public ::xml_schema::type
{
  public:
  // TipoContrato
  // 
  typedef ::ItemTipoContrato TipoContrato_type;
  typedef ::xsd::cxx::tree::sequence< TipoContrato_type > TipoContrato_sequence;
  typedef TipoContrato_sequence::iterator TipoContrato_iterator;
  typedef TipoContrato_sequence::const_iterator TipoContrato_const_iterator;
  typedef ::xsd::cxx::tree::traits< TipoContrato_type, char > TipoContrato_traits;

  const TipoContrato_sequence&
  TipoContrato () const;

  TipoContrato_sequence&
  TipoContrato ();

  void
  TipoContrato (const TipoContrato_sequence& s);

  // Constructors.
  //
  GrupoTipoContrato ();

  GrupoTipoContrato (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  GrupoTipoContrato (const GrupoTipoContrato& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual GrupoTipoContrato*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoTipoContrato ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  TipoContrato_sequence TipoContrato_;
};

class GrupoTipoTitulacao: public ::xml_schema::type
{
  public:
  // TipoTitulacao
  // 
  typedef ::ItemTipoTitulacao TipoTitulacao_type;
  typedef ::xsd::cxx::tree::sequence< TipoTitulacao_type > TipoTitulacao_sequence;
  typedef TipoTitulacao_sequence::iterator TipoTitulacao_iterator;
  typedef TipoTitulacao_sequence::const_iterator TipoTitulacao_const_iterator;
  typedef ::xsd::cxx::tree::traits< TipoTitulacao_type, char > TipoTitulacao_traits;

  const TipoTitulacao_sequence&
  TipoTitulacao () const;

  TipoTitulacao_sequence&
  TipoTitulacao ();

  void
  TipoTitulacao (const TipoTitulacao_sequence& s);

  // Constructors.
  //
  GrupoTipoTitulacao ();

  GrupoTipoTitulacao (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  GrupoTipoTitulacao (const GrupoTipoTitulacao& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual GrupoTipoTitulacao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoTipoTitulacao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  TipoTitulacao_sequence TipoTitulacao_;
};

class GrupoAreaTitulacao: public ::xml_schema::type
{
  public:
  // AreaTitulacao
  // 
  typedef ::ItemAreaTitulacao AreaTitulacao_type;
  typedef ::xsd::cxx::tree::sequence< AreaTitulacao_type > AreaTitulacao_sequence;
  typedef AreaTitulacao_sequence::iterator AreaTitulacao_iterator;
  typedef AreaTitulacao_sequence::const_iterator AreaTitulacao_const_iterator;
  typedef ::xsd::cxx::tree::traits< AreaTitulacao_type, char > AreaTitulacao_traits;

  const AreaTitulacao_sequence&
  AreaTitulacao () const;

  AreaTitulacao_sequence&
  AreaTitulacao ();

  void
  AreaTitulacao (const AreaTitulacao_sequence& s);

  // Constructors.
  //
  GrupoAreaTitulacao ();

  GrupoAreaTitulacao (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  GrupoAreaTitulacao (const GrupoAreaTitulacao& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual GrupoAreaTitulacao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoAreaTitulacao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  AreaTitulacao_sequence AreaTitulacao_;
};

class GrupoTipoDisciplina: public ::xml_schema::type
{
  public:
  // TipoDisciplina
  // 
  typedef ::ItemTipoDisciplina TipoDisciplina_type;
  typedef ::xsd::cxx::tree::sequence< TipoDisciplina_type > TipoDisciplina_sequence;
  typedef TipoDisciplina_sequence::iterator TipoDisciplina_iterator;
  typedef TipoDisciplina_sequence::const_iterator TipoDisciplina_const_iterator;
  typedef ::xsd::cxx::tree::traits< TipoDisciplina_type, char > TipoDisciplina_traits;

  const TipoDisciplina_sequence&
  TipoDisciplina () const;

  TipoDisciplina_sequence&
  TipoDisciplina ();

  void
  TipoDisciplina (const TipoDisciplina_sequence& s);

  // Constructors.
  //
  GrupoTipoDisciplina ();

  GrupoTipoDisciplina (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  GrupoTipoDisciplina (const GrupoTipoDisciplina& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual GrupoTipoDisciplina*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoTipoDisciplina ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  TipoDisciplina_sequence TipoDisciplina_;
};

class GrupoNivelDificuldade: public ::xml_schema::type
{
  public:
  // NivelDificuldade
  // 
  typedef ::ItemNivelDificuldade NivelDificuldade_type;
  typedef ::xsd::cxx::tree::sequence< NivelDificuldade_type > NivelDificuldade_sequence;
  typedef NivelDificuldade_sequence::iterator NivelDificuldade_iterator;
  typedef NivelDificuldade_sequence::const_iterator NivelDificuldade_const_iterator;
  typedef ::xsd::cxx::tree::traits< NivelDificuldade_type, char > NivelDificuldade_traits;

  const NivelDificuldade_sequence&
  NivelDificuldade () const;

  NivelDificuldade_sequence&
  NivelDificuldade ();

  void
  NivelDificuldade (const NivelDificuldade_sequence& s);

  // Constructors.
  //
  GrupoNivelDificuldade ();

  GrupoNivelDificuldade (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  GrupoNivelDificuldade (const GrupoNivelDificuldade& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual GrupoNivelDificuldade*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoNivelDificuldade ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  NivelDificuldade_sequence NivelDificuldade_;
};

class GrupoTipoCurso: public ::xml_schema::type
{
  public:
  // TipoCurso
  // 
  typedef ::ItemTipoCurso TipoCurso_type;
  typedef ::xsd::cxx::tree::sequence< TipoCurso_type > TipoCurso_sequence;
  typedef TipoCurso_sequence::iterator TipoCurso_iterator;
  typedef TipoCurso_sequence::const_iterator TipoCurso_const_iterator;
  typedef ::xsd::cxx::tree::traits< TipoCurso_type, char > TipoCurso_traits;

  const TipoCurso_sequence&
  TipoCurso () const;

  TipoCurso_sequence&
  TipoCurso ();

  void
  TipoCurso (const TipoCurso_sequence& s);

  // Constructors.
  //
  GrupoTipoCurso ();

  GrupoTipoCurso (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  GrupoTipoCurso (const GrupoTipoCurso& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual GrupoTipoCurso*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoTipoCurso ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  TipoCurso_sequence TipoCurso_;
};

class GrupoDivisaoCreditos: public ::xml_schema::type
{
  public:
  // DivisaoCreditos
  // 
  typedef ::ItemDivisaoCreditos DivisaoCreditos_type;
  typedef ::xsd::cxx::tree::sequence< DivisaoCreditos_type > DivisaoCreditos_sequence;
  typedef DivisaoCreditos_sequence::iterator DivisaoCreditos_iterator;
  typedef DivisaoCreditos_sequence::const_iterator DivisaoCreditos_const_iterator;
  typedef ::xsd::cxx::tree::traits< DivisaoCreditos_type, char > DivisaoCreditos_traits;

  const DivisaoCreditos_sequence&
  DivisaoCreditos () const;

  DivisaoCreditos_sequence&
  DivisaoCreditos ();

  void
  DivisaoCreditos (const DivisaoCreditos_sequence& s);

  // Constructors.
  //
  GrupoDivisaoCreditos ();

  GrupoDivisaoCreditos (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  GrupoDivisaoCreditos (const GrupoDivisaoCreditos& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual GrupoDivisaoCreditos*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoDivisaoCreditos ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  DivisaoCreditos_sequence DivisaoCreditos_;
};

class GrupoCampus: public ::xml_schema::type
{
  public:
  // Campus
  // 
  typedef ::ItemCampus Campus_type;
  typedef ::xsd::cxx::tree::sequence< Campus_type > Campus_sequence;
  typedef Campus_sequence::iterator Campus_iterator;
  typedef Campus_sequence::const_iterator Campus_const_iterator;
  typedef ::xsd::cxx::tree::traits< Campus_type, char > Campus_traits;

  const Campus_sequence&
  Campus () const;

  Campus_sequence&
  Campus ();

  void
  Campus (const Campus_sequence& s);

  // Constructors.
  //
  GrupoCampus ();

  GrupoCampus (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  GrupoCampus (const GrupoCampus& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual GrupoCampus*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoCampus ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Campus_sequence Campus_;
};

class GrupoUnidade: public ::xml_schema::type
{
  public:
  // Unidade
  // 
  typedef ::ItemUnidade Unidade_type;
  typedef ::xsd::cxx::tree::sequence< Unidade_type > Unidade_sequence;
  typedef Unidade_sequence::iterator Unidade_iterator;
  typedef Unidade_sequence::const_iterator Unidade_const_iterator;
  typedef ::xsd::cxx::tree::traits< Unidade_type, char > Unidade_traits;

  const Unidade_sequence&
  Unidade () const;

  Unidade_sequence&
  Unidade ();

  void
  Unidade (const Unidade_sequence& s);

  // Constructors.
  //
  GrupoUnidade ();

  GrupoUnidade (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  GrupoUnidade (const GrupoUnidade& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual GrupoUnidade*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoUnidade ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Unidade_sequence Unidade_;
};

class GrupoHorario: public ::xml_schema::type
{
  public:
  // Horario
  // 
  typedef ::ItemHorario Horario_type;
  typedef ::xsd::cxx::tree::sequence< Horario_type > Horario_sequence;
  typedef Horario_sequence::iterator Horario_iterator;
  typedef Horario_sequence::const_iterator Horario_const_iterator;
  typedef ::xsd::cxx::tree::traits< Horario_type, char > Horario_traits;

  const Horario_sequence&
  Horario () const;

  Horario_sequence&
  Horario ();

  void
  Horario (const Horario_sequence& s);

  // Constructors.
  //
  GrupoHorario ();

  GrupoHorario (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  GrupoHorario (const GrupoHorario& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual GrupoHorario*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoHorario ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Horario_sequence Horario_;
};

class GrupoSala: public ::xml_schema::type
{
  public:
  // Sala
  // 
  typedef ::ItemSala Sala_type;
  typedef ::xsd::cxx::tree::sequence< Sala_type > Sala_sequence;
  typedef Sala_sequence::iterator Sala_iterator;
  typedef Sala_sequence::const_iterator Sala_const_iterator;
  typedef ::xsd::cxx::tree::traits< Sala_type, char > Sala_traits;

  const Sala_sequence&
  Sala () const;

  Sala_sequence&
  Sala ();

  void
  Sala (const Sala_sequence& s);

  // Constructors.
  //
  GrupoSala ();

  GrupoSala (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  GrupoSala (const GrupoSala& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual GrupoSala*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoSala ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Sala_sequence Sala_;
};

class GrupoCreditoDisponivel: public ::xml_schema::type
{
  public:
  // CreditoDisponivel
  // 
  typedef ::ItemCreditoDisponivel CreditoDisponivel_type;
  typedef ::xsd::cxx::tree::sequence< CreditoDisponivel_type > CreditoDisponivel_sequence;
  typedef CreditoDisponivel_sequence::iterator CreditoDisponivel_iterator;
  typedef CreditoDisponivel_sequence::const_iterator CreditoDisponivel_const_iterator;
  typedef ::xsd::cxx::tree::traits< CreditoDisponivel_type, char > CreditoDisponivel_traits;

  const CreditoDisponivel_sequence&
  CreditoDisponivel () const;

  CreditoDisponivel_sequence&
  CreditoDisponivel ();

  void
  CreditoDisponivel (const CreditoDisponivel_sequence& s);

  // Constructors.
  //
  GrupoCreditoDisponivel ();

  GrupoCreditoDisponivel (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  GrupoCreditoDisponivel (const GrupoCreditoDisponivel& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual GrupoCreditoDisponivel*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoCreditoDisponivel ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  CreditoDisponivel_sequence CreditoDisponivel_;
};

class GrupoProfessor: public ::xml_schema::type
{
  public:
  // Professor
  // 
  typedef ::ItemProfessor Professor_type;
  typedef ::xsd::cxx::tree::sequence< Professor_type > Professor_sequence;
  typedef Professor_sequence::iterator Professor_iterator;
  typedef Professor_sequence::const_iterator Professor_const_iterator;
  typedef ::xsd::cxx::tree::traits< Professor_type, char > Professor_traits;

  const Professor_sequence&
  Professor () const;

  Professor_sequence&
  Professor ();

  void
  Professor (const Professor_sequence& s);

  // Constructors.
  //
  GrupoProfessor ();

  GrupoProfessor (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  GrupoProfessor (const GrupoProfessor& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual GrupoProfessor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoProfessor ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Professor_sequence Professor_;
};

class GrupoProfessorDisciplina: public ::xml_schema::type
{
  public:
  // ProfessorDisciplina
  // 
  typedef ::ItemProfessorDisciplina ProfessorDisciplina_type;
  typedef ::xsd::cxx::tree::sequence< ProfessorDisciplina_type > ProfessorDisciplina_sequence;
  typedef ProfessorDisciplina_sequence::iterator ProfessorDisciplina_iterator;
  typedef ProfessorDisciplina_sequence::const_iterator ProfessorDisciplina_const_iterator;
  typedef ::xsd::cxx::tree::traits< ProfessorDisciplina_type, char > ProfessorDisciplina_traits;

  const ProfessorDisciplina_sequence&
  ProfessorDisciplina () const;

  ProfessorDisciplina_sequence&
  ProfessorDisciplina ();

  void
  ProfessorDisciplina (const ProfessorDisciplina_sequence& s);

  // Constructors.
  //
  GrupoProfessorDisciplina ();

  GrupoProfessorDisciplina (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  GrupoProfessorDisciplina (const GrupoProfessorDisciplina& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual GrupoProfessorDisciplina*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoProfessorDisciplina ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ProfessorDisciplina_sequence ProfessorDisciplina_;
};

class GrupoDeslocamento: public ::xml_schema::type
{
  public:
  // Deslocamento
  // 
  typedef ::ItemDeslocamento Deslocamento_type;
  typedef ::xsd::cxx::tree::sequence< Deslocamento_type > Deslocamento_sequence;
  typedef Deslocamento_sequence::iterator Deslocamento_iterator;
  typedef Deslocamento_sequence::const_iterator Deslocamento_const_iterator;
  typedef ::xsd::cxx::tree::traits< Deslocamento_type, char > Deslocamento_traits;

  const Deslocamento_sequence&
  Deslocamento () const;

  Deslocamento_sequence&
  Deslocamento ();

  void
  Deslocamento (const Deslocamento_sequence& s);

  // Constructors.
  //
  GrupoDeslocamento ();

  GrupoDeslocamento (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  GrupoDeslocamento (const GrupoDeslocamento& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual GrupoDeslocamento*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoDeslocamento ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Deslocamento_sequence Deslocamento_;
};

class GrupoDisciplina: public ::xml_schema::type
{
  public:
  // Disciplina
  // 
  typedef ::ItemDisciplina Disciplina_type;
  typedef ::xsd::cxx::tree::sequence< Disciplina_type > Disciplina_sequence;
  typedef Disciplina_sequence::iterator Disciplina_iterator;
  typedef Disciplina_sequence::const_iterator Disciplina_const_iterator;
  typedef ::xsd::cxx::tree::traits< Disciplina_type, char > Disciplina_traits;

  const Disciplina_sequence&
  Disciplina () const;

  Disciplina_sequence&
  Disciplina ();

  void
  Disciplina (const Disciplina_sequence& s);

  // Constructors.
  //
  GrupoDisciplina ();

  GrupoDisciplina (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  GrupoDisciplina (const GrupoDisciplina& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual GrupoDisciplina*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoDisciplina ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Disciplina_sequence Disciplina_;
};

class GrupoCurso: public ::xml_schema::type
{
  public:
  // Curso
  // 
  typedef ::ItemCurso Curso_type;
  typedef ::xsd::cxx::tree::sequence< Curso_type > Curso_sequence;
  typedef Curso_sequence::iterator Curso_iterator;
  typedef Curso_sequence::const_iterator Curso_const_iterator;
  typedef ::xsd::cxx::tree::traits< Curso_type, char > Curso_traits;

  const Curso_sequence&
  Curso () const;

  Curso_sequence&
  Curso ();

  void
  Curso (const Curso_sequence& s);

  // Constructors.
  //
  GrupoCurso ();

  GrupoCurso (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  GrupoCurso (const GrupoCurso& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual GrupoCurso*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoCurso ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Curso_sequence Curso_;
};

class GrupoCurriculo: public ::xml_schema::type
{
  public:
  // Curriculo
  // 
  typedef ::ItemCurriculo Curriculo_type;
  typedef ::xsd::cxx::tree::sequence< Curriculo_type > Curriculo_sequence;
  typedef Curriculo_sequence::iterator Curriculo_iterator;
  typedef Curriculo_sequence::const_iterator Curriculo_const_iterator;
  typedef ::xsd::cxx::tree::traits< Curriculo_type, char > Curriculo_traits;

  const Curriculo_sequence&
  Curriculo () const;

  Curriculo_sequence&
  Curriculo ();

  void
  Curriculo (const Curriculo_sequence& s);

  // Constructors.
  //
  GrupoCurriculo ();

  GrupoCurriculo (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  GrupoCurriculo (const GrupoCurriculo& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual GrupoCurriculo*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoCurriculo ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Curriculo_sequence Curriculo_;
};

class GrupoDisciplinaPeriodo: public ::xml_schema::type
{
  public:
  // DisciplinaPeriodo
  // 
  typedef ::ItemDisciplinaPeriodo DisciplinaPeriodo_type;
  typedef ::xsd::cxx::tree::sequence< DisciplinaPeriodo_type > DisciplinaPeriodo_sequence;
  typedef DisciplinaPeriodo_sequence::iterator DisciplinaPeriodo_iterator;
  typedef DisciplinaPeriodo_sequence::const_iterator DisciplinaPeriodo_const_iterator;
  typedef ::xsd::cxx::tree::traits< DisciplinaPeriodo_type, char > DisciplinaPeriodo_traits;

  const DisciplinaPeriodo_sequence&
  DisciplinaPeriodo () const;

  DisciplinaPeriodo_sequence&
  DisciplinaPeriodo ();

  void
  DisciplinaPeriodo (const DisciplinaPeriodo_sequence& s);

  // Constructors.
  //
  GrupoDisciplinaPeriodo ();

  GrupoDisciplinaPeriodo (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  GrupoDisciplinaPeriodo (const GrupoDisciplinaPeriodo& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual GrupoDisciplinaPeriodo*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoDisciplinaPeriodo ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  DisciplinaPeriodo_sequence DisciplinaPeriodo_;
};

class GrupoOfertaCurso: public ::xml_schema::type
{
  public:
  // OfertaCurso
  // 
  typedef ::ItemOfertaCurso OfertaCurso_type;
  typedef ::xsd::cxx::tree::sequence< OfertaCurso_type > OfertaCurso_sequence;
  typedef OfertaCurso_sequence::iterator OfertaCurso_iterator;
  typedef OfertaCurso_sequence::const_iterator OfertaCurso_const_iterator;
  typedef ::xsd::cxx::tree::traits< OfertaCurso_type, char > OfertaCurso_traits;

  const OfertaCurso_sequence&
  OfertaCurso () const;

  OfertaCurso_sequence&
  OfertaCurso ();

  void
  OfertaCurso (const OfertaCurso_sequence& s);

  // Constructors.
  //
  GrupoOfertaCurso ();

  GrupoOfertaCurso (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  GrupoOfertaCurso (const GrupoOfertaCurso& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual GrupoOfertaCurso*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoOfertaCurso ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  OfertaCurso_sequence OfertaCurso_;
};

class GrupoDemanda: public ::xml_schema::type
{
  public:
  // Demanda
  // 
  typedef ::ItemDemanda Demanda_type;
  typedef ::xsd::cxx::tree::sequence< Demanda_type > Demanda_sequence;
  typedef Demanda_sequence::iterator Demanda_iterator;
  typedef Demanda_sequence::const_iterator Demanda_const_iterator;
  typedef ::xsd::cxx::tree::traits< Demanda_type, char > Demanda_traits;

  const Demanda_sequence&
  Demanda () const;

  Demanda_sequence&
  Demanda ();

  void
  Demanda (const Demanda_sequence& s);

  // Constructors.
  //
  GrupoDemanda ();

  GrupoDemanda (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  GrupoDemanda (const GrupoDemanda& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual GrupoDemanda*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoDemanda ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Demanda_sequence Demanda_;
};

class GrupoFixacao: public ::xml_schema::type
{
  public:
  // Fixacao
  // 
  typedef ::ItemFixacao Fixacao_type;
  typedef ::xsd::cxx::tree::sequence< Fixacao_type > Fixacao_sequence;
  typedef Fixacao_sequence::iterator Fixacao_iterator;
  typedef Fixacao_sequence::const_iterator Fixacao_const_iterator;
  typedef ::xsd::cxx::tree::traits< Fixacao_type, char > Fixacao_traits;

  const Fixacao_sequence&
  Fixacao () const;

  Fixacao_sequence&
  Fixacao ();

  void
  Fixacao (const Fixacao_sequence& s);

  // Constructors.
  //
  GrupoFixacao ();

  GrupoFixacao (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  GrupoFixacao (const GrupoFixacao& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual GrupoFixacao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoFixacao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Fixacao_sequence Fixacao_;
};

class GrupoNivelDificuldadeHorario: public ::xml_schema::type
{
  public:
  // NivelDificuldadeHorario
  // 
  typedef ::ItemNivelDificuldadeHorario NivelDificuldadeHorario_type;
  typedef ::xsd::cxx::tree::sequence< NivelDificuldadeHorario_type > NivelDificuldadeHorario_sequence;
  typedef NivelDificuldadeHorario_sequence::iterator NivelDificuldadeHorario_iterator;
  typedef NivelDificuldadeHorario_sequence::const_iterator NivelDificuldadeHorario_const_iterator;
  typedef ::xsd::cxx::tree::traits< NivelDificuldadeHorario_type, char > NivelDificuldadeHorario_traits;

  const NivelDificuldadeHorario_sequence&
  NivelDificuldadeHorario () const;

  NivelDificuldadeHorario_sequence&
  NivelDificuldadeHorario ();

  void
  NivelDificuldadeHorario (const NivelDificuldadeHorario_sequence& s);

  // Constructors.
  //
  GrupoNivelDificuldadeHorario ();

  GrupoNivelDificuldadeHorario (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  GrupoNivelDificuldadeHorario (const GrupoNivelDificuldadeHorario& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  virtual GrupoNivelDificuldadeHorario*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoNivelDificuldadeHorario ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  NivelDificuldadeHorario_sequence NivelDificuldadeHorario_;
};

class GrupoIdentificador: public ::xml_schema::type
{
  public:
  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::sequence< id_type > id_sequence;
  typedef id_sequence::iterator id_iterator;
  typedef id_sequence::const_iterator id_const_iterator;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_sequence&
  id () const;

  id_sequence&
  id ();

  void
  id (const id_sequence& s);

  // Constructors.
  //
  GrupoIdentificador ();

  GrupoIdentificador (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  GrupoIdentificador (const GrupoIdentificador& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual GrupoIdentificador*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoIdentificador ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  id_sequence id_;
};

class GrupoGrupo: public ::xml_schema::type
{
  public:
  // GrupoIdentificador
  // 
  typedef ::GrupoIdentificador GrupoIdentificador_type;
  typedef ::xsd::cxx::tree::sequence< GrupoIdentificador_type > GrupoIdentificador_sequence;
  typedef GrupoIdentificador_sequence::iterator GrupoIdentificador_iterator;
  typedef GrupoIdentificador_sequence::const_iterator GrupoIdentificador_const_iterator;
  typedef ::xsd::cxx::tree::traits< GrupoIdentificador_type, char > GrupoIdentificador_traits;

  const GrupoIdentificador_sequence&
  GrupoIdentificador () const;

  GrupoIdentificador_sequence&
  GrupoIdentificador ();

  void
  GrupoIdentificador (const GrupoIdentificador_sequence& s);

  // Constructors.
  //
  GrupoGrupo ();

  GrupoGrupo (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  GrupoGrupo (const GrupoGrupo& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual GrupoGrupo*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoGrupo ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  GrupoIdentificador_sequence GrupoIdentificador_;
};

class ItemAtendimentoCampusSolucao: public ::xml_schema::type
{
  public:
  // campusId
  // 
  typedef ::xml_schema::int_ campusId_type;
  typedef ::xsd::cxx::tree::traits< campusId_type, char > campusId_traits;

  const campusId_type&
  campusId () const;

  campusId_type&
  campusId ();

  void
  campusId (const campusId_type& x);

  // campusCodigo
  // 
  typedef ::xml_schema::string campusCodigo_type;
  typedef ::xsd::cxx::tree::traits< campusCodigo_type, char > campusCodigo_traits;

  const campusCodigo_type&
  campusCodigo () const;

  campusCodigo_type&
  campusCodigo ();

  void
  campusCodigo (const campusCodigo_type& x);

  void
  campusCodigo (::std::auto_ptr< campusCodigo_type > p);

  // atendimentosUnidades
  // 
  typedef ::GrupoAtendimentoUnidadeSolucao atendimentosUnidades_type;
  typedef ::xsd::cxx::tree::traits< atendimentosUnidades_type, char > atendimentosUnidades_traits;

  const atendimentosUnidades_type&
  atendimentosUnidades () const;

  atendimentosUnidades_type&
  atendimentosUnidades ();

  void
  atendimentosUnidades (const atendimentosUnidades_type& x);

  void
  atendimentosUnidades (::std::auto_ptr< atendimentosUnidades_type > p);

  // Constructors.
  //
  ItemAtendimentoCampusSolucao (const campusId_type&,
                                const campusCodigo_type&,
                                const atendimentosUnidades_type&);

  ItemAtendimentoCampusSolucao (const campusId_type&,
                                const campusCodigo_type&,
                                ::std::auto_ptr< atendimentosUnidades_type >&);

  ItemAtendimentoCampusSolucao (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  ItemAtendimentoCampusSolucao (const ItemAtendimentoCampusSolucao& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  virtual ItemAtendimentoCampusSolucao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemAtendimentoCampusSolucao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< campusId_type > campusId_;
  ::xsd::cxx::tree::one< campusCodigo_type > campusCodigo_;
  ::xsd::cxx::tree::one< atendimentosUnidades_type > atendimentosUnidades_;
};

class ItemAtendimentoUnidadeSolucao: public ::xml_schema::type
{
  public:
  // unidadeId
  // 
  typedef ::xml_schema::int_ unidadeId_type;
  typedef ::xsd::cxx::tree::traits< unidadeId_type, char > unidadeId_traits;

  const unidadeId_type&
  unidadeId () const;

  unidadeId_type&
  unidadeId ();

  void
  unidadeId (const unidadeId_type& x);

  // unidadeCodigo
  // 
  typedef ::xml_schema::string unidadeCodigo_type;
  typedef ::xsd::cxx::tree::traits< unidadeCodigo_type, char > unidadeCodigo_traits;

  const unidadeCodigo_type&
  unidadeCodigo () const;

  unidadeCodigo_type&
  unidadeCodigo ();

  void
  unidadeCodigo (const unidadeCodigo_type& x);

  void
  unidadeCodigo (::std::auto_ptr< unidadeCodigo_type > p);

  // atendimentosSalas
  // 
  typedef ::GrupoAtendimentoSalaSolucao atendimentosSalas_type;
  typedef ::xsd::cxx::tree::traits< atendimentosSalas_type, char > atendimentosSalas_traits;

  const atendimentosSalas_type&
  atendimentosSalas () const;

  atendimentosSalas_type&
  atendimentosSalas ();

  void
  atendimentosSalas (const atendimentosSalas_type& x);

  void
  atendimentosSalas (::std::auto_ptr< atendimentosSalas_type > p);

  // Constructors.
  //
  ItemAtendimentoUnidadeSolucao (const unidadeId_type&,
                                 const unidadeCodigo_type&,
                                 const atendimentosSalas_type&);

  ItemAtendimentoUnidadeSolucao (const unidadeId_type&,
                                 const unidadeCodigo_type&,
                                 ::std::auto_ptr< atendimentosSalas_type >&);

  ItemAtendimentoUnidadeSolucao (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  ItemAtendimentoUnidadeSolucao (const ItemAtendimentoUnidadeSolucao& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  virtual ItemAtendimentoUnidadeSolucao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemAtendimentoUnidadeSolucao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< unidadeId_type > unidadeId_;
  ::xsd::cxx::tree::one< unidadeCodigo_type > unidadeCodigo_;
  ::xsd::cxx::tree::one< atendimentosSalas_type > atendimentosSalas_;
};

class ItemAtendimentoSalaSolucao: public ::xml_schema::type
{
  public:
  // salaId
  // 
  typedef ::xml_schema::int_ salaId_type;
  typedef ::xsd::cxx::tree::traits< salaId_type, char > salaId_traits;

  const salaId_type&
  salaId () const;

  salaId_type&
  salaId ();

  void
  salaId (const salaId_type& x);

  // salaNome
  // 
  typedef ::xml_schema::string salaNome_type;
  typedef ::xsd::cxx::tree::traits< salaNome_type, char > salaNome_traits;

  const salaNome_type&
  salaNome () const;

  salaNome_type&
  salaNome ();

  void
  salaNome (const salaNome_type& x);

  void
  salaNome (::std::auto_ptr< salaNome_type > p);

  // atendimentosDiasSemana
  // 
  typedef ::GrupoAtendimentoDiaSemanaSolucao atendimentosDiasSemana_type;
  typedef ::xsd::cxx::tree::traits< atendimentosDiasSemana_type, char > atendimentosDiasSemana_traits;

  const atendimentosDiasSemana_type&
  atendimentosDiasSemana () const;

  atendimentosDiasSemana_type&
  atendimentosDiasSemana ();

  void
  atendimentosDiasSemana (const atendimentosDiasSemana_type& x);

  void
  atendimentosDiasSemana (::std::auto_ptr< atendimentosDiasSemana_type > p);

  // Constructors.
  //
  ItemAtendimentoSalaSolucao (const salaId_type&,
                              const salaNome_type&,
                              const atendimentosDiasSemana_type&);

  ItemAtendimentoSalaSolucao (const salaId_type&,
                              const salaNome_type&,
                              ::std::auto_ptr< atendimentosDiasSemana_type >&);

  ItemAtendimentoSalaSolucao (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  ItemAtendimentoSalaSolucao (const ItemAtendimentoSalaSolucao& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

  virtual ItemAtendimentoSalaSolucao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemAtendimentoSalaSolucao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< salaId_type > salaId_;
  ::xsd::cxx::tree::one< salaNome_type > salaNome_;
  ::xsd::cxx::tree::one< atendimentosDiasSemana_type > atendimentosDiasSemana_;
};

class ItemAtendimentoDiaSemanaSolucao: public ::xml_schema::type
{
  public:
  // diaSemana
  // 
  typedef ::xml_schema::int_ diaSemana_type;
  typedef ::xsd::cxx::tree::traits< diaSemana_type, char > diaSemana_traits;

  const diaSemana_type&
  diaSemana () const;

  diaSemana_type&
  diaSemana ();

  void
  diaSemana (const diaSemana_type& x);

  // atendimentosTatico
  // 
  typedef ::GrupoAtendimentoTaticoSolucao atendimentosTatico_type;
  typedef ::xsd::cxx::tree::traits< atendimentosTatico_type, char > atendimentosTatico_traits;

  const atendimentosTatico_type&
  atendimentosTatico () const;

  atendimentosTatico_type&
  atendimentosTatico ();

  void
  atendimentosTatico (const atendimentosTatico_type& x);

  void
  atendimentosTatico (::std::auto_ptr< atendimentosTatico_type > p);

  // Constructors.
  //
  ItemAtendimentoDiaSemanaSolucao (const diaSemana_type&,
                                   const atendimentosTatico_type&);

  ItemAtendimentoDiaSemanaSolucao (const diaSemana_type&,
                                   ::std::auto_ptr< atendimentosTatico_type >&);

  ItemAtendimentoDiaSemanaSolucao (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

  ItemAtendimentoDiaSemanaSolucao (const ItemAtendimentoDiaSemanaSolucao& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

  virtual ItemAtendimentoDiaSemanaSolucao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemAtendimentoDiaSemanaSolucao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< diaSemana_type > diaSemana_;
  ::xsd::cxx::tree::one< atendimentosTatico_type > atendimentosTatico_;
};

class ItemAtendimentoOfertaSolucao: public ::xml_schema::type
{
  public:
  // ofertaCursoCampiId
  // 
  typedef ::xml_schema::int_ ofertaCursoCampiId_type;
  typedef ::xsd::cxx::tree::traits< ofertaCursoCampiId_type, char > ofertaCursoCampiId_traits;

  const ofertaCursoCampiId_type&
  ofertaCursoCampiId () const;

  ofertaCursoCampiId_type&
  ofertaCursoCampiId ();

  void
  ofertaCursoCampiId (const ofertaCursoCampiId_type& x);

  // disciplinaId
  // 
  typedef ::xml_schema::int_ disciplinaId_type;
  typedef ::xsd::cxx::tree::traits< disciplinaId_type, char > disciplinaId_traits;

  const disciplinaId_type&
  disciplinaId () const;

  disciplinaId_type&
  disciplinaId ();

  void
  disciplinaId (const disciplinaId_type& x);

  // quantidade
  // 
  typedef ::xml_schema::int_ quantidade_type;
  typedef ::xsd::cxx::tree::traits< quantidade_type, char > quantidade_traits;

  const quantidade_type&
  quantidade () const;

  quantidade_type&
  quantidade ();

  void
  quantidade (const quantidade_type& x);

  // turma
  // 
  typedef ::xml_schema::string turma_type;
  typedef ::xsd::cxx::tree::traits< turma_type, char > turma_traits;

  const turma_type&
  turma () const;

  turma_type&
  turma ();

  void
  turma (const turma_type& x);

  void
  turma (::std::auto_ptr< turma_type > p);

  // Constructors.
  //
  ItemAtendimentoOfertaSolucao (const ofertaCursoCampiId_type&,
                                const disciplinaId_type&,
                                const quantidade_type&,
                                const turma_type&);

  ItemAtendimentoOfertaSolucao (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  ItemAtendimentoOfertaSolucao (const ItemAtendimentoOfertaSolucao& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  virtual ItemAtendimentoOfertaSolucao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemAtendimentoOfertaSolucao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ofertaCursoCampiId_type > ofertaCursoCampiId_;
  ::xsd::cxx::tree::one< disciplinaId_type > disciplinaId_;
  ::xsd::cxx::tree::one< quantidade_type > quantidade_;
  ::xsd::cxx::tree::one< turma_type > turma_;
};

class ItemAtendimentoTaticoSolucao: public ::xml_schema::type
{
  public:
  // atendimentoOferta
  // 
  typedef ::ItemAtendimentoOfertaSolucao atendimentoOferta_type;
  typedef ::xsd::cxx::tree::traits< atendimentoOferta_type, char > atendimentoOferta_traits;

  const atendimentoOferta_type&
  atendimentoOferta () const;

  atendimentoOferta_type&
  atendimentoOferta ();

  void
  atendimentoOferta (const atendimentoOferta_type& x);

  void
  atendimentoOferta (::std::auto_ptr< atendimentoOferta_type > p);

  // qtdeCreditosTeoricos
  // 
  typedef ::xml_schema::int_ qtdeCreditosTeoricos_type;
  typedef ::xsd::cxx::tree::traits< qtdeCreditosTeoricos_type, char > qtdeCreditosTeoricos_traits;

  const qtdeCreditosTeoricos_type&
  qtdeCreditosTeoricos () const;

  qtdeCreditosTeoricos_type&
  qtdeCreditosTeoricos ();

  void
  qtdeCreditosTeoricos (const qtdeCreditosTeoricos_type& x);

  // qtdeCreditosPraticos
  // 
  typedef ::xml_schema::int_ qtdeCreditosPraticos_type;
  typedef ::xsd::cxx::tree::traits< qtdeCreditosPraticos_type, char > qtdeCreditosPraticos_traits;

  const qtdeCreditosPraticos_type&
  qtdeCreditosPraticos () const;

  qtdeCreditosPraticos_type&
  qtdeCreditosPraticos ();

  void
  qtdeCreditosPraticos (const qtdeCreditosPraticos_type& x);

  // Constructors.
  //
  ItemAtendimentoTaticoSolucao (const atendimentoOferta_type&,
                                const qtdeCreditosTeoricos_type&,
                                const qtdeCreditosPraticos_type&);

  ItemAtendimentoTaticoSolucao (::std::auto_ptr< atendimentoOferta_type >&,
                                const qtdeCreditosTeoricos_type&,
                                const qtdeCreditosPraticos_type&);

  ItemAtendimentoTaticoSolucao (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  ItemAtendimentoTaticoSolucao (const ItemAtendimentoTaticoSolucao& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  virtual ItemAtendimentoTaticoSolucao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~ItemAtendimentoTaticoSolucao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< atendimentoOferta_type > atendimentoOferta_;
  ::xsd::cxx::tree::one< qtdeCreditosTeoricos_type > qtdeCreditosTeoricos_;
  ::xsd::cxx::tree::one< qtdeCreditosPraticos_type > qtdeCreditosPraticos_;
};

class GrupoAtendimentoCampusSolucao: public ::xml_schema::type
{
  public:
  // AtendimentoCampus
  // 
  typedef ::ItemAtendimentoCampusSolucao AtendimentoCampus_type;
  typedef ::xsd::cxx::tree::sequence< AtendimentoCampus_type > AtendimentoCampus_sequence;
  typedef AtendimentoCampus_sequence::iterator AtendimentoCampus_iterator;
  typedef AtendimentoCampus_sequence::const_iterator AtendimentoCampus_const_iterator;
  typedef ::xsd::cxx::tree::traits< AtendimentoCampus_type, char > AtendimentoCampus_traits;

  const AtendimentoCampus_sequence&
  AtendimentoCampus () const;

  AtendimentoCampus_sequence&
  AtendimentoCampus ();

  void
  AtendimentoCampus (const AtendimentoCampus_sequence& s);

  // Constructors.
  //
  GrupoAtendimentoCampusSolucao ();

  GrupoAtendimentoCampusSolucao (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  GrupoAtendimentoCampusSolucao (const GrupoAtendimentoCampusSolucao& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  virtual GrupoAtendimentoCampusSolucao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoAtendimentoCampusSolucao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  AtendimentoCampus_sequence AtendimentoCampus_;
};

class GrupoAtendimentoUnidadeSolucao: public ::xml_schema::type
{
  public:
  // AtendimentoUnidade
  // 
  typedef ::ItemAtendimentoUnidadeSolucao AtendimentoUnidade_type;
  typedef ::xsd::cxx::tree::sequence< AtendimentoUnidade_type > AtendimentoUnidade_sequence;
  typedef AtendimentoUnidade_sequence::iterator AtendimentoUnidade_iterator;
  typedef AtendimentoUnidade_sequence::const_iterator AtendimentoUnidade_const_iterator;
  typedef ::xsd::cxx::tree::traits< AtendimentoUnidade_type, char > AtendimentoUnidade_traits;

  const AtendimentoUnidade_sequence&
  AtendimentoUnidade () const;

  AtendimentoUnidade_sequence&
  AtendimentoUnidade ();

  void
  AtendimentoUnidade (const AtendimentoUnidade_sequence& s);

  // Constructors.
  //
  GrupoAtendimentoUnidadeSolucao ();

  GrupoAtendimentoUnidadeSolucao (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  GrupoAtendimentoUnidadeSolucao (const GrupoAtendimentoUnidadeSolucao& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

  virtual GrupoAtendimentoUnidadeSolucao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoAtendimentoUnidadeSolucao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  AtendimentoUnidade_sequence AtendimentoUnidade_;
};

class GrupoAtendimentoSalaSolucao: public ::xml_schema::type
{
  public:
  // AtendimentoSala
  // 
  typedef ::ItemAtendimentoSalaSolucao AtendimentoSala_type;
  typedef ::xsd::cxx::tree::sequence< AtendimentoSala_type > AtendimentoSala_sequence;
  typedef AtendimentoSala_sequence::iterator AtendimentoSala_iterator;
  typedef AtendimentoSala_sequence::const_iterator AtendimentoSala_const_iterator;
  typedef ::xsd::cxx::tree::traits< AtendimentoSala_type, char > AtendimentoSala_traits;

  const AtendimentoSala_sequence&
  AtendimentoSala () const;

  AtendimentoSala_sequence&
  AtendimentoSala ();

  void
  AtendimentoSala (const AtendimentoSala_sequence& s);

  // Constructors.
  //
  GrupoAtendimentoSalaSolucao ();

  GrupoAtendimentoSalaSolucao (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  GrupoAtendimentoSalaSolucao (const GrupoAtendimentoSalaSolucao& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  virtual GrupoAtendimentoSalaSolucao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoAtendimentoSalaSolucao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  AtendimentoSala_sequence AtendimentoSala_;
};

class GrupoAtendimentoDiaSemanaSolucao: public ::xml_schema::type
{
  public:
  // AtendimentoDiaSemana
  // 
  typedef ::ItemAtendimentoDiaSemanaSolucao AtendimentoDiaSemana_type;
  typedef ::xsd::cxx::tree::sequence< AtendimentoDiaSemana_type > AtendimentoDiaSemana_sequence;
  typedef AtendimentoDiaSemana_sequence::iterator AtendimentoDiaSemana_iterator;
  typedef AtendimentoDiaSemana_sequence::const_iterator AtendimentoDiaSemana_const_iterator;
  typedef ::xsd::cxx::tree::traits< AtendimentoDiaSemana_type, char > AtendimentoDiaSemana_traits;

  const AtendimentoDiaSemana_sequence&
  AtendimentoDiaSemana () const;

  AtendimentoDiaSemana_sequence&
  AtendimentoDiaSemana ();

  void
  AtendimentoDiaSemana (const AtendimentoDiaSemana_sequence& s);

  // Constructors.
  //
  GrupoAtendimentoDiaSemanaSolucao ();

  GrupoAtendimentoDiaSemanaSolucao (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  GrupoAtendimentoDiaSemanaSolucao (const GrupoAtendimentoDiaSemanaSolucao& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

  virtual GrupoAtendimentoDiaSemanaSolucao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoAtendimentoDiaSemanaSolucao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  AtendimentoDiaSemana_sequence AtendimentoDiaSemana_;
};

class GrupoAtendimentoTaticoSolucao: public ::xml_schema::type
{
  public:
  // AtendimentoTatico
  // 
  typedef ::ItemAtendimentoTaticoSolucao AtendimentoTatico_type;
  typedef ::xsd::cxx::tree::sequence< AtendimentoTatico_type > AtendimentoTatico_sequence;
  typedef AtendimentoTatico_sequence::iterator AtendimentoTatico_iterator;
  typedef AtendimentoTatico_sequence::const_iterator AtendimentoTatico_const_iterator;
  typedef ::xsd::cxx::tree::traits< AtendimentoTatico_type, char > AtendimentoTatico_traits;

  const AtendimentoTatico_sequence&
  AtendimentoTatico () const;

  AtendimentoTatico_sequence&
  AtendimentoTatico ();

  void
  AtendimentoTatico (const AtendimentoTatico_sequence& s);

  // Constructors.
  //
  GrupoAtendimentoTaticoSolucao ();

  GrupoAtendimentoTaticoSolucao (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  GrupoAtendimentoTaticoSolucao (const GrupoAtendimentoTaticoSolucao& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

  virtual GrupoAtendimentoTaticoSolucao*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~GrupoAtendimentoTaticoSolucao ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  AtendimentoTatico_sequence AtendimentoTatico_;
};

class TriedaInput: public ::xml_schema::type
{
  public:
  // calendarios
  // 
  typedef ::GrupoCalendario calendarios_type;
  typedef ::xsd::cxx::tree::traits< calendarios_type, char > calendarios_traits;

  const calendarios_type&
  calendarios () const;

  calendarios_type&
  calendarios ();

  void
  calendarios (const calendarios_type& x);

  void
  calendarios (::std::auto_ptr< calendarios_type > p);

  // tiposSala
  // 
  typedef ::GrupoTipoSala tiposSala_type;
  typedef ::xsd::cxx::tree::traits< tiposSala_type, char > tiposSala_traits;

  const tiposSala_type&
  tiposSala () const;

  tiposSala_type&
  tiposSala ();

  void
  tiposSala (const tiposSala_type& x);

  void
  tiposSala (::std::auto_ptr< tiposSala_type > p);

  // tiposContrato
  // 
  typedef ::GrupoTipoContrato tiposContrato_type;
  typedef ::xsd::cxx::tree::traits< tiposContrato_type, char > tiposContrato_traits;

  const tiposContrato_type&
  tiposContrato () const;

  tiposContrato_type&
  tiposContrato ();

  void
  tiposContrato (const tiposContrato_type& x);

  void
  tiposContrato (::std::auto_ptr< tiposContrato_type > p);

  // tiposTitulacao
  // 
  typedef ::GrupoTipoTitulacao tiposTitulacao_type;
  typedef ::xsd::cxx::tree::traits< tiposTitulacao_type, char > tiposTitulacao_traits;

  const tiposTitulacao_type&
  tiposTitulacao () const;

  tiposTitulacao_type&
  tiposTitulacao ();

  void
  tiposTitulacao (const tiposTitulacao_type& x);

  void
  tiposTitulacao (::std::auto_ptr< tiposTitulacao_type > p);

  // areasTitulacao
  // 
  typedef ::GrupoAreaTitulacao areasTitulacao_type;
  typedef ::xsd::cxx::tree::traits< areasTitulacao_type, char > areasTitulacao_traits;

  const areasTitulacao_type&
  areasTitulacao () const;

  areasTitulacao_type&
  areasTitulacao ();

  void
  areasTitulacao (const areasTitulacao_type& x);

  void
  areasTitulacao (::std::auto_ptr< areasTitulacao_type > p);

  // tiposDisciplina
  // 
  typedef ::GrupoTipoDisciplina tiposDisciplina_type;
  typedef ::xsd::cxx::tree::traits< tiposDisciplina_type, char > tiposDisciplina_traits;

  const tiposDisciplina_type&
  tiposDisciplina () const;

  tiposDisciplina_type&
  tiposDisciplina ();

  void
  tiposDisciplina (const tiposDisciplina_type& x);

  void
  tiposDisciplina (::std::auto_ptr< tiposDisciplina_type > p);

  // niveisDificuldade
  // 
  typedef ::GrupoNivelDificuldade niveisDificuldade_type;
  typedef ::xsd::cxx::tree::traits< niveisDificuldade_type, char > niveisDificuldade_traits;

  const niveisDificuldade_type&
  niveisDificuldade () const;

  niveisDificuldade_type&
  niveisDificuldade ();

  void
  niveisDificuldade (const niveisDificuldade_type& x);

  void
  niveisDificuldade (::std::auto_ptr< niveisDificuldade_type > p);

  // tiposCurso
  // 
  typedef ::GrupoTipoCurso tiposCurso_type;
  typedef ::xsd::cxx::tree::traits< tiposCurso_type, char > tiposCurso_traits;

  const tiposCurso_type&
  tiposCurso () const;

  tiposCurso_type&
  tiposCurso ();

  void
  tiposCurso (const tiposCurso_type& x);

  void
  tiposCurso (::std::auto_ptr< tiposCurso_type > p);

  // regrasDivisaoCredito
  // 
  typedef ::GrupoDivisaoCreditos regrasDivisaoCredito_type;
  typedef ::xsd::cxx::tree::traits< regrasDivisaoCredito_type, char > regrasDivisaoCredito_traits;

  const regrasDivisaoCredito_type&
  regrasDivisaoCredito () const;

  regrasDivisaoCredito_type&
  regrasDivisaoCredito ();

  void
  regrasDivisaoCredito (const regrasDivisaoCredito_type& x);

  void
  regrasDivisaoCredito (::std::auto_ptr< regrasDivisaoCredito_type > p);

  // campi
  // 
  typedef ::GrupoCampus campi_type;
  typedef ::xsd::cxx::tree::traits< campi_type, char > campi_traits;

  const campi_type&
  campi () const;

  campi_type&
  campi ();

  void
  campi (const campi_type& x);

  void
  campi (::std::auto_ptr< campi_type > p);

  // temposDeslocamentosCampi
  // 
  typedef ::GrupoDeslocamento temposDeslocamentosCampi_type;
  typedef ::xsd::cxx::tree::traits< temposDeslocamentosCampi_type, char > temposDeslocamentosCampi_traits;

  const temposDeslocamentosCampi_type&
  temposDeslocamentosCampi () const;

  temposDeslocamentosCampi_type&
  temposDeslocamentosCampi ();

  void
  temposDeslocamentosCampi (const temposDeslocamentosCampi_type& x);

  void
  temposDeslocamentosCampi (::std::auto_ptr< temposDeslocamentosCampi_type > p);

  // temposDeslocamentosUnidades
  // 
  typedef ::GrupoDeslocamento temposDeslocamentosUnidades_type;
  typedef ::xsd::cxx::tree::traits< temposDeslocamentosUnidades_type, char > temposDeslocamentosUnidades_traits;

  const temposDeslocamentosUnidades_type&
  temposDeslocamentosUnidades () const;

  temposDeslocamentosUnidades_type&
  temposDeslocamentosUnidades ();

  void
  temposDeslocamentosUnidades (const temposDeslocamentosUnidades_type& x);

  void
  temposDeslocamentosUnidades (::std::auto_ptr< temposDeslocamentosUnidades_type > p);

  // disciplinas
  // 
  typedef ::GrupoDisciplina disciplinas_type;
  typedef ::xsd::cxx::tree::traits< disciplinas_type, char > disciplinas_traits;

  const disciplinas_type&
  disciplinas () const;

  disciplinas_type&
  disciplinas ();

  void
  disciplinas (const disciplinas_type& x);

  void
  disciplinas (::std::auto_ptr< disciplinas_type > p);

  // cursos
  // 
  typedef ::GrupoCurso cursos_type;
  typedef ::xsd::cxx::tree::traits< cursos_type, char > cursos_traits;

  const cursos_type&
  cursos () const;

  cursos_type&
  cursos ();

  void
  cursos (const cursos_type& x);

  void
  cursos (::std::auto_ptr< cursos_type > p);

  // ofertaCursosCampi
  // 
  typedef ::GrupoOfertaCurso ofertaCursosCampi_type;
  typedef ::xsd::cxx::tree::traits< ofertaCursosCampi_type, char > ofertaCursosCampi_traits;

  const ofertaCursosCampi_type&
  ofertaCursosCampi () const;

  ofertaCursosCampi_type&
  ofertaCursosCampi ();

  void
  ofertaCursosCampi (const ofertaCursosCampi_type& x);

  void
  ofertaCursosCampi (::std::auto_ptr< ofertaCursosCampi_type > p);

  // demandas
  // 
  typedef ::GrupoDemanda demandas_type;
  typedef ::xsd::cxx::tree::traits< demandas_type, char > demandas_traits;

  const demandas_type&
  demandas () const;

  demandas_type&
  demandas ();

  void
  demandas (const demandas_type& x);

  void
  demandas (::std::auto_ptr< demandas_type > p);

  // alunosDemanda
  // 
  typedef ::GrupoAlunoDemanda alunosDemanda_type;
  typedef ::xsd::cxx::tree::traits< alunosDemanda_type, char > alunosDemanda_traits;

  const alunosDemanda_type&
  alunosDemanda () const;

  alunosDemanda_type&
  alunosDemanda ();

  void
  alunosDemanda (const alunosDemanda_type& x);

  void
  alunosDemanda (::std::auto_ptr< alunosDemanda_type > p);

  // parametrosPlanejamento
  // 
  typedef ::ItemParametrosPlanejamento parametrosPlanejamento_type;
  typedef ::xsd::cxx::tree::traits< parametrosPlanejamento_type, char > parametrosPlanejamento_traits;

  const parametrosPlanejamento_type&
  parametrosPlanejamento () const;

  parametrosPlanejamento_type&
  parametrosPlanejamento ();

  void
  parametrosPlanejamento (const parametrosPlanejamento_type& x);

  void
  parametrosPlanejamento (::std::auto_ptr< parametrosPlanejamento_type > p);

  // fixacoes
  // 
  typedef ::GrupoFixacao fixacoes_type;
  typedef ::xsd::cxx::tree::traits< fixacoes_type, char > fixacoes_traits;

  const fixacoes_type&
  fixacoes () const;

  fixacoes_type&
  fixacoes ();

  void
  fixacoes (const fixacoes_type& x);

  void
  fixacoes (::std::auto_ptr< fixacoes_type > p);

  // atendimentosTatico
  // 
  typedef ::GrupoAtendimentoCampusSolucao atendimentosTatico_type;
  typedef ::xsd::cxx::tree::optional< atendimentosTatico_type > atendimentosTatico_optional;
  typedef ::xsd::cxx::tree::traits< atendimentosTatico_type, char > atendimentosTatico_traits;

  const atendimentosTatico_optional&
  atendimentosTatico () const;

  atendimentosTatico_optional&
  atendimentosTatico ();

  void
  atendimentosTatico (const atendimentosTatico_type& x);

  void
  atendimentosTatico (const atendimentosTatico_optional& x);

  void
  atendimentosTatico (::std::auto_ptr< atendimentosTatico_type > p);

  // Constructors.
  //
  TriedaInput (const calendarios_type&,
               const tiposSala_type&,
               const tiposContrato_type&,
               const tiposTitulacao_type&,
               const areasTitulacao_type&,
               const tiposDisciplina_type&,
               const niveisDificuldade_type&,
               const tiposCurso_type&,
               const regrasDivisaoCredito_type&,
               const campi_type&,
               const temposDeslocamentosCampi_type&,
               const temposDeslocamentosUnidades_type&,
               const disciplinas_type&,
               const cursos_type&,
               const ofertaCursosCampi_type&,
               const demandas_type&,
               const alunosDemanda_type&,
               const parametrosPlanejamento_type&,
               const fixacoes_type&);

  TriedaInput (::std::auto_ptr< calendarios_type >&,
               ::std::auto_ptr< tiposSala_type >&,
               ::std::auto_ptr< tiposContrato_type >&,
               ::std::auto_ptr< tiposTitulacao_type >&,
               ::std::auto_ptr< areasTitulacao_type >&,
               ::std::auto_ptr< tiposDisciplina_type >&,
               ::std::auto_ptr< niveisDificuldade_type >&,
               ::std::auto_ptr< tiposCurso_type >&,
               ::std::auto_ptr< regrasDivisaoCredito_type >&,
               ::std::auto_ptr< campi_type >&,
               ::std::auto_ptr< temposDeslocamentosCampi_type >&,
               ::std::auto_ptr< temposDeslocamentosUnidades_type >&,
               ::std::auto_ptr< disciplinas_type >&,
               ::std::auto_ptr< cursos_type >&,
               ::std::auto_ptr< ofertaCursosCampi_type >&,
               ::std::auto_ptr< demandas_type >&,
               ::std::auto_ptr< alunosDemanda_type >&,
               ::std::auto_ptr< parametrosPlanejamento_type >&,
               ::std::auto_ptr< fixacoes_type >&);

  TriedaInput (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  TriedaInput (const TriedaInput& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual TriedaInput*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~TriedaInput ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< calendarios_type > calendarios_;
  ::xsd::cxx::tree::one< tiposSala_type > tiposSala_;
  ::xsd::cxx::tree::one< tiposContrato_type > tiposContrato_;
  ::xsd::cxx::tree::one< tiposTitulacao_type > tiposTitulacao_;
  ::xsd::cxx::tree::one< areasTitulacao_type > areasTitulacao_;
  ::xsd::cxx::tree::one< tiposDisciplina_type > tiposDisciplina_;
  ::xsd::cxx::tree::one< niveisDificuldade_type > niveisDificuldade_;
  ::xsd::cxx::tree::one< tiposCurso_type > tiposCurso_;
  ::xsd::cxx::tree::one< regrasDivisaoCredito_type > regrasDivisaoCredito_;
  ::xsd::cxx::tree::one< campi_type > campi_;
  ::xsd::cxx::tree::one< temposDeslocamentosCampi_type > temposDeslocamentosCampi_;
  ::xsd::cxx::tree::one< temposDeslocamentosUnidades_type > temposDeslocamentosUnidades_;
  ::xsd::cxx::tree::one< disciplinas_type > disciplinas_;
  ::xsd::cxx::tree::one< cursos_type > cursos_;
  ::xsd::cxx::tree::one< ofertaCursosCampi_type > ofertaCursosCampi_;
  ::xsd::cxx::tree::one< demandas_type > demandas_;
  ::xsd::cxx::tree::one< alunosDemanda_type > alunosDemanda_;
  ::xsd::cxx::tree::one< parametrosPlanejamento_type > parametrosPlanejamento_;
  ::xsd::cxx::tree::one< fixacoes_type > fixacoes_;
  atendimentosTatico_optional atendimentosTatico_;
};

class cargaHorariaSemanalAluno: public ::xml_schema::type
{
  public:
  // equilibrar
  // 
  typedef ::xml_schema::simple_type equilibrar_type;
  typedef ::xsd::cxx::tree::optional< equilibrar_type > equilibrar_optional;
  typedef ::xsd::cxx::tree::traits< equilibrar_type, char > equilibrar_traits;

  const equilibrar_optional&
  equilibrar () const;

  equilibrar_optional&
  equilibrar ();

  void
  equilibrar (const equilibrar_type& x);

  void
  equilibrar (const equilibrar_optional& x);

  void
  equilibrar (::std::auto_ptr< equilibrar_type > p);

  // minimizarDias
  // 
  typedef ::xml_schema::simple_type minimizarDias_type;
  typedef ::xsd::cxx::tree::optional< minimizarDias_type > minimizarDias_optional;
  typedef ::xsd::cxx::tree::traits< minimizarDias_type, char > minimizarDias_traits;

  const minimizarDias_optional&
  minimizarDias () const;

  minimizarDias_optional&
  minimizarDias ();

  void
  minimizarDias (const minimizarDias_type& x);

  void
  minimizarDias (const minimizarDias_optional& x);

  void
  minimizarDias (::std::auto_ptr< minimizarDias_type > p);

  // indiferente
  // 
  typedef ::xml_schema::simple_type indiferente_type;
  typedef ::xsd::cxx::tree::optional< indiferente_type > indiferente_optional;
  typedef ::xsd::cxx::tree::traits< indiferente_type, char > indiferente_traits;

  const indiferente_optional&
  indiferente () const;

  indiferente_optional&
  indiferente ();

  void
  indiferente (const indiferente_type& x);

  void
  indiferente (const indiferente_optional& x);

  void
  indiferente (::std::auto_ptr< indiferente_type > p);

  // Constructors.
  //
  cargaHorariaSemanalAluno ();

  cargaHorariaSemanalAluno (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  cargaHorariaSemanalAluno (const cargaHorariaSemanalAluno& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

  virtual cargaHorariaSemanalAluno*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~cargaHorariaSemanalAluno ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  equilibrar_optional equilibrar_;
  minimizarDias_optional minimizarDias_;
  indiferente_optional indiferente_;
};

class cargaHorariaSemanalProfessor: public ::xml_schema::type
{
  public:
  // equilibrar
  // 
  typedef ::xml_schema::simple_type equilibrar_type;
  typedef ::xsd::cxx::tree::optional< equilibrar_type > equilibrar_optional;
  typedef ::xsd::cxx::tree::traits< equilibrar_type, char > equilibrar_traits;

  const equilibrar_optional&
  equilibrar () const;

  equilibrar_optional&
  equilibrar ();

  void
  equilibrar (const equilibrar_type& x);

  void
  equilibrar (const equilibrar_optional& x);

  void
  equilibrar (::std::auto_ptr< equilibrar_type > p);

  // minimizarDias
  // 
  typedef ::xml_schema::simple_type minimizarDias_type;
  typedef ::xsd::cxx::tree::optional< minimizarDias_type > minimizarDias_optional;
  typedef ::xsd::cxx::tree::traits< minimizarDias_type, char > minimizarDias_traits;

  const minimizarDias_optional&
  minimizarDias () const;

  minimizarDias_optional&
  minimizarDias ();

  void
  minimizarDias (const minimizarDias_type& x);

  void
  minimizarDias (const minimizarDias_optional& x);

  void
  minimizarDias (::std::auto_ptr< minimizarDias_type > p);

  // indiferente
  // 
  typedef ::xml_schema::simple_type indiferente_type;
  typedef ::xsd::cxx::tree::optional< indiferente_type > indiferente_optional;
  typedef ::xsd::cxx::tree::traits< indiferente_type, char > indiferente_traits;

  const indiferente_optional&
  indiferente () const;

  indiferente_optional&
  indiferente ();

  void
  indiferente (const indiferente_type& x);

  void
  indiferente (const indiferente_optional& x);

  void
  indiferente (::std::auto_ptr< indiferente_type > p);

  // Constructors.
  //
  cargaHorariaSemanalProfessor ();

  cargaHorariaSemanalProfessor (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  cargaHorariaSemanalProfessor (const cargaHorariaSemanalProfessor& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

  virtual cargaHorariaSemanalProfessor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~cargaHorariaSemanalProfessor ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  equilibrar_optional equilibrar_;
  minimizarDias_optional minimizarDias_;
  indiferente_optional indiferente_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::TriedaInput >
TriedaInput_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TriedaInput >
TriedaInput_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TriedaInput >
TriedaInput_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::TriedaInput >
TriedaInput_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TriedaInput >
TriedaInput_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TriedaInput >
TriedaInput_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TriedaInput >
TriedaInput_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TriedaInput >
TriedaInput_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TriedaInput >
TriedaInput_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::TriedaInput >
TriedaInput_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TriedaInput >
TriedaInput_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TriedaInput >
TriedaInput_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::TriedaInput >
TriedaInput_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TriedaInput >
TriedaInput_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // TRIEDA_INPUT_XSD_H
